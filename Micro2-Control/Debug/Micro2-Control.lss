
Micro2-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000039f6  00003a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  0080008a  0080008a  00003ab4  2**0
                  ALLOC
  3 .stab         00003e94  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002073  00000000  00000000  00007948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000099bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c79f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d939  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__vector_3>
      10:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__vector_6>
      1c:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__vector_7>
      20:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__vector_8>
      24:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 14 	call	0x289c	; 0x289c <main>
      8a:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MICROCONTROLLER2_init>:
/*******************************************************************************
 *                    		Functions Definitions                              *
 *******************************************************************************/

void MICROCONTROLLER2_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_init>

	BUZZER_init();
     b5e:	0e 94 85 0b 	call	0x170a	; 0x170a <BUZZER_init>
	DCMOTOR_init();
     b62:	0e 94 c9 14 	call	0x2992	; 0x2992 <DCMOTOR_init>

	EEPROM_init();
     b66:	0e 94 91 0b 	call	0x1722	; 0x1722 <EEPROM_init>

	UART_ConfigType UART_configPtr = {UART_BIT_RATE_9600_BITS_PER_SECONDS,UART_EIGHT_BIT_DATA_MODE,UART_PARITY_DISABLED,UART_ONE_STOP_BIT};
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	99 87       	std	Y+9, r25	; 0x09
     b70:	88 87       	std	Y+8, r24	; 0x08
     b72:	e8 e6       	ldi	r30, 0x68	; 104
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	fb 87       	std	Y+11, r31	; 0x0b
     b78:	ea 87       	std	Y+10, r30	; 0x0a
     b7a:	f7 e0       	ldi	r31, 0x07	; 7
     b7c:	fc 87       	std	Y+12, r31	; 0x0c
     b7e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b80:	fb 85       	ldd	r31, Y+11	; 0x0b
     b82:	00 80       	ld	r0, Z
     b84:	8a 85       	ldd	r24, Y+10	; 0x0a
     b86:	9b 85       	ldd	r25, Y+11	; 0x0b
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9b 87       	std	Y+11, r25	; 0x0b
     b8c:	8a 87       	std	Y+10, r24	; 0x0a
     b8e:	e8 85       	ldd	r30, Y+8	; 0x08
     b90:	f9 85       	ldd	r31, Y+9	; 0x09
     b92:	00 82       	st	Z, r0
     b94:	88 85       	ldd	r24, Y+8	; 0x08
     b96:	99 85       	ldd	r25, Y+9	; 0x09
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	99 87       	std	Y+9, r25	; 0x09
     b9c:	88 87       	std	Y+8, r24	; 0x08
     b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	9c 87       	std	Y+12, r25	; 0x0c
     ba4:	ec 85       	ldd	r30, Y+12	; 0x0c
     ba6:	ee 23       	and	r30, r30
     ba8:	51 f7       	brne	.-44     	; 0xb7e <MICROCONTROLLER2_init+0x38>
	UART_init(&UART_configPtr);
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 29 1b 	call	0x3652	; 0x3652 <UART_init>

}
     bb2:	2c 96       	adiw	r28, 0x0c	; 12
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <APP_receivePassword>:
 * This argument shall indicate an array that is passed by reference which store the password in it.
 * This is argument will be modified to have a null character at the end.
 * [Returns] : None
 */
void APP_receivePassword(uint8* a_password_entry_Ptr)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <APP_receivePassword+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <APP_receivePassword+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9d 83       	std	Y+5, r25	; 0x05
     bd4:	8c 83       	std	Y+4, r24	; 0x04
	/* Counter for the if 0 loop to check with it */
	uint8 j=0;
#endif

	/* Index */
	uint8 i=0;
     bd6:	1b 82       	std	Y+3, r1	; 0x03

	/* Flag to break out of loop */
	uint8 password_entry_finished=0;
     bd8:	1a 82       	std	Y+2, r1	; 0x02

	/* Holds the value received , every UART_receive byte get another byte so you can't call it to compare */
	uint8 received_byte=0;
     bda:	19 82       	std	Y+1, r1	; 0x01
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <APP_receivePassword+0x46>
#endif

	while (password_entry_finished==0)
	{
		/* Hold the value of received byte */
		received_byte = UART_recieveByte();
     bde:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
     be2:	89 83       	std	Y+1, r24	; 0x01

		if (received_byte != APP_END_OF_PASSWORD)
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	8e 35       	cpi	r24, 0x5E	; 94
     be8:	71 f0       	breq	.+28     	; 0xc06 <APP_receivePassword+0x42>
		{
			a_password_entry_Ptr[i]= received_byte;
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	9d 81       	ldd	r25, Y+5	; 0x05
     bf4:	fc 01       	movw	r30, r24
     bf6:	e2 0f       	add	r30, r18
     bf8:	f3 1f       	adc	r31, r19
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	80 83       	st	Z, r24

			/* To see at the Micro2 what we received */
			//			LCD_intgerToString(a_password_entry_Ptr[i]);
			i++;
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <APP_receivePassword+0x46>
		}
		else
		{
			/* Break out of loop */
			password_entry_finished=1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8a 83       	std	Y+2, r24	; 0x02
	{
		a_password_entry_Ptr[i] = UART_recieveByte();
	}
#endif

	while (password_entry_finished==0)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 23       	and	r24, r24
     c0e:	39 f3       	breq	.-50     	; 0xbde <APP_receivePassword+0x1a>
			password_entry_finished=1;
		}
	}

	/* Put a null character at the end of password */
	a_password_entry_Ptr[i]='\0';
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	9d 81       	ldd	r25, Y+5	; 0x05
     c1a:	fc 01       	movw	r30, r24
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	10 82       	st	Z, r1
	LCD_displayString("FINISHED");
	_delay_ms(3000);

#endif

}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <APP_checkIfFirstTimeEntry>:

void APP_checkIfFirstTimeEntry(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	ac 97       	sbiw	r28, 0x2c	; 44
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	/* For comparing */
	uint8 i=0;
     c46:	1b a6       	std	Y+43, r1	; 0x2b

	/* Holds the size of password*/
	uint8 size=0;
     c48:	1c a6       	std	Y+44, r1	; 0x2c
	LCD_intgerToString(password_check);

#endif

	/* Assign the flag to password check as we can check on its value */
	EEPROM_readByte(EEPROM_PASSWORD_ADDRESS_FLAG,&password_check);
     c4a:	24 e9       	ldi	r18, 0x94	; 148
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	88 ee       	ldi	r24, 0xE8	; 232
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	b9 01       	movw	r22, r18
     c54:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 ea       	ldi	r26, 0xA0	; 160
     c5e:	b2 e4       	ldi	r27, 0x42	; 66
     c60:	8f a3       	std	Y+39, r24	; 0x27
     c62:	98 a7       	std	Y+40, r25	; 0x28
     c64:	a9 a7       	std	Y+41, r26	; 0x29
     c66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c68:	6f a1       	ldd	r22, Y+39	; 0x27
     c6a:	78 a5       	ldd	r23, Y+40	; 0x28
     c6c:	89 a5       	ldd	r24, Y+41	; 0x29
     c6e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	4a ef       	ldi	r20, 0xFA	; 250
     c76:	54 e4       	ldi	r21, 0x44	; 68
     c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	8b a3       	std	Y+35, r24	; 0x23
     c82:	9c a3       	std	Y+36, r25	; 0x24
     c84:	ad a3       	std	Y+37, r26	; 0x25
     c86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c88:	6b a1       	ldd	r22, Y+35	; 0x23
     c8a:	7c a1       	ldd	r23, Y+36	; 0x24
     c8c:	8d a1       	ldd	r24, Y+37	; 0x25
     c8e:	9e a1       	ldd	r25, Y+38	; 0x26
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e8       	ldi	r20, 0x80	; 128
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9c:	88 23       	and	r24, r24
     c9e:	2c f4       	brge	.+10     	; 0xcaa <APP_checkIfFirstTimeEntry+0x78>
		__ticks = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9a a3       	std	Y+34, r25	; 0x22
     ca6:	89 a3       	std	Y+33, r24	; 0x21
     ca8:	3f c0       	rjmp	.+126    	; 0xd28 <APP_checkIfFirstTimeEntry+0xf6>
	else if (__tmp > 65535)
     caa:	6b a1       	ldd	r22, Y+35	; 0x23
     cac:	7c a1       	ldd	r23, Y+36	; 0x24
     cae:	8d a1       	ldd	r24, Y+37	; 0x25
     cb0:	9e a1       	ldd	r25, Y+38	; 0x26
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	3f ef       	ldi	r19, 0xFF	; 255
     cb6:	4f e7       	ldi	r20, 0x7F	; 127
     cb8:	57 e4       	ldi	r21, 0x47	; 71
     cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cbe:	18 16       	cp	r1, r24
     cc0:	4c f5       	brge	.+82     	; 0xd14 <APP_checkIfFirstTimeEntry+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc2:	6f a1       	ldd	r22, Y+39	; 0x27
     cc4:	78 a5       	ldd	r23, Y+40	; 0x28
     cc6:	89 a5       	ldd	r24, Y+41	; 0x29
     cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e2       	ldi	r20, 0x20	; 32
     cd0:	51 e4       	ldi	r21, 0x41	; 65
     cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	9a a3       	std	Y+34, r25	; 0x22
     ce8:	89 a3       	std	Y+33, r24	; 0x21
     cea:	0f c0       	rjmp	.+30     	; 0xd0a <APP_checkIfFirstTimeEntry+0xd8>
     cec:	88 ec       	ldi	r24, 0xC8	; 200
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	98 a3       	std	Y+32, r25	; 0x20
     cf2:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cf6:	98 a1       	ldd	r25, Y+32	; 0x20
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <APP_checkIfFirstTimeEntry+0xc6>
     cfc:	98 a3       	std	Y+32, r25	; 0x20
     cfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d00:	89 a1       	ldd	r24, Y+33	; 0x21
     d02:	9a a1       	ldd	r25, Y+34	; 0x22
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	9a a3       	std	Y+34, r25	; 0x22
     d08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0a:	89 a1       	ldd	r24, Y+33	; 0x21
     d0c:	9a a1       	ldd	r25, Y+34	; 0x22
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	69 f7       	brne	.-38     	; 0xcec <APP_checkIfFirstTimeEntry+0xba>
     d12:	14 c0       	rjmp	.+40     	; 0xd3c <APP_checkIfFirstTimeEntry+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d14:	6b a1       	ldd	r22, Y+35	; 0x23
     d16:	7c a1       	ldd	r23, Y+36	; 0x24
     d18:	8d a1       	ldd	r24, Y+37	; 0x25
     d1a:	9e a1       	ldd	r25, Y+38	; 0x26
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9a a3       	std	Y+34, r25	; 0x22
     d26:	89 a3       	std	Y+33, r24	; 0x21
     d28:	89 a1       	ldd	r24, Y+33	; 0x21
     d2a:	9a a1       	ldd	r25, Y+34	; 0x22
     d2c:	9e 8f       	std	Y+30, r25	; 0x1e
     d2e:	8d 8f       	std	Y+29, r24	; 0x1d
     d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <APP_checkIfFirstTimeEntry+0x102>
     d38:	9e 8f       	std	Y+30, r25	; 0x1e
     d3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(EEPROM_DELAY);

	/* Checking if there is any password saved in memory already */
	if (password_check != NOT_FIRST_TIME)
     d3c:	80 91 94 00 	lds	r24, 0x0094
     d40:	8e 34       	cpi	r24, 0x4E	; 78
     d42:	21 f0       	breq	.+8      	; 0xd4c <APP_checkIfFirstTimeEntry+0x11a>
	{
		/* Taking password for the first time */
		UART_sendByte(ASK_FOR_NEW_PASSWORD);
     d44:	8d e7       	ldi	r24, 0x7D	; 125
     d46:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
     d4a:	07 c1       	rjmp	.+526    	; 0xf5a <APP_checkIfFirstTimeEntry+0x328>

	/* Ask for existing password */
	else
	{
		/* Read the size of password & put in in local variable size */
		EEPROM_readByte(EEPROM_PASS_SIZE,&size);
     d4c:	9e 01       	movw	r18, r28
     d4e:	24 5d       	subi	r18, 0xD4	; 212
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	80 ee       	ldi	r24, 0xE0	; 224
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	b9 01       	movw	r22, r18
     d58:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a0 ea       	ldi	r26, 0xA0	; 160
     d62:	b2 e4       	ldi	r27, 0x42	; 66
     d64:	89 8f       	std	Y+25, r24	; 0x19
     d66:	9a 8f       	std	Y+26, r25	; 0x1a
     d68:	ab 8f       	std	Y+27, r26	; 0x1b
     d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6c:	69 8d       	ldd	r22, Y+25	; 0x19
     d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	8d 8b       	std	Y+21, r24	; 0x15
     d86:	9e 8b       	std	Y+22, r25	; 0x16
     d88:	af 8b       	std	Y+23, r26	; 0x17
     d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da0:	88 23       	and	r24, r24
     da2:	2c f4       	brge	.+10     	; 0xdae <APP_checkIfFirstTimeEntry+0x17c>
		__ticks = 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 8b       	std	Y+20, r25	; 0x14
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	3f c0       	rjmp	.+126    	; 0xe2c <APP_checkIfFirstTimeEntry+0x1fa>
	else if (__tmp > 65535)
     dae:	6d 89       	ldd	r22, Y+21	; 0x15
     db0:	7e 89       	ldd	r23, Y+22	; 0x16
     db2:	8f 89       	ldd	r24, Y+23	; 0x17
     db4:	98 8d       	ldd	r25, Y+24	; 0x18
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	4f e7       	ldi	r20, 0x7F	; 127
     dbc:	57 e4       	ldi	r21, 0x47	; 71
     dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc2:	18 16       	cp	r1, r24
     dc4:	4c f5       	brge	.+82     	; 0xe18 <APP_checkIfFirstTimeEntry+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc6:	69 8d       	ldd	r22, Y+25	; 0x19
     dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9c 8b       	std	Y+20, r25	; 0x14
     dec:	8b 8b       	std	Y+19, r24	; 0x13
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <APP_checkIfFirstTimeEntry+0x1dc>
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9a 8b       	std	Y+18, r25	; 0x12
     df6:	89 8b       	std	Y+17, r24	; 0x11
     df8:	89 89       	ldd	r24, Y+17	; 0x11
     dfa:	9a 89       	ldd	r25, Y+18	; 0x12
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <APP_checkIfFirstTimeEntry+0x1ca>
     e00:	9a 8b       	std	Y+18, r25	; 0x12
     e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e04:	8b 89       	ldd	r24, Y+19	; 0x13
     e06:	9c 89       	ldd	r25, Y+20	; 0x14
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	9c 8b       	std	Y+20, r25	; 0x14
     e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	8b 89       	ldd	r24, Y+19	; 0x13
     e10:	9c 89       	ldd	r25, Y+20	; 0x14
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	69 f7       	brne	.-38     	; 0xdf0 <APP_checkIfFirstTimeEntry+0x1be>
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <APP_checkIfFirstTimeEntry+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e18:	6d 89       	ldd	r22, Y+21	; 0x15
     e1a:	7e 89       	ldd	r23, Y+22	; 0x16
     e1c:	8f 89       	ldd	r24, Y+23	; 0x17
     e1e:	98 8d       	ldd	r25, Y+24	; 0x18
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9c 8b       	std	Y+20, r25	; 0x14
     e2a:	8b 8b       	std	Y+19, r24	; 0x13
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	98 8b       	std	Y+16, r25	; 0x10
     e32:	8f 87       	std	Y+15, r24	; 0x0f
     e34:	8f 85       	ldd	r24, Y+15	; 0x0f
     e36:	98 89       	ldd	r25, Y+16	; 0x10
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <APP_checkIfFirstTimeEntry+0x206>
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
		//		LCD_clearScreen();
		//		LCD_intgerToString(size);

		/* Assign the address from memory to global variable g_eeprom_pass */
		do {
			EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+i,&g_eeprom_pass[i]);
     e40:	8b a5       	ldd	r24, Y+43	; 0x2b
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	8f 5e       	subi	r24, 0xEF	; 239
     e48:	9c 4f       	sbci	r25, 0xFC	; 252
     e4a:	ac 01       	movw	r20, r24
     e4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 01       	movw	r18, r24
     e54:	2b 56       	subi	r18, 0x6B	; 107
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	ca 01       	movw	r24, r20
     e5a:	b9 01       	movw	r22, r18
     e5c:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 ea       	ldi	r26, 0xA0	; 160
     e66:	b2 e4       	ldi	r27, 0x42	; 66
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <APP_checkIfFirstTimeEntry+0x280>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <APP_checkIfFirstTimeEntry+0x2fe>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <APP_checkIfFirstTimeEntry+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <APP_checkIfFirstTimeEntry+0x2e0>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <APP_checkIfFirstTimeEntry+0x2ce>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <APP_checkIfFirstTimeEntry+0x2c2>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <APP_checkIfFirstTimeEntry+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <APP_checkIfFirstTimeEntry+0x30a>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(EEPROM_DELAY);
			//
			//			LCD_moveCursor(1,i);
			//			LCD_intgerToString(g_eeprom_pass[i]);
			i++;
     f44:	8b a5       	ldd	r24, Y+43	; 0x2b
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	8b a7       	std	Y+43, r24	; 0x2b
			//		}while(g_eeprom_pass[i]!='\0');
		}while(i<=size);
     f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f4e:	98 17       	cp	r25, r24
     f50:	08 f0       	brcs	.+2      	; 0xf54 <APP_checkIfFirstTimeEntry+0x322>
     f52:	76 cf       	rjmp	.-276    	; 0xe40 <APP_checkIfFirstTimeEntry+0x20e>

		UART_sendByte(SHOW_MENU);
     f54:	83 e5       	ldi	r24, 0x53	; 83
     f56:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
	}
}
     f5a:	ac 96       	adiw	r28, 0x2c	; 44
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <APP_comparePasswordsFirstTime>:


void APP_comparePasswordsFirstTime(const uint8* a_first_pass_Ptr ,const uint8* a_second_pass_Ptr)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	e0 97       	sbiw	r28, 0x30	; 48
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	9e a7       	std	Y+46, r25	; 0x2e
     f82:	8d a7       	std	Y+45, r24	; 0x2d
     f84:	78 ab       	std	Y+48, r23	; 0x30
     f86:	6f a7       	std	Y+47, r22	; 0x2f
	/* Index */
	uint8 i=0;
     f88:	1c a6       	std	Y+44, r1	; 0x2c
	/* Holds the size of our password */
	uint8 size=0;
     f8a:	1b a6       	std	Y+43, r1	; 0x2b

	//	LCD_clearScreen();
	/* Compare with the null character that we put at the end of password */
	for(i=0;(a_first_pass_Ptr[i]!='\0') || (a_second_pass_Ptr[i]!='\0') ;i++)
     f8c:	1c a6       	std	Y+44, r1	; 0x2c
     f8e:	a4 c0       	rjmp	.+328    	; 0x10d8 <APP_comparePasswordsFirstTime+0x16c>
		LCD_intgerToString(a_first_pass_Ptr[i]);
		LCD_moveCursor(1,i);
		LCD_intgerToString(a_second_pass_Ptr[i]);
		_delay_ms(2000);
#endif
		if (a_first_pass_Ptr[i]!=a_second_pass_Ptr[i]) /*Password doesn't match -> Send to microcontroller1 */
     f90:	8c a5       	ldd	r24, Y+44	; 0x2c
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8d a5       	ldd	r24, Y+45	; 0x2d
     f98:	9e a5       	ldd	r25, Y+46	; 0x2e
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	40 81       	ld	r20, Z
     fa2:	8c a5       	ldd	r24, Y+44	; 0x2c
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
     faa:	98 a9       	ldd	r25, Y+48	; 0x30
     fac:	fc 01       	movw	r30, r24
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	80 81       	ld	r24, Z
     fb4:	48 17       	cp	r20, r24
     fb6:	19 f0       	breq	.+6      	; 0xfbe <APP_comparePasswordsFirstTime+0x52>
		{
			/* To skip the password matches loop */
			g_status = ERROR;
     fb8:	10 92 a1 00 	sts	0x00A1, r1
     fbc:	a5 c0       	rjmp	.+330    	; 0x1108 <APP_comparePasswordsFirstTime+0x19c>
		else
		{
			/* Write password byte by byte in eeprom
			 *  We don't have to increment the address of eeprom as the hardware automatically do it
			 */
			EEPROM_writeByte(EEPROM_PASSWORD_ADDRESS+i,a_first_pass_Ptr[i]);
     fbe:	8c a5       	ldd	r24, Y+44	; 0x2c
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	8f 5e       	subi	r24, 0xEF	; 239
     fc6:	9c 4f       	sbci	r25, 0xFC	; 252
     fc8:	ac 01       	movw	r20, r24
     fca:	8c a5       	ldd	r24, Y+44	; 0x2c
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8d a5       	ldd	r24, Y+45	; 0x2d
     fd2:	9e a5       	ldd	r25, Y+46	; 0x2e
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	20 81       	ld	r18, Z
     fdc:	ca 01       	movw	r24, r20
     fde:	62 2f       	mov	r22, r18
     fe0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <EEPROM_writeByte>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 ea       	ldi	r26, 0xA0	; 160
     fea:	b2 e4       	ldi	r27, 0x42	; 66
     fec:	8f a3       	std	Y+39, r24	; 0x27
     fee:	98 a7       	std	Y+40, r25	; 0x28
     ff0:	a9 a7       	std	Y+41, r26	; 0x29
     ff2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff4:	6f a1       	ldd	r22, Y+39	; 0x27
     ff6:	78 a5       	ldd	r23, Y+40	; 0x28
     ff8:	89 a5       	ldd	r24, Y+41	; 0x29
     ffa:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4a ef       	ldi	r20, 0xFA	; 250
    1002:	54 e4       	ldi	r21, 0x44	; 68
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8b a3       	std	Y+35, r24	; 0x23
    100e:	9c a3       	std	Y+36, r25	; 0x24
    1010:	ad a3       	std	Y+37, r26	; 0x25
    1012:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1014:	6b a1       	ldd	r22, Y+35	; 0x23
    1016:	7c a1       	ldd	r23, Y+36	; 0x24
    1018:	8d a1       	ldd	r24, Y+37	; 0x25
    101a:	9e a1       	ldd	r25, Y+38	; 0x26
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1028:	88 23       	and	r24, r24
    102a:	2c f4       	brge	.+10     	; 0x1036 <APP_comparePasswordsFirstTime+0xca>
		__ticks = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a a3       	std	Y+34, r25	; 0x22
    1032:	89 a3       	std	Y+33, r24	; 0x21
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <APP_comparePasswordsFirstTime+0x148>
	else if (__tmp > 65535)
    1036:	6b a1       	ldd	r22, Y+35	; 0x23
    1038:	7c a1       	ldd	r23, Y+36	; 0x24
    103a:	8d a1       	ldd	r24, Y+37	; 0x25
    103c:	9e a1       	ldd	r25, Y+38	; 0x26
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	4c f5       	brge	.+82     	; 0x10a0 <APP_comparePasswordsFirstTime+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104e:	6f a1       	ldd	r22, Y+39	; 0x27
    1050:	78 a5       	ldd	r23, Y+40	; 0x28
    1052:	89 a5       	ldd	r24, Y+41	; 0x29
    1054:	9a a5       	ldd	r25, Y+42	; 0x2a
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e2       	ldi	r20, 0x20	; 32
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9a a3       	std	Y+34, r25	; 0x22
    1074:	89 a3       	std	Y+33, r24	; 0x21
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <APP_comparePasswordsFirstTime+0x12a>
    1078:	88 ec       	ldi	r24, 0xC8	; 200
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	98 a3       	std	Y+32, r25	; 0x20
    107e:	8f 8f       	std	Y+31, r24	; 0x1f
    1080:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1082:	98 a1       	ldd	r25, Y+32	; 0x20
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <APP_comparePasswordsFirstTime+0x118>
    1088:	98 a3       	std	Y+32, r25	; 0x20
    108a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	89 a1       	ldd	r24, Y+33	; 0x21
    108e:	9a a1       	ldd	r25, Y+34	; 0x22
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	9a a3       	std	Y+34, r25	; 0x22
    1094:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1096:	89 a1       	ldd	r24, Y+33	; 0x21
    1098:	9a a1       	ldd	r25, Y+34	; 0x22
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	69 f7       	brne	.-38     	; 0x1078 <APP_comparePasswordsFirstTime+0x10c>
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <APP_comparePasswordsFirstTime+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a0:	6b a1       	ldd	r22, Y+35	; 0x23
    10a2:	7c a1       	ldd	r23, Y+36	; 0x24
    10a4:	8d a1       	ldd	r24, Y+37	; 0x25
    10a6:	9e a1       	ldd	r25, Y+38	; 0x26
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9a a3       	std	Y+34, r25	; 0x22
    10b2:	89 a3       	std	Y+33, r24	; 0x21
    10b4:	89 a1       	ldd	r24, Y+33	; 0x21
    10b6:	9a a1       	ldd	r25, Y+34	; 0x22
    10b8:	9e 8f       	std	Y+30, r25	; 0x1e
    10ba:	8d 8f       	std	Y+29, r24	; 0x1d
    10bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <APP_comparePasswordsFirstTime+0x154>
    10c4:	9e 8f       	std	Y+30, r25	; 0x1e
    10c6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(EEPROM_DELAY); /* Delay between every operation on EEPROM */
			size =i;
    10c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    10ca:	8b a7       	std	Y+43, r24	; 0x2b
			/* To test if the eeprom had the value correctly written in it */
			EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+i,&g_eeprom_pass[i]);
			_delay_ms(EEPROM_DELAY); /* Delay between every operation on EEPROM */
			LCD_intgerToString(g_eeprom_pass[i]);
#endif
			g_status = SUCCESS;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 a1 00 	sts	0x00A1, r24
	/* Holds the size of our password */
	uint8 size=0;

	//	LCD_clearScreen();
	/* Compare with the null character that we put at the end of password */
	for(i=0;(a_first_pass_Ptr[i]!='\0') || (a_second_pass_Ptr[i]!='\0') ;i++)
    10d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	8c a7       	std	Y+44, r24	; 0x2c
    10d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8d a5       	ldd	r24, Y+45	; 0x2d
    10e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10e2:	fc 01       	movw	r30, r24
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <APP_comparePasswordsFirstTime+0x184>
    10ee:	50 cf       	rjmp	.-352    	; 0xf90 <APP_comparePasswordsFirstTime+0x24>
    10f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f8:	98 a9       	ldd	r25, Y+48	; 0x30
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <APP_comparePasswordsFirstTime+0x19c>
    1106:	44 cf       	rjmp	.-376    	; 0xf90 <APP_comparePasswordsFirstTime+0x24>
#endif
			g_status = SUCCESS;
		}

	}
	if (g_status == SUCCESS)
    1108:	80 91 a1 00 	lds	r24, 0x00A1
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	09 f0       	breq	.+2      	; 0x1112 <APP_comparePasswordsFirstTime+0x1a6>
    1110:	f5 c0       	rjmp	.+490    	; 0x12fc <APP_comparePasswordsFirstTime+0x390>
	{
		/* Save a place in memory that indicate that we have a password saved */
		EEPROM_writeByte(EEPROM_PASSWORD_ADDRESS_FLAG,NOT_FIRST_TIME);
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	6e e4       	ldi	r22, 0x4E	; 78
    1118:	0e 94 c8 0b 	call	0x1790	; 0x1790 <EEPROM_writeByte>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 ea       	ldi	r26, 0xA0	; 160
    1122:	b2 e4       	ldi	r27, 0x42	; 66
    1124:	89 8f       	std	Y+25, r24	; 0x19
    1126:	9a 8f       	std	Y+26, r25	; 0x1a
    1128:	ab 8f       	std	Y+27, r26	; 0x1b
    112a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	69 8d       	ldd	r22, Y+25	; 0x19
    112e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8d 8b       	std	Y+21, r24	; 0x15
    1146:	9e 8b       	std	Y+22, r25	; 0x16
    1148:	af 8b       	std	Y+23, r26	; 0x17
    114a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114c:	6d 89       	ldd	r22, Y+21	; 0x15
    114e:	7e 89       	ldd	r23, Y+22	; 0x16
    1150:	8f 89       	ldd	r24, Y+23	; 0x17
    1152:	98 8d       	ldd	r25, Y+24	; 0x18
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <APP_comparePasswordsFirstTime+0x202>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 8b       	std	Y+20, r25	; 0x14
    116a:	8b 8b       	std	Y+19, r24	; 0x13
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <APP_comparePasswordsFirstTime+0x280>
	else if (__tmp > 65535)
    116e:	6d 89       	ldd	r22, Y+21	; 0x15
    1170:	7e 89       	ldd	r23, Y+22	; 0x16
    1172:	8f 89       	ldd	r24, Y+23	; 0x17
    1174:	98 8d       	ldd	r25, Y+24	; 0x18
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <APP_comparePasswordsFirstTime+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	69 8d       	ldd	r22, Y+25	; 0x19
    1188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9c 8b       	std	Y+20, r25	; 0x14
    11ac:	8b 8b       	std	Y+19, r24	; 0x13
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <APP_comparePasswordsFirstTime+0x262>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9a 8b       	std	Y+18, r25	; 0x12
    11b6:	89 8b       	std	Y+17, r24	; 0x11
    11b8:	89 89       	ldd	r24, Y+17	; 0x11
    11ba:	9a 89       	ldd	r25, Y+18	; 0x12
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <APP_comparePasswordsFirstTime+0x250>
    11c0:	9a 8b       	std	Y+18, r25	; 0x12
    11c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8b 89       	ldd	r24, Y+19	; 0x13
    11d0:	9c 89       	ldd	r25, Y+20	; 0x14
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <APP_comparePasswordsFirstTime+0x244>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <APP_comparePasswordsFirstTime+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	98 8b       	std	Y+16, r25	; 0x10
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
    11f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f6:	98 89       	ldd	r25, Y+16	; 0x10
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <APP_comparePasswordsFirstTime+0x28c>
    11fc:	98 8b       	std	Y+16, r25	; 0x10
    11fe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(EEPROM_DELAY); /* Delay between every operation on EEPROM */

		/* Saving the size of password in EEPROM */
		EEPROM_writeByte(EEPROM_PASS_SIZE,size);
    1200:	80 ee       	ldi	r24, 0xE0	; 224
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	6b a5       	ldd	r22, Y+43	; 0x2b
    1206:	0e 94 c8 0b 	call	0x1790	; 0x1790 <EEPROM_writeByte>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 ea       	ldi	r26, 0xA0	; 160
    1210:	b2 e4       	ldi	r27, 0x42	; 66
    1212:	8b 87       	std	Y+11, r24	; 0x0b
    1214:	9c 87       	std	Y+12, r25	; 0x0c
    1216:	ad 87       	std	Y+13, r26	; 0x0d
    1218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6b 85       	ldd	r22, Y+11	; 0x0b
    121c:	7c 85       	ldd	r23, Y+12	; 0x0c
    121e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1220:	9e 85       	ldd	r25, Y+14	; 0x0e
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8f 83       	std	Y+7, r24	; 0x07
    1234:	98 87       	std	Y+8, r25	; 0x08
    1236:	a9 87       	std	Y+9, r26	; 0x09
    1238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <APP_comparePasswordsFirstTime+0x2f0>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	3f c0       	rjmp	.+126    	; 0x12da <APP_comparePasswordsFirstTime+0x36e>
	else if (__tmp > 65535)
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <APP_comparePasswordsFirstTime+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6b 85       	ldd	r22, Y+11	; 0x0b
    1276:	7c 85       	ldd	r23, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <APP_comparePasswordsFirstTime+0x350>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8b 83       	std	Y+3, r24	; 0x03
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <APP_comparePasswordsFirstTime+0x33e>
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <APP_comparePasswordsFirstTime+0x332>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <APP_comparePasswordsFirstTime+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <APP_comparePasswordsFirstTime+0x37a>
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
		//		LCD_clearScreen();
		//		LCD_displayString("SIZE OF PASS");
		//		LCD_moveCursor(1,0);
		//		LCD_intgerToString(i);
		/* Send to Micro 1 that Password are matched */
		UART_sendByte(PASSWORDS_MATCHED);
    12ee:	80 e4       	ldi	r24, 0x40	; 64
    12f0:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		UART_sendByte(SHOW_MENU);
    12f4:	83 e5       	ldi	r24, 0x53	; 83
    12f6:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <APP_comparePasswordsFirstTime+0x396>
	}
	else
	{
		/* Send that password are unmatched */
		UART_sendByte(PASSWORDS_UNMATCHED_FIRST_TIME);
    12fc:	8b e3       	ldi	r24, 0x3B	; 59
    12fe:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
	}
}
    1302:	e0 96       	adiw	r28, 0x30	; 48
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <APP_comparePasswords>:
 * These arguments are Read-Only (constant data).
 * [Returns] : uint8 state
 * This argument shall have the result of compare.
 */
void APP_comparePasswords(const uint8* a_first_pass_Ptr)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	a0 97       	sbiw	r28, 0x20	; 32
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
	/* Index */
	uint8 i=0;
    132c:	1d 8e       	std	Y+29, r1	; 0x1d

	/* Hold the size of password */
	uint8 size=0;
    132e:	1e 8e       	std	Y+30, r1	; 0x1e

	/* Get the password size */
	EEPROM_readByte(EEPROM_PASS_SIZE,&size);
    1330:	9e 01       	movw	r18, r28
    1332:	22 5e       	subi	r18, 0xE2	; 226
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	80 ee       	ldi	r24, 0xE0	; 224
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	b9 01       	movw	r22, r18
    133c:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 ea       	ldi	r26, 0xA0	; 160
    1346:	b2 e4       	ldi	r27, 0x42	; 66
    1348:	89 8f       	std	Y+25, r24	; 0x19
    134a:	9a 8f       	std	Y+26, r25	; 0x1a
    134c:	ab 8f       	std	Y+27, r26	; 0x1b
    134e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1350:	69 8d       	ldd	r22, Y+25	; 0x19
    1352:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1354:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1356:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	4a ef       	ldi	r20, 0xFA	; 250
    135e:	54 e4       	ldi	r21, 0x44	; 68
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	8d 8b       	std	Y+21, r24	; 0x15
    136a:	9e 8b       	std	Y+22, r25	; 0x16
    136c:	af 8b       	std	Y+23, r26	; 0x17
    136e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1370:	6d 89       	ldd	r22, Y+21	; 0x15
    1372:	7e 89       	ldd	r23, Y+22	; 0x16
    1374:	8f 89       	ldd	r24, Y+23	; 0x17
    1376:	98 8d       	ldd	r25, Y+24	; 0x18
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e8       	ldi	r20, 0x80	; 128
    137e:	5f e3       	ldi	r21, 0x3F	; 63
    1380:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1384:	88 23       	and	r24, r24
    1386:	2c f4       	brge	.+10     	; 0x1392 <APP_comparePasswords+0x7e>
		__ticks = 1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 8b       	std	Y+20, r25	; 0x14
    138e:	8b 8b       	std	Y+19, r24	; 0x13
    1390:	3f c0       	rjmp	.+126    	; 0x1410 <APP_comparePasswords+0xfc>
	else if (__tmp > 65535)
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	57 e4       	ldi	r21, 0x47	; 71
    13a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	4c f5       	brge	.+82     	; 0x13fc <APP_comparePasswords+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13aa:	69 8d       	ldd	r22, Y+25	; 0x19
    13ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9c 8b       	std	Y+20, r25	; 0x14
    13d0:	8b 8b       	std	Y+19, r24	; 0x13
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <APP_comparePasswords+0xde>
    13d4:	88 ec       	ldi	r24, 0xC8	; 200
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9a 8b       	std	Y+18, r25	; 0x12
    13da:	89 8b       	std	Y+17, r24	; 0x11
    13dc:	89 89       	ldd	r24, Y+17	; 0x11
    13de:	9a 89       	ldd	r25, Y+18	; 0x12
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <APP_comparePasswords+0xcc>
    13e4:	9a 8b       	std	Y+18, r25	; 0x12
    13e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ea:	9c 89       	ldd	r25, Y+20	; 0x14
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	9c 8b       	std	Y+20, r25	; 0x14
    13f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f2:	8b 89       	ldd	r24, Y+19	; 0x13
    13f4:	9c 89       	ldd	r25, Y+20	; 0x14
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	69 f7       	brne	.-38     	; 0x13d4 <APP_comparePasswords+0xc0>
    13fa:	14 c0       	rjmp	.+40     	; 0x1424 <APP_comparePasswords+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fc:	6d 89       	ldd	r22, Y+21	; 0x15
    13fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1400:	8f 89       	ldd	r24, Y+23	; 0x17
    1402:	98 8d       	ldd	r25, Y+24	; 0x18
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9c 8b       	std	Y+20, r25	; 0x14
    140e:	8b 8b       	std	Y+19, r24	; 0x13
    1410:	8b 89       	ldd	r24, Y+19	; 0x13
    1412:	9c 89       	ldd	r25, Y+20	; 0x14
    1414:	98 8b       	std	Y+16, r25	; 0x10
    1416:	8f 87       	std	Y+15, r24	; 0x0f
    1418:	8f 85       	ldd	r24, Y+15	; 0x0f
    141a:	98 89       	ldd	r25, Y+16	; 0x10
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <APP_comparePasswords+0x108>
    1420:	98 8b       	std	Y+16, r25	; 0x10
    1422:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(EEPROM_DELAY);

	do {
		EEPROM_readByte(EEPROM_PASSWORD_ADDRESS+i,&g_eeprom_pass[i]);
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	8f 5e       	subi	r24, 0xEF	; 239
    142c:	9c 4f       	sbci	r25, 0xFC	; 252
    142e:	ac 01       	movw	r20, r24
    1430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 01       	movw	r18, r24
    1438:	2b 56       	subi	r18, 0x6B	; 107
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	ca 01       	movw	r24, r20
    143e:	b9 01       	movw	r22, r18
    1440:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 ea       	ldi	r26, 0xA0	; 160
    144a:	b2 e4       	ldi	r27, 0x42	; 66
    144c:	8b 87       	std	Y+11, r24	; 0x0b
    144e:	9c 87       	std	Y+12, r25	; 0x0c
    1450:	ad 87       	std	Y+13, r26	; 0x0d
    1452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1454:	6b 85       	ldd	r22, Y+11	; 0x0b
    1456:	7c 85       	ldd	r23, Y+12	; 0x0c
    1458:	8d 85       	ldd	r24, Y+13	; 0x0d
    145a:	9e 85       	ldd	r25, Y+14	; 0x0e
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8f 83       	std	Y+7, r24	; 0x07
    146e:	98 87       	std	Y+8, r25	; 0x08
    1470:	a9 87       	std	Y+9, r26	; 0x09
    1472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <APP_comparePasswords+0x182>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <APP_comparePasswords+0x200>
	else if (__tmp > 65535)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	4c f5       	brge	.+82     	; 0x1500 <APP_comparePasswords+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <APP_comparePasswords+0x1e2>
    14d8:	88 ec       	ldi	r24, 0xC8	; 200
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <APP_comparePasswords+0x1d0>
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <APP_comparePasswords+0x1c4>
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <APP_comparePasswords+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <APP_comparePasswords+0x20c>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01

		//		LCD_moveCursor(1,i);
		//		LCD_intgerToString(eeprom_pass[i]);
		//		_delay_ms(200);

		i++;
    1528:	8d 8d       	ldd	r24, Y+29	; 0x1d
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	8d 8f       	std	Y+29, r24	; 0x1d
	}while(i<=size);
    152e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1532:	98 17       	cp	r25, r24
    1534:	08 f0       	brcs	.+2      	; 0x1538 <APP_comparePasswords+0x224>
    1536:	76 cf       	rjmp	.-276    	; 0x1424 <APP_comparePasswords+0x110>

	/* Compare with the null character that we put at the end of password */
	for (i=0;a_first_pass_Ptr[i]!='\0';i++)
    1538:	1d 8e       	std	Y+29, r1	; 0x1d
    153a:	1b c0       	rjmp	.+54     	; 0x1572 <APP_comparePasswords+0x25e>
	{
		if (a_first_pass_Ptr[i]!=g_eeprom_pass[i]) /*Password doesn't match -> Send to microcontroller1 */
    153c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1544:	98 a1       	ldd	r25, Y+32	; 0x20
    1546:	fc 01       	movw	r30, r24
    1548:	e2 0f       	add	r30, r18
    154a:	f3 1f       	adc	r31, r19
    154c:	20 81       	ld	r18, Z
    154e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	fc 01       	movw	r30, r24
    1556:	eb 56       	subi	r30, 0x6B	; 107
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	28 17       	cp	r18, r24
    155e:	19 f0       	breq	.+6      	; 0x1566 <APP_comparePasswords+0x252>
		{
			/* Hold the unmatch status */
			g_status = ERROR;
    1560:	10 92 a1 00 	sts	0x00A1, r1
    1564:	11 c0       	rjmp	.+34     	; 0x1588 <APP_comparePasswords+0x274>

			break;
		}
		else
		{
			g_status = SUCCESS;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 93 a1 00 	sts	0x00A1, r24

		i++;
	}while(i<=size);

	/* Compare with the null character that we put at the end of password */
	for (i=0;a_first_pass_Ptr[i]!='\0';i++)
    156c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	8d 8f       	std	Y+29, r24	; 0x1d
    1572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8f 8d       	ldd	r24, Y+31	; 0x1f
    157a:	98 a1       	ldd	r25, Y+32	; 0x20
    157c:	fc 01       	movw	r30, r24
    157e:	e2 0f       	add	r30, r18
    1580:	f3 1f       	adc	r31, r19
    1582:	80 81       	ld	r24, Z
    1584:	88 23       	and	r24, r24
    1586:	d1 f6       	brne	.-76     	; 0x153c <APP_comparePasswords+0x228>
		else
		{
			g_status = SUCCESS;
		}
	}
	if (g_status != ERROR)
    1588:	80 91 a1 00 	lds	r24, 0x00A1
    158c:	88 23       	and	r24, r24
    158e:	89 f0       	breq	.+34     	; 0x15b2 <APP_comparePasswords+0x29e>
	{
		g_trial_times = 0;
    1590:	10 92 8a 00 	sts	0x008A, r1

		if (g_change ==0)
    1594:	80 91 8b 00 	lds	r24, 0x008B
    1598:	88 23       	and	r24, r24
    159a:	19 f4       	brne	.+6      	; 0x15a2 <APP_comparePasswords+0x28e>
		{
			APP_doorProcessing();
    159c:	0e 94 3d 0b 	call	0x167a	; 0x167a <APP_doorProcessing>
    15a0:	35 c0       	rjmp	.+106    	; 0x160c <APP_comparePasswords+0x2f8>
		}
		else if (g_change ==1)
    15a2:	80 91 8b 00 	lds	r24, 0x008B
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	89 f5       	brne	.+98     	; 0x160c <APP_comparePasswords+0x2f8>
		{
			UART_sendByte(CHANGE_PASSWORD);
    15aa:	8a e5       	ldi	r24, 0x5A	; 90
    15ac:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
    15b0:	2d c0       	rjmp	.+90     	; 0x160c <APP_comparePasswords+0x2f8>
		}
	}

	else if (g_status == ERROR)
    15b2:	80 91 a1 00 	lds	r24, 0x00A1
    15b6:	88 23       	and	r24, r24
    15b8:	49 f5       	brne	.+82     	; 0x160c <APP_comparePasswords+0x2f8>
	{
		g_trial_times++;
    15ba:	80 91 8a 00 	lds	r24, 0x008A
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	80 93 8a 00 	sts	0x008A, r24
		UART_sendByte(PASSWORDS_UNMATCHED);
    15c4:	84 e2       	ldi	r24, 0x24	; 36
    15c6:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		if (g_trial_times == MAX_TRIALS_ERROR)
    15ca:	80 91 8a 00 	lds	r24, 0x008A
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	71 f4       	brne	.+28     	; 0x15ee <APP_comparePasswords+0x2da>
		{

			UART_sendByte(PASSWORD_WRONG);
    15d2:	86 e2       	ldi	r24, 0x26	; 38
    15d4:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>

			BUZZER_ON();
    15d8:	0e 94 6d 0b 	call	0x16da	; 0x16da <BUZZER_ON>

			/* Delay for 60 seconds */
			APP_startTimer_6Sec();
    15dc:	0e 94 f6 19 	call	0x33ec	; 0x33ec <APP_startTimer_6Sec>
			APP_Timer1DelayForBuzzerCheck();
    15e0:	0e 94 43 1a 	call	0x3486	; 0x3486 <APP_Timer1DelayForBuzzerCheck>


			BUZZER_OFF();
    15e4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <BUZZER_OFF>


			UART_sendByte(SHOW_MENU);
    15e8:	83 e5       	ldi	r24, 0x53	; 83
    15ea:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		}

		if (g_change == 0)
    15ee:	80 91 8b 00 	lds	r24, 0x008B
    15f2:	88 23       	and	r24, r24
    15f4:	21 f4       	brne	.+8      	; 0x15fe <APP_comparePasswords+0x2ea>
		{
			UART_sendByte(ASK_FOR_DOOR_PASSWORD);
    15f6:	84 e4       	ldi	r24, 0x44	; 68
    15f8:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <APP_comparePasswords+0x2f8>
		}
		else if (g_change==1)
    15fe:	80 91 8b 00 	lds	r24, 0x008B
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	19 f4       	brne	.+6      	; 0x160c <APP_comparePasswords+0x2f8>
		{
			UART_sendByte(ASK_FOR_CHANGING_PASSWORD);
    1606:	83 e4       	ldi	r24, 0x43	; 67
    1608:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		}

	}


}
    160c:	a0 96       	adiw	r28, 0x20	; 32
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <APP_mainMenuChecker>:
void APP_mainMenuChecker (void)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <APP_mainMenuChecker+0x6>
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62

	/* Holds the value received , every UART_receive byte get another byte so you can't call it to compare */
	uint8 received_byte=0;
    162a:	19 82       	std	Y+1, r1	; 0x01

	/* Hold the value of received byte */
	received_byte = UART_recieveByte();
    162c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
    1630:	89 83       	std	Y+1, r24	; 0x01

	/* Based on user choice */
	switch (received_byte)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3b 83       	std	Y+3, r19	; 0x03
    163a:	2a 83       	std	Y+2, r18	; 0x02
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	9b 81       	ldd	r25, Y+3	; 0x03
    1640:	8b 32       	cpi	r24, 0x2B	; 43
    1642:	91 05       	cpc	r25, r1
    1644:	31 f0       	breq	.+12     	; 0x1652 <APP_mainMenuChecker+0x34>
    1646:	2a 81       	ldd	r18, Y+2	; 0x02
    1648:	3b 81       	ldd	r19, Y+3	; 0x03
    164a:	2d 32       	cpi	r18, 0x2D	; 45
    164c:	31 05       	cpc	r19, r1
    164e:	29 f0       	breq	.+10     	; 0x165a <APP_mainMenuChecker+0x3c>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <APP_mainMenuChecker+0x44>
	case '+' :

		//		LCD_clearScreen();
		//		LCD_displayCharacter(received_byte);

		UART_sendByte(ASK_FOR_DOOR_PASSWORD);
    1652:	84 e4       	ldi	r24, 0x44	; 68
    1654:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
    1658:	0a c0       	rjmp	.+20     	; 0x166e <APP_mainMenuChecker+0x50>

		//		LCD_clearScreen();
		//
		//		LCD_displayCharacter(received_byte);

		UART_sendByte(ASK_FOR_CHANGING_PASSWORD);
    165a:	83 e4       	ldi	r24, 0x43	; 67
    165c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
    1660:	06 c0       	rjmp	.+12     	; 0x166e <APP_mainMenuChecker+0x50>

		//		LCD_clearScreen();
		//
		//		LCD_intgerToString(received_byte);

		UART_sendByte(INVALID_INPUT);
    1662:	85 e2       	ldi	r24, 0x25	; 37
    1664:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		UART_sendByte(SHOW_MENU);
    1668:	83 e5       	ldi	r24, 0x53	; 83
    166a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>

		break;
	}


}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <APP_doorProcessing>:
void APP_doorProcessing (void)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	DCMotor_Rotate(DC_MOTOR_CLOCKWISE);
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <DCMotor_Rotate>
	APP_startTimer_3Sec();
    1688:	0e 94 b9 19 	call	0x3372	; 0x3372 <APP_startTimer_3Sec>

	UART_sendByte(DOOR_OPENING);
    168c:	8a e2       	ldi	r24, 0x2A	; 42
    168e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
	//	LCD_clearScreen();
	//	LCD_displayString("CW");

	while (g_tick !=5);
    1692:	80 91 b6 00 	lds	r24, 0x00B6
    1696:	85 30       	cpi	r24, 0x05	; 5
    1698:	e1 f7       	brne	.-8      	; 0x1692 <APP_doorProcessing+0x18>
	g_tick = 0;
    169a:	10 92 b6 00 	sts	0x00B6, r1

	DCMotor_Rotate(DC_MOTOR_STOP);
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <DCMotor_Rotate>
	//	LCD_clearScreen();
	//	LCD_displayString("STOP");

	/* Delay for 3 second */
	while (g_tick !=1);
    16a4:	80 91 b6 00 	lds	r24, 0x00B6
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <APP_doorProcessing+0x2a>
	g_tick = 0;
    16ac:	10 92 b6 00 	sts	0x00B6, r1


	DCMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE);
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <DCMotor_Rotate>
	//	LCD_displayString("ACW");
	//	LCD_clearScreen();
	//	LCD_displayString("Door is Closing");

	/* Delay for 15 second */
	while (g_tick !=5);
    16b6:	80 91 b6 00 	lds	r24, 0x00B6
    16ba:	85 30       	cpi	r24, 0x05	; 5
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <APP_doorProcessing+0x3c>

	g_tick=0;
    16be:	10 92 b6 00 	sts	0x00B6, r1
	DCMotor_Rotate(DC_MOTOR_STOP);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <DCMotor_Rotate>
	TIMER_DeInit(TIMER1_ID);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 15 19 	call	0x322a	; 0x322a <TIMER_DeInit>


	UART_sendByte(SHOW_MENU);
    16ce:	83 e5       	ldi	r24, 0x53	; 83
    16d0:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>

}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <BUZZER_ON>:

#include "common_macros.h"
#include "buzzer.h"

void BUZZER_ON(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	67 e0       	ldi	r22, 0x07	; 7
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	67 e0       	ldi	r22, 0x07	; 7
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <BUZZER_init>:

void BUZZER_init(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	67 e0       	ldi	r22, 0x07	; 7
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <EEPROM_init>:

#include "twi.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	2b 97       	sbiw	r28, 0x0b	; 11
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the TWI/I2C Driver for interfacing with EEPROM */
	/* F_CPU Must be > 8*TWI Frequency because registers can't hold any negative numbers */
	/* I.E F_CPU = 8Mhz, we can't use any frequency above 8Mhz/8= 1MHz, max is smaller than 1Mhz */
	TWI_ConfigType configuration = {I2C_PRESCALER_1,1,I2C_DATA_TRANSFER_400_KBS};
    1736:	ce 01       	movw	r24, r28
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	98 87       	std	Y+8, r25	; 0x08
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	ef e6       	ldi	r30, 0x6F	; 111
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	fa 87       	std	Y+10, r31	; 0x0a
    1744:	e9 87       	std	Y+9, r30	; 0x09
    1746:	f6 e0       	ldi	r31, 0x06	; 6
    1748:	fb 87       	std	Y+11, r31	; 0x0b
    174a:	e9 85       	ldd	r30, Y+9	; 0x09
    174c:	fa 85       	ldd	r31, Y+10	; 0x0a
    174e:	00 80       	ld	r0, Z
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	9a 87       	std	Y+10, r25	; 0x0a
    1758:	89 87       	std	Y+9, r24	; 0x09
    175a:	ef 81       	ldd	r30, Y+7	; 0x07
    175c:	f8 85       	ldd	r31, Y+8	; 0x08
    175e:	00 82       	st	Z, r0
    1760:	8f 81       	ldd	r24, Y+7	; 0x07
    1762:	98 85       	ldd	r25, Y+8	; 0x08
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	98 87       	std	Y+8, r25	; 0x08
    1768:	8f 83       	std	Y+7, r24	; 0x07
    176a:	9b 85       	ldd	r25, Y+11	; 0x0b
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	9b 87       	std	Y+11, r25	; 0x0b
    1770:	eb 85       	ldd	r30, Y+11	; 0x0b
    1772:	ee 23       	and	r30, r30
    1774:	51 f7       	brne	.-44     	; 0x174a <EEPROM_init+0x28>
	TWI_init(&configuration);
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_init>
}
    177e:	2b 96       	adiw	r28, 0x0b	; 11
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 address, uint8 data)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <EEPROM_writeByte+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <EEPROM_writeByte+0x8>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	6b 83       	std	Y+3, r22	; 0x03
	/* Phase 1 : Send the start bit */
	TWI_start();
    17a2:	0e 94 c2 1a 	call	0x3584	; 0x3584 <TWI_start>
	 * Write the location address first
	 * & 0xA0 to write the 24C16 constant (0b1010)
	 * address & 0x0700 to get the MSB 3 bits of eeprom 11 bit address
	 * >>7 to move them to bit 3,2,1 (bit 0 is for read)
	 */
	TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7)));
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	80 70       	andi	r24, 0x00	; 0
    17ac:	97 70       	andi	r25, 0x07	; 7
    17ae:	88 0f       	add	r24, r24
    17b0:	89 2f       	mov	r24, r25
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 0b       	sbc	r25, r25
    17b6:	91 95       	neg	r25
    17b8:	80 6a       	ori	r24, 0xA0	; 160
    17ba:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	/* Check if the address have been sent correctly and if the slave ack the write request */
	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_SLAVE_WRITE_ACK)
    17be:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    17c2:	88 31       	cpi	r24, 0x18	; 24
    17c4:	11 f0       	breq	.+4      	; 0x17ca <EEPROM_writeByte+0x3a>
	{
		return ERROR;
    17c6:	1c 82       	std	Y+4, r1	; 0x04
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <EEPROM_writeByte+0x66>

	/* Phase 3 : Send the location address to the receiver
	 * No need to ask for the write request as it's has been requested in phase 2 */

	/* Send the required memory location address of eeprom (0-2047) */
	TWI_writeByte((uint8)address); /* A7 to A0 */
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	/* Check if byte have been written correctly */
	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_DATA_ACK)
    17d0:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    17d4:	88 32       	cpi	r24, 0x28	; 40
    17d6:	11 f0       	breq	.+4      	; 0x17dc <EEPROM_writeByte+0x4c>
	{
		return ERROR;
    17d8:	1c 82       	std	Y+4, r1	; 0x04
    17da:	0d c0       	rjmp	.+26     	; 0x17f6 <EEPROM_writeByte+0x66>
	}

	/* Phase 4 : send the data */
	TWI_writeByte(data);
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	/* Check if byte have been written correctly */
	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_DATA_ACK)
    17e2:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    17e6:	88 32       	cpi	r24, 0x28	; 40
    17e8:	11 f0       	breq	.+4      	; 0x17ee <EEPROM_writeByte+0x5e>
	{
		return ERROR;
    17ea:	1c 82       	std	Y+4, r1	; 0x04
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <EEPROM_writeByte+0x66>
	}

	/* Phase 5 : Stop the TWI*/
	TWI_stop();
    17ee:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <TWI_stop>

	return SUCCESS;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04

}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <EEPROM_readByte>:

/* read from memory using pointer to facilitate the movement of pointer */
uint8 EEPROM_readByte(uint16 address, uint8 *data)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <EEPROM_readByte+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <EEPROM_readByte+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	7c 83       	std	Y+4, r23	; 0x04
    181a:	6b 83       	std	Y+3, r22	; 0x03

	/* Phase 1 : Start the TWI */
	TWI_start();
    181c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <TWI_start>

	/* Phase 2 : Send the device address, write request and receive ack from the receiver */
	TWI_writeByte((uint8)(0xA0) | ((address&0x0700)>>7));
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	80 70       	andi	r24, 0x00	; 0
    1826:	97 70       	andi	r25, 0x07	; 7
    1828:	88 0f       	add	r24, r24
    182a:	89 2f       	mov	r24, r25
    182c:	88 1f       	adc	r24, r24
    182e:	99 0b       	sbc	r25, r25
    1830:	91 95       	neg	r25
    1832:	80 6a       	ori	r24, 0xA0	; 160
    1834:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	/* Check if the address have been sent correctly and if the slave ack the write request */
	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_SLAVE_WRITE_ACK)
    1838:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    183c:	88 31       	cpi	r24, 0x18	; 24
    183e:	11 f0       	breq	.+4      	; 0x1844 <EEPROM_readByte+0x3e>
	{
		return ERROR;
    1840:	1d 82       	std	Y+5, r1	; 0x05
    1842:	29 c0       	rjmp	.+82     	; 0x1896 <EEPROM_readByte+0x90>
	}

	/* Phase 3 : send the location address (word address), the rest of bits (A10,A9,A8) will
	 * be sent among the slave address in phase 2
	 */
	TWI_writeByte((uint8)address);
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	/* Check if byte have been written correctly */
	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_DATA_ACK)
    184a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    184e:	88 32       	cpi	r24, 0x28	; 40
    1850:	11 f0       	breq	.+4      	; 0x1856 <EEPROM_readByte+0x50>
	{
		return ERROR;
    1852:	1d 82       	std	Y+5, r1	; 0x05
    1854:	20 c0       	rjmp	.+64     	; 0x1896 <EEPROM_readByte+0x90>
	}

	/* Phase 4 : Send a repeated start to begin reading from the eeprom */
	TWI_start();
    1856:	0e 94 c2 1a 	call	0x3584	; 0x3584 <TWI_start>

	/* Check if repeated start is send */
	if (TWI_getStatus() != TWI_REP_START)
    185a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    185e:	80 31       	cpi	r24, 0x10	; 16
    1860:	11 f0       	breq	.+4      	; 0x1866 <EEPROM_readByte+0x60>
	{
		return ERROR;
    1862:	1d 82       	std	Y+5, r1	; 0x05
    1864:	18 c0       	rjmp	.+48     	; 0x1896 <EEPROM_readByte+0x90>
	}

	/* Phase 5 : Send the device address again but with Read request and return with ack*/
	/* |1 to enable the read */
	TWI_writeByte((uint8)(0xA0)|(((address&0x0700)<<7)|1));
    1866:	81 ea       	ldi	r24, 0xA1	; 161
    1868:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TWI_writeByte>

	if (TWI_getStatus() != TWI_MASTER_TRANSMIT_SLAVE_READ_ACK)
    186c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    1870:	80 34       	cpi	r24, 0x40	; 64
    1872:	11 f0       	breq	.+4      	; 0x1878 <EEPROM_readByte+0x72>
	{
		return ERROR;
    1874:	1d 82       	std	Y+5, r1	; 0x05
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <EEPROM_readByte+0x90>
	}

	/* Phase 6 : Read the byte from memory without send Ack to end communication */
	*data = TWI_readByteWithNACK();
    1878:	0e 94 07 1b 	call	0x360e	; 0x360e <TWI_readByteWithNACK>
    187c:	eb 81       	ldd	r30, Y+3	; 0x03
    187e:	fc 81       	ldd	r31, Y+4	; 0x04
    1880:	80 83       	st	Z, r24

	if (TWI_getStatus() != TWI_MASTER_READ_DATA_NACK)
    1882:	0e 94 1a 1b 	call	0x3634	; 0x3634 <TWI_getStatus>
    1886:	88 35       	cpi	r24, 0x58	; 88
    1888:	11 f0       	breq	.+4      	; 0x188e <EEPROM_readByte+0x88>
	{
		return ERROR;
    188a:	1d 82       	std	Y+5, r1	; 0x05
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <EEPROM_readByte+0x90>
	}

	/* Send the Stop Bit */
	TWI_stop();
    188e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <TWI_stop>

	return SUCCESS;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_setupPinDirection+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <GPIO_setupPinDirection+0x8>
    18b0:	0f 92       	push	r0
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	6a 83       	std	Y+2, r22	; 0x02
    18ba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <GPIO_setupPinDirection+0x1c>
    18c2:	d5 c0       	rjmp	.+426    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	84 30       	cpi	r24, 0x04	; 4
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <GPIO_setupPinDirection+0x24>
    18ca:	d1 c0       	rjmp	.+418    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3d 83       	std	Y+5, r19	; 0x05
    18d4:	2c 83       	std	Y+4, r18	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <GPIO_setupPinDirection+0x3a>
    18e0:	43 c0       	rjmp	.+134    	; 0x1968 <GPIO_setupPinDirection+0xc0>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <GPIO_setupPinDirection+0x4e>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	71 f0       	breq	.+28     	; 0x1910 <GPIO_setupPinDirection+0x68>
    18f4:	bc c0       	rjmp	.+376    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <GPIO_setupPinDirection+0x5a>
    1900:	5f c0       	rjmp	.+190    	; 0x19c0 <GPIO_setupPinDirection+0x118>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <GPIO_setupPinDirection+0x66>
    190c:	85 c0       	rjmp	.+266    	; 0x1a18 <GPIO_setupPinDirection+0x170>
    190e:	af c0       	rjmp	.+350    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	a1 f4       	brne	.+40     	; 0x193e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1916:	aa e3       	ldi	r26, 0x3A	; 58
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ea e3       	ldi	r30, 0x3A	; 58
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_setupPinDirection+0x8c>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_setupPinDirection+0x88>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	98 c0       	rjmp	.+304    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    193e:	aa e3       	ldi	r26, 0x3A	; 58
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ea e3       	ldi	r30, 0x3A	; 58
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_setupPinDirection+0xb4>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_setupPinDirection+0xb0>
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	83 c0       	rjmp	.+262    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	a1 f4       	brne	.+40     	; 0x1996 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    196e:	a7 e3       	ldi	r26, 0x37	; 55
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e7 e3       	ldi	r30, 0x37	; 55
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_setupPinDirection+0xe4>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_setupPinDirection+0xe0>
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	6c c0       	rjmp	.+216    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1996:	a7 e3       	ldi	r26, 0x37	; 55
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e7 e3       	ldi	r30, 0x37	; 55
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <GPIO_setupPinDirection+0x10c>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <GPIO_setupPinDirection+0x108>
    19b8:	80 95       	com	r24
    19ba:	84 23       	and	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	57 c0       	rjmp	.+174    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	a1 f4       	brne	.+40     	; 0x19ee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19c6:	a4 e3       	ldi	r26, 0x34	; 52
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e4 e3       	ldi	r30, 0x34	; 52
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_setupPinDirection+0x13c>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_setupPinDirection+0x138>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	40 c0       	rjmp	.+128    	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19ee:	a4 e3       	ldi	r26, 0x34	; 52
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e4 e3       	ldi	r30, 0x34	; 52
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_setupPinDirection+0x164>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_setupPinDirection+0x160>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	2b c0       	rjmp	.+86     	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	a1 f4       	brne	.+40     	; 0x1a46 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a1e:	a1 e3       	ldi	r26, 0x31	; 49
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e1 e3       	ldi	r30, 0x31	; 49
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_setupPinDirection+0x194>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_setupPinDirection+0x190>
    1a40:	84 2b       	or	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a46:	a1 e3       	ldi	r26, 0x31	; 49
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e1 e3       	ldi	r30, 0x31	; 49
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <GPIO_setupPinDirection+0x1bc>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <GPIO_setupPinDirection+0x1b8>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_writePin+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <GPIO_writePin+0x8>
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
    1a90:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	85 30       	cpi	r24, 0x05	; 5
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <GPIO_writePin+0x1c>
    1a98:	d5 c0       	rjmp	.+426    	; 0x1c44 <GPIO_writePin+0x1c6>
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	89 30       	cpi	r24, 0x09	; 9
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <GPIO_writePin+0x24>
    1aa0:	d1 c0       	rjmp	.+418    	; 0x1c44 <GPIO_writePin+0x1c6>
		/* Do nothing */
	}
	else
	{
		/* Write pin value as wanted */
		switch (port_num)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <GPIO_writePin+0x3a>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <GPIO_writePin+0xc0>
    1ab8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aba:	3d 81       	ldd	r19, Y+5	; 0x05
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <GPIO_writePin+0x4e>
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <GPIO_writePin+0x68>
    1aca:	bc c0       	rjmp	.+376    	; 0x1c44 <GPIO_writePin+0x1c6>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <GPIO_writePin+0x5a>
    1ad6:	5f c0       	rjmp	.+190    	; 0x1b96 <GPIO_writePin+0x118>
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <GPIO_writePin+0x66>
    1ae2:	85 c0       	rjmp	.+266    	; 0x1bee <GPIO_writePin+0x170>
    1ae4:	af c0       	rjmp	.+350    	; 0x1c44 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	a1 f4       	brne	.+40     	; 0x1b14 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1aec:	ab e3       	ldi	r26, 0x3B	; 59
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	eb e3       	ldi	r30, 0x3B	; 59
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <GPIO_writePin+0x8c>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <GPIO_writePin+0x88>
    1b0e:	84 2b       	or	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	98 c0       	rjmp	.+304    	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b14:	ab e3       	ldi	r26, 0x3B	; 59
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	eb e3       	ldi	r30, 0x3B	; 59
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <GPIO_writePin+0xb4>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <GPIO_writePin+0xb0>
    1b36:	80 95       	com	r24
    1b38:	84 23       	and	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	83 c0       	rjmp	.+262    	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	a1 f4       	brne	.+40     	; 0x1b6c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b44:	a8 e3       	ldi	r26, 0x38	; 56
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e8 e3       	ldi	r30, 0x38	; 56
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GPIO_writePin+0xe4>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <GPIO_writePin+0xe0>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	6c c0       	rjmp	.+216    	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b6c:	a8 e3       	ldi	r26, 0x38	; 56
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e8 e3       	ldi	r30, 0x38	; 56
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <GPIO_writePin+0x10c>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <GPIO_writePin+0x108>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	57 c0       	rjmp	.+174    	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	a1 f4       	brne	.+40     	; 0x1bc4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b9c:	a5 e3       	ldi	r26, 0x35	; 53
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e3       	ldi	r30, 0x35	; 53
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <GPIO_writePin+0x13c>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <GPIO_writePin+0x138>
    1bbe:	84 2b       	or	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	40 c0       	rjmp	.+128    	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bc4:	a5 e3       	ldi	r26, 0x35	; 53
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e3       	ldi	r30, 0x35	; 53
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <GPIO_writePin+0x164>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <GPIO_writePin+0x160>
    1be6:	80 95       	com	r24
    1be8:	84 23       	and	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	2b c0       	rjmp	.+86     	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	a1 f4       	brne	.+40     	; 0x1c1c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bf4:	a2 e3       	ldi	r26, 0x32	; 50
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e2 e3       	ldi	r30, 0x32	; 50
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <GPIO_writePin+0x194>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <GPIO_writePin+0x190>
    1c16:	84 2b       	or	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c1c:	a2 e3       	ldi	r26, 0x32	; 50
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e2 e3       	ldi	r30, 0x32	; 50
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <GPIO_writePin+0x1bc>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <GPIO_writePin+0x1b8>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <GPIO_readPin+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <GPIO_readPin+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW; /* To hold the pin_value in order not to do switch cases with mulitple returns within it */
    1c66:	19 82       	std	Y+1, r1	; 0x01
	if (pin_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS )
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	88 30       	cpi	r24, 0x08	; 8
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <GPIO_readPin+0x1c>
    1c6e:	84 c0       	rjmp	.+264    	; 0x1d78 <GPIO_readPin+0x124>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <GPIO_readPin+0x24>
    1c76:	80 c0       	rjmp	.+256    	; 0x1d78 <GPIO_readPin+0x124>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3d 83       	std	Y+5, r19	; 0x05
    1c80:	2c 83       	std	Y+4, r18	; 0x04
    1c82:	4c 81       	ldd	r20, Y+4	; 0x04
    1c84:	5d 81       	ldd	r21, Y+5	; 0x05
    1c86:	41 30       	cpi	r20, 0x01	; 1
    1c88:	51 05       	cpc	r21, r1
    1c8a:	79 f1       	breq	.+94     	; 0x1cea <GPIO_readPin+0x96>
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	91 05       	cpc	r25, r1
    1c94:	34 f4       	brge	.+12     	; 0x1ca2 <GPIO_readPin+0x4e>
    1c96:	2c 81       	ldd	r18, Y+4	; 0x04
    1c98:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9a:	21 15       	cp	r18, r1
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	69 f0       	breq	.+26     	; 0x1cba <GPIO_readPin+0x66>
    1ca0:	6b c0       	rjmp	.+214    	; 0x1d78 <GPIO_readPin+0x124>
    1ca2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ca4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ca6:	42 30       	cpi	r20, 0x02	; 2
    1ca8:	51 05       	cpc	r21, r1
    1caa:	b9 f1       	breq	.+110    	; 0x1d1a <GPIO_readPin+0xc6>
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <GPIO_readPin+0x64>
    1cb6:	49 c0       	rjmp	.+146    	; 0x1d4a <GPIO_readPin+0xf6>
    1cb8:	5f c0       	rjmp	.+190    	; 0x1d78 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num)) /* Note that we read from the PIN not the PORT */
    1cba:	e9 e3       	ldi	r30, 0x39	; 57
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a9 01       	movw	r20, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_readPin+0x7e>
    1cce:	55 95       	asr	r21
    1cd0:	47 95       	ror	r20
    1cd2:	8a 95       	dec	r24
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_readPin+0x7a>
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	88 23       	and	r24, r24
    1cde:	19 f0       	breq	.+6      	; 0x1ce6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	49 c0       	rjmp	.+146    	; 0x1d78 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
    1ce8:	47 c0       	rjmp	.+142    	; 0x1d78 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    1cea:	e6 e3       	ldi	r30, 0x36	; 54
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <GPIO_readPin+0xae>
    1cfe:	55 95       	asr	r21
    1d00:	47 95       	ror	r20
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <GPIO_readPin+0xaa>
    1d06:	ca 01       	movw	r24, r20
    1d08:	81 70       	andi	r24, 0x01	; 1
    1d0a:	90 70       	andi	r25, 0x00	; 0
    1d0c:	88 23       	and	r24, r24
    1d0e:	19 f0       	breq	.+6      	; 0x1d16 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	31 c0       	rjmp	.+98     	; 0x1d78 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	2f c0       	rjmp	.+94     	; 0x1d78 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    1d1a:	e3 e3       	ldi	r30, 0x33	; 51
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <GPIO_readPin+0xde>
    1d2e:	55 95       	asr	r21
    1d30:	47 95       	ror	r20
    1d32:	8a 95       	dec	r24
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <GPIO_readPin+0xda>
    1d36:	ca 01       	movw	r24, r20
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	90 70       	andi	r25, 0x00	; 0
    1d3c:	88 23       	and	r24, r24
    1d3e:	19 f0       	breq	.+6      	; 0x1d46 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	19 c0       	rjmp	.+50     	; 0x1d78 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d46:	19 82       	std	Y+1, r1	; 0x01
    1d48:	17 c0       	rjmp	.+46     	; 0x1d78 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    1d4a:	e0 e3       	ldi	r30, 0x30	; 48
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <GPIO_readPin+0x10e>
    1d5e:	55 95       	asr	r21
    1d60:	47 95       	ror	r20
    1d62:	8a 95       	dec	r24
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <GPIO_readPin+0x10a>
    1d66:	ca 01       	movw	r24, r20
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	90 70       	andi	r25, 0x00	; 0
    1d6c:	88 23       	and	r24, r24
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d76:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <GPIO_setupPortDirection+0x6>
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <GPIO_setupPortDirection+0x8>
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	84 30       	cpi	r24, 0x04	; 4
    1d9e:	90 f5       	brcc	.+100    	; 0x1e04 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3c 83       	std	Y+4, r19	; 0x04
    1da8:	2b 83       	std	Y+3, r18	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	d1 f0       	breq	.+52     	; 0x1de8 <GPIO_setupPortDirection+0x5e>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	31 05       	cpc	r19, r1
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <GPIO_setupPortDirection+0x3e>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <GPIO_setupPortDirection+0x54>
    1dc6:	1e c0       	rjmp	.+60     	; 0x1e04 <GPIO_setupPortDirection+0x7a>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <GPIO_setupPortDirection+0x68>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <GPIO_setupPortDirection+0x72>
    1ddc:	13 c0       	rjmp	.+38     	; 0x1e04 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dde:	ea e3       	ldi	r30, 0x3A	; 58
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1de8:	e7 e3       	ldi	r30, 0x37	; 55
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1df2:	e4 e3       	ldi	r30, 0x34	; 52
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	80 83       	st	Z, r24
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1dfc:	e1 e3       	ldi	r30, 0x31	; 49
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <GPIO_writePort+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <GPIO_writePort+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	84 30       	cpi	r24, 0x04	; 4
    1e26:	90 f5       	brcc	.+100    	; 0x1e8c <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	3c 83       	std	Y+4, r19	; 0x04
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	91 05       	cpc	r25, r1
    1e3a:	d1 f0       	breq	.+52     	; 0x1e70 <GPIO_writePort+0x5e>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <GPIO_writePort+0x3e>
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <GPIO_writePort+0x54>
    1e4e:	1e c0       	rjmp	.+60     	; 0x1e8c <GPIO_writePort+0x7a>
    1e50:	2b 81       	ldd	r18, Y+3	; 0x03
    1e52:	3c 81       	ldd	r19, Y+4	; 0x04
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <GPIO_writePort+0x68>
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	91 05       	cpc	r25, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <GPIO_writePort+0x72>
    1e64:	13 c0       	rjmp	.+38     	; 0x1e8c <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    1e66:	eb e3       	ldi	r30, 0x3B	; 59
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
    1e6e:	0e c0       	rjmp	.+28     	; 0x1e8c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    1e70:	e8 e3       	ldi	r30, 0x38	; 56
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    1e84:	e2 e3       	ldi	r30, 0x32	; 50
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <GPIO_readPort+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <GPIO_readPort+0x8>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	84 30       	cpi	r24, 0x04	; 4
    1eae:	90 f5       	brcc	.+100    	; 0x1f14 <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3c 83       	std	Y+4, r19	; 0x04
    1eb8:	2b 83       	std	Y+3, r18	; 0x03
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	d1 f0       	breq	.+52     	; 0x1ef8 <GPIO_readPort+0x5e>
    1ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	31 05       	cpc	r19, r1
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <GPIO_readPort+0x3e>
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <GPIO_readPort+0x54>
    1ed6:	1e c0       	rjmp	.+60     	; 0x1f14 <GPIO_readPort+0x7a>
    1ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eda:	3c 81       	ldd	r19, Y+4	; 0x04
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	81 f0       	breq	.+32     	; 0x1f02 <GPIO_readPort+0x68>
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	83 30       	cpi	r24, 0x03	; 3
    1ee8:	91 05       	cpc	r25, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <GPIO_readPort+0x72>
    1eec:	13 c0       	rjmp	.+38     	; 0x1f14 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			port_value = PINA;
    1eee:	e9 e3       	ldi	r30, 0x39	; 57
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			port_value = PINB;
    1ef8:	e6 e3       	ldi	r30, 0x36	; 54
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	09 c0       	rjmp	.+18     	; 0x1f14 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			port_value = PINC;
    1f02:	e3 e3       	ldi	r30, 0x33	; 51
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			port_value = PIND;
    1f0c:	e0 e3       	ldi	r30, 0x30	; 48
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <LCD_init>:
/*
 * Description:
 * Initialize the LCD
 */
void LCD_init(void)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>

	/* Specify data register as output register */
	GPIO_setupPortDirection(PORTC_ID,PORT_OUTPUT);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	6f ef       	ldi	r22, 0xFF	; 255
    1f4e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <GPIO_setupPortDirection>

	/* use 2-line LCD + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f52:	88 e3       	ldi	r24, 0x38	; 56
    1f54:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    1f58:	8c e0       	ldi	r24, 0x0C	; 12
    1f5a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>

	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>

}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <LCD_sendCommand>:
/*
 * Description:
 * Send the required command to LCD
 */
void LCD_sendCommand(uint8 command)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	e9 97       	sbiw	r28, 0x39	; 57
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 0; Transferring instruction data  */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>

	/* Writing on LCD */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e8       	ldi	r26, 0x80	; 128
    1f9a:	bf e3       	ldi	r27, 0x3F	; 63
    1f9c:	8d ab       	std	Y+53, r24	; 0x35
    1f9e:	9e ab       	std	Y+54, r25	; 0x36
    1fa0:	af ab       	std	Y+55, r26	; 0x37
    1fa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a e7       	ldi	r20, 0x7A	; 122
    1fb2:	53 e4       	ldi	r21, 0x43	; 67
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 ab       	std	Y+49, r24	; 0x31
    1fbe:	9a ab       	std	Y+50, r25	; 0x32
    1fc0:	ab ab       	std	Y+51, r26	; 0x33
    1fc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fca:	9c a9       	ldd	r25, Y+52	; 0x34
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	98 ab       	std	Y+48, r25	; 0x30
    1fe2:	8f a7       	std	Y+47, r24	; 0x2f
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1fe6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fea:	8b a9       	ldd	r24, Y+51	; 0x33
    1fec:	9c a9       	ldd	r25, Y+52	; 0x34
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <LCD_sendCommand+0xdc>
    2028:	89 e1       	ldi	r24, 0x19	; 25
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9e a7       	std	Y+46, r25	; 0x2e
    202e:	8d a7       	std	Y+45, r24	; 0x2d
    2030:	8d a5       	ldd	r24, Y+45	; 0x2d
    2032:	9e a5       	ldd	r25, Y+46	; 0x2e
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_sendCommand+0xca>
    2038:	9e a7       	std	Y+46, r25	; 0x2e
    203a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8f a5       	ldd	r24, Y+47	; 0x2f
    2048:	98 a9       	ldd	r25, Y+48	; 0x30
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <LCD_sendCommand+0xbe>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
    2064:	8f a5       	ldd	r24, Y+47	; 0x2f
    2066:	98 a9       	ldd	r25, Y+48	; 0x30
    2068:	9c a7       	std	Y+44, r25	; 0x2c
    206a:	8b a7       	std	Y+43, r24	; 0x2b
    206c:	8b a5       	ldd	r24, Y+43	; 0x2b
    206e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_sendCommand+0x106>
    2074:	9c a7       	std	Y+44, r25	; 0x2c
    2076:	8b a7       	std	Y+43, r24	; 0x2b

	/* Address setup time minimum as 50 ns */
	_delay_ms(1);

	/* Enable the LCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	62 e0       	ldi	r22, 0x02	; 2
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8f a3       	std	Y+39, r24	; 0x27
    208c:	98 a7       	std	Y+40, r25	; 0x28
    208e:	a9 a7       	std	Y+41, r26	; 0x29
    2090:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6f a1       	ldd	r22, Y+39	; 0x27
    2094:	78 a5       	ldd	r23, Y+40	; 0x28
    2096:	89 a5       	ldd	r24, Y+41	; 0x29
    2098:	9a a5       	ldd	r25, Y+42	; 0x2a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8b a3       	std	Y+35, r24	; 0x23
    20ac:	9c a3       	std	Y+36, r25	; 0x24
    20ae:	ad a3       	std	Y+37, r26	; 0x25
    20b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20b2:	6b a1       	ldd	r22, Y+35	; 0x23
    20b4:	7c a1       	ldd	r23, Y+36	; 0x24
    20b6:	8d a1       	ldd	r24, Y+37	; 0x25
    20b8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_sendCommand+0x16a>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9a a3       	std	Y+34, r25	; 0x22
    20d0:	89 a3       	std	Y+33, r24	; 0x21
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6f a1       	ldd	r22, Y+39	; 0x27
    20ee:	78 a5       	ldd	r23, Y+40	; 0x28
    20f0:	89 a5       	ldd	r24, Y+41	; 0x29
    20f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_sendCommand+0x1ca>
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	98 a3       	std	Y+32, r25	; 0x20
    211c:	8f 8f       	std	Y+31, r24	; 0x1f
    211e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2120:	98 a1       	ldd	r25, Y+32	; 0x20
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_sendCommand+0x1b8>
    2126:	98 a3       	std	Y+32, r25	; 0x20
    2128:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9a a3       	std	Y+34, r25	; 0x22
    2132:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	89 a1       	ldd	r24, Y+33	; 0x21
    2136:	9a a1       	ldd	r25, Y+34	; 0x22
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_sendCommand+0x1ac>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6b a1       	ldd	r22, Y+35	; 0x23
    2140:	7c a1       	ldd	r23, Y+36	; 0x24
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9a a3       	std	Y+34, r25	; 0x22
    2150:	89 a3       	std	Y+33, r24	; 0x21
    2152:	89 a1       	ldd	r24, Y+33	; 0x21
    2154:	9a a1       	ldd	r25, Y+34	; 0x22
    2156:	9e 8f       	std	Y+30, r25	; 0x1e
    2158:	8d 8f       	std	Y+29, r24	; 0x1d
    215a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendCommand+0x1f4>
    2162:	9e 8f       	std	Y+30, r25	; 0x1e
    2164:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Enable high level width - Data set-up time = 290 - 100 = 190 ns minimum*/
	_delay_ms(1);

	/* Send command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	69 ad       	ldd	r22, Y+57	; 0x39
    216a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePort>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e8       	ldi	r26, 0x80	; 128
    2174:	bf e3       	ldi	r27, 0x3F	; 63
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	ab 8f       	std	Y+27, r26	; 0x1b
    217c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a e7       	ldi	r20, 0x7A	; 122
    218c:	53 e4       	ldi	r21, 0x43	; 67
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8d 8b       	std	Y+21, r24	; 0x15
    2198:	9e 8b       	std	Y+22, r25	; 0x16
    219a:	af 8b       	std	Y+23, r26	; 0x17
    219c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_sendCommand+0x256>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_sendCommand+0x2b6>
    2202:	89 e1       	ldi	r24, 0x19	; 25
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	9a 89       	ldd	r25, Y+18	; 0x12
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_sendCommand+0x2a4>
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_sendCommand+0x298>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	98 8b       	std	Y+16, r25	; 0x10
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x2e0>
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f

	/* Data set-up time = 100 ns minimum */
	_delay_ms(1);

	/* Disable the lCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	53 e4       	ldi	r21, 0x43	; 67
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_sendCommand+0x344>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_sendCommand+0x3a4>
    22f0:	89 e1       	ldi	r24, 0x19	; 25
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_sendCommand+0x392>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_sendCommand+0x386>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_sendCommand+0x3ce>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01

	/* Data hold time = 13 ns minimum */
	_delay_ms(1);

}
    2340:	e9 96       	adiw	r28, 0x39	; 57
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <LCD_displayCharacter>:
 * Same function as the send command, except the register select
 * @Send command -> Rs = 0 as we send an instruction
 * @Display char -> Rs = 1 as we send data to display
 */
void LCD_displayCharacter(uint8 data)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	e9 97       	sbiw	r28, 0x39	; 57
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 1; Transferring display data */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>

	/* Writing on LCD */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a0 e8       	ldi	r26, 0x80	; 128
    2382:	bf e3       	ldi	r27, 0x3F	; 63
    2384:	8d ab       	std	Y+53, r24	; 0x35
    2386:	9e ab       	std	Y+54, r25	; 0x36
    2388:	af ab       	std	Y+55, r26	; 0x37
    238a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238c:	6d a9       	ldd	r22, Y+53	; 0x35
    238e:	7e a9       	ldd	r23, Y+54	; 0x36
    2390:	8f a9       	ldd	r24, Y+55	; 0x37
    2392:	98 ad       	ldd	r25, Y+56	; 0x38
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a e7       	ldi	r20, 0x7A	; 122
    239a:	53 e4       	ldi	r21, 0x43	; 67
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	89 ab       	std	Y+49, r24	; 0x31
    23a6:	9a ab       	std	Y+50, r25	; 0x32
    23a8:	ab ab       	std	Y+51, r26	; 0x33
    23aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ac:	69 a9       	ldd	r22, Y+49	; 0x31
    23ae:	7a a9       	ldd	r23, Y+50	; 0x32
    23b0:	8b a9       	ldd	r24, Y+51	; 0x33
    23b2:	9c a9       	ldd	r25, Y+52	; 0x34
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	2c f4       	brge	.+10     	; 0x23ce <LCD_displayCharacter+0x7c>
		__ticks = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	98 ab       	std	Y+48, r25	; 0x30
    23ca:	8f a7       	std	Y+47, r24	; 0x2f
    23cc:	3f c0       	rjmp	.+126    	; 0x244c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    23ce:	69 a9       	ldd	r22, Y+49	; 0x31
    23d0:	7a a9       	ldd	r23, Y+50	; 0x32
    23d2:	8b a9       	ldd	r24, Y+51	; 0x33
    23d4:	9c a9       	ldd	r25, Y+52	; 0x34
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	4c f5       	brge	.+82     	; 0x2438 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e6:	6d a9       	ldd	r22, Y+53	; 0x35
    23e8:	7e a9       	ldd	r23, Y+54	; 0x36
    23ea:	8f a9       	ldd	r24, Y+55	; 0x37
    23ec:	98 ad       	ldd	r25, Y+56	; 0x38
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	98 ab       	std	Y+48, r25	; 0x30
    240c:	8f a7       	std	Y+47, r24	; 0x2f
    240e:	0f c0       	rjmp	.+30     	; 0x242e <LCD_displayCharacter+0xdc>
    2410:	89 e1       	ldi	r24, 0x19	; 25
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e a7       	std	Y+46, r25	; 0x2e
    2416:	8d a7       	std	Y+45, r24	; 0x2d
    2418:	8d a5       	ldd	r24, Y+45	; 0x2d
    241a:	9e a5       	ldd	r25, Y+46	; 0x2e
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_displayCharacter+0xca>
    2420:	9e a7       	std	Y+46, r25	; 0x2e
    2422:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	8f a5       	ldd	r24, Y+47	; 0x2f
    2426:	98 a9       	ldd	r25, Y+48	; 0x30
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	98 ab       	std	Y+48, r25	; 0x30
    242c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2430:	98 a9       	ldd	r25, Y+48	; 0x30
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f7       	brne	.-38     	; 0x2410 <LCD_displayCharacter+0xbe>
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	69 a9       	ldd	r22, Y+49	; 0x31
    243a:	7a a9       	ldd	r23, Y+50	; 0x32
    243c:	8b a9       	ldd	r24, Y+51	; 0x33
    243e:	9c a9       	ldd	r25, Y+52	; 0x34
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	98 ab       	std	Y+48, r25	; 0x30
    244a:	8f a7       	std	Y+47, r24	; 0x2f
    244c:	8f a5       	ldd	r24, Y+47	; 0x2f
    244e:	98 a9       	ldd	r25, Y+48	; 0x30
    2450:	9c a7       	std	Y+44, r25	; 0x2c
    2452:	8b a7       	std	Y+43, r24	; 0x2b
    2454:	8b a5       	ldd	r24, Y+43	; 0x2b
    2456:	9c a5       	ldd	r25, Y+44	; 0x2c
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_displayCharacter+0x106>
    245c:	9c a7       	std	Y+44, r25	; 0x2c
    245e:	8b a7       	std	Y+43, r24	; 0x2b

	/* Address setup time minimum as 50 ns */
	_delay_ms(1);

	/* Enable the LCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e8       	ldi	r26, 0x80	; 128
    2470:	bf e3       	ldi	r27, 0x3F	; 63
    2472:	8f a3       	std	Y+39, r24	; 0x27
    2474:	98 a7       	std	Y+40, r25	; 0x28
    2476:	a9 a7       	std	Y+41, r26	; 0x29
    2478:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247a:	6f a1       	ldd	r22, Y+39	; 0x27
    247c:	78 a5       	ldd	r23, Y+40	; 0x28
    247e:	89 a5       	ldd	r24, Y+41	; 0x29
    2480:	9a a5       	ldd	r25, Y+42	; 0x2a
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a e7       	ldi	r20, 0x7A	; 122
    2488:	53 e4       	ldi	r21, 0x43	; 67
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	8b a3       	std	Y+35, r24	; 0x23
    2494:	9c a3       	std	Y+36, r25	; 0x24
    2496:	ad a3       	std	Y+37, r26	; 0x25
    2498:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    249a:	6b a1       	ldd	r22, Y+35	; 0x23
    249c:	7c a1       	ldd	r23, Y+36	; 0x24
    249e:	8d a1       	ldd	r24, Y+37	; 0x25
    24a0:	9e a1       	ldd	r25, Y+38	; 0x26
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ae:	88 23       	and	r24, r24
    24b0:	2c f4       	brge	.+10     	; 0x24bc <LCD_displayCharacter+0x16a>
		__ticks = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
    24ba:	3f c0       	rjmp	.+126    	; 0x253a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    24bc:	6b a1       	ldd	r22, Y+35	; 0x23
    24be:	7c a1       	ldd	r23, Y+36	; 0x24
    24c0:	8d a1       	ldd	r24, Y+37	; 0x25
    24c2:	9e a1       	ldd	r25, Y+38	; 0x26
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	4c f5       	brge	.+82     	; 0x2526 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	6f a1       	ldd	r22, Y+39	; 0x27
    24d6:	78 a5       	ldd	r23, Y+40	; 0x28
    24d8:	89 a5       	ldd	r24, Y+41	; 0x29
    24da:	9a a5       	ldd	r25, Y+42	; 0x2a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e2       	ldi	r20, 0x20	; 32
    24e2:	51 e4       	ldi	r21, 0x41	; 65
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9a a3       	std	Y+34, r25	; 0x22
    24fa:	89 a3       	std	Y+33, r24	; 0x21
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <LCD_displayCharacter+0x1ca>
    24fe:	89 e1       	ldi	r24, 0x19	; 25
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	98 a3       	std	Y+32, r25	; 0x20
    2504:	8f 8f       	std	Y+31, r24	; 0x1f
    2506:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2508:	98 a1       	ldd	r25, Y+32	; 0x20
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_displayCharacter+0x1b8>
    250e:	98 a3       	std	Y+32, r25	; 0x20
    2510:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2512:	89 a1       	ldd	r24, Y+33	; 0x21
    2514:	9a a1       	ldd	r25, Y+34	; 0x22
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9a a3       	std	Y+34, r25	; 0x22
    251a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	89 a1       	ldd	r24, Y+33	; 0x21
    251e:	9a a1       	ldd	r25, Y+34	; 0x22
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	69 f7       	brne	.-38     	; 0x24fe <LCD_displayCharacter+0x1ac>
    2524:	14 c0       	rjmp	.+40     	; 0x254e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2526:	6b a1       	ldd	r22, Y+35	; 0x23
    2528:	7c a1       	ldd	r23, Y+36	; 0x24
    252a:	8d a1       	ldd	r24, Y+37	; 0x25
    252c:	9e a1       	ldd	r25, Y+38	; 0x26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	89 a1       	ldd	r24, Y+33	; 0x21
    253c:	9a a1       	ldd	r25, Y+34	; 0x22
    253e:	9e 8f       	std	Y+30, r25	; 0x1e
    2540:	8d 8f       	std	Y+29, r24	; 0x1d
    2542:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2544:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_displayCharacter+0x1f4>
    254a:	9e 8f       	std	Y+30, r25	; 0x1e
    254c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Enable high level width - Data set-up time = 290 - 100 = 190 ns minimum*/
	_delay_ms(1);

	/* Send command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	69 ad       	ldd	r22, Y+57	; 0x39
    2552:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePort>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e8       	ldi	r26, 0x80	; 128
    255c:	bf e3       	ldi	r27, 0x3F	; 63
    255e:	89 8f       	std	Y+25, r24	; 0x19
    2560:	9a 8f       	std	Y+26, r25	; 0x1a
    2562:	ab 8f       	std	Y+27, r26	; 0x1b
    2564:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2566:	69 8d       	ldd	r22, Y+25	; 0x19
    2568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a e7       	ldi	r20, 0x7A	; 122
    2574:	53 e4       	ldi	r21, 0x43	; 67
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	8d 8b       	std	Y+21, r24	; 0x15
    2580:	9e 8b       	std	Y+22, r25	; 0x16
    2582:	af 8b       	std	Y+23, r26	; 0x17
    2584:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2586:	6d 89       	ldd	r22, Y+21	; 0x15
    2588:	7e 89       	ldd	r23, Y+22	; 0x16
    258a:	8f 89       	ldd	r24, Y+23	; 0x17
    258c:	98 8d       	ldd	r25, Y+24	; 0x18
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	2c f4       	brge	.+10     	; 0x25a8 <LCD_displayCharacter+0x256>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 8b       	std	Y+20, r25	; 0x14
    25a4:	8b 8b       	std	Y+19, r24	; 0x13
    25a6:	3f c0       	rjmp	.+126    	; 0x2626 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    25a8:	6d 89       	ldd	r22, Y+21	; 0x15
    25aa:	7e 89       	ldd	r23, Y+22	; 0x16
    25ac:	8f 89       	ldd	r24, Y+23	; 0x17
    25ae:	98 8d       	ldd	r25, Y+24	; 0x18
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	4c f5       	brge	.+82     	; 0x2612 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	69 8d       	ldd	r22, Y+25	; 0x19
    25c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <LCD_displayCharacter+0x2b6>
    25ea:	89 e1       	ldi	r24, 0x19	; 25
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9a 8b       	std	Y+18, r25	; 0x12
    25f0:	89 8b       	std	Y+17, r24	; 0x11
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_displayCharacter+0x2a4>
    25fa:	9a 8b       	std	Y+18, r25	; 0x12
    25fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2600:	9c 89       	ldd	r25, Y+20	; 0x14
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	9c 8b       	std	Y+20, r25	; 0x14
    2606:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f7       	brne	.-38     	; 0x25ea <LCD_displayCharacter+0x298>
    2610:	14 c0       	rjmp	.+40     	; 0x263a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	8b 89       	ldd	r24, Y+19	; 0x13
    2628:	9c 89       	ldd	r25, Y+20	; 0x14
    262a:	98 8b       	std	Y+16, r25	; 0x10
    262c:	8f 87       	std	Y+15, r24	; 0x0f
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	98 89       	ldd	r25, Y+16	; 0x10
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_displayCharacter+0x2e0>
    2636:	98 8b       	std	Y+16, r25	; 0x10
    2638:	8f 87       	std	Y+15, r24	; 0x0f

	/* Data set-up time = 100 ns minimum */
	_delay_ms(1);

	/* Disable the lCD */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	62 e0       	ldi	r22, 0x02	; 2
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e8       	ldi	r26, 0x80	; 128
    264a:	bf e3       	ldi	r27, 0x3F	; 63
    264c:	8b 87       	std	Y+11, r24	; 0x0b
    264e:	9c 87       	std	Y+12, r25	; 0x0c
    2650:	ad 87       	std	Y+13, r26	; 0x0d
    2652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a e7       	ldi	r20, 0x7A	; 122
    2662:	53 e4       	ldi	r21, 0x43	; 67
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8f 83       	std	Y+7, r24	; 0x07
    266e:	98 87       	std	Y+8, r25	; 0x08
    2670:	a9 87       	std	Y+9, r26	; 0x09
    2672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2674:	6f 81       	ldd	r22, Y+7	; 0x07
    2676:	78 85       	ldd	r23, Y+8	; 0x08
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <LCD_displayCharacter+0x344>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <LCD_displayCharacter+0x3a4>
    26d8:	89 e1       	ldi	r24, 0x19	; 25
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_displayCharacter+0x392>
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <LCD_displayCharacter+0x386>
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_displayCharacter+0x3ce>
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01

	/* Data hold time = 13 ns minimum */
	_delay_ms(1);

}
    2728:	e9 96       	adiw	r28, 0x39	; 57
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char* str)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <LCD_displayString+0x6>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9b 83       	std	Y+3, r25	; 0x03
    2748:	8a 83       	std	Y+2, r24	; 0x02
	/* Counter for the array of characters */
	uint8 i =0;
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	0e c0       	rjmp	.+28     	; 0x276a <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	9b 81       	ldd	r25, Y+3	; 0x03
    2758:	fc 01       	movw	r30, r24
    275a:	e2 0f       	add	r30, r18
    275c:	f3 1f       	adc	r31, r19
    275e:	80 81       	ld	r24, Z
    2760:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_displayCharacter>
		i++;
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char* str)
{
	/* Counter for the array of characters */
	uint8 i =0;
	while (str[i] != '\0')
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	fc 01       	movw	r30, r24
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	80 81       	ld	r24, Z
    277c:	88 23       	and	r24, r24
    277e:	39 f7       	brne	.-50     	; 0x274e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <LCD_moveCursor+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <LCD_moveCursor+0x8>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	8a 83       	std	Y+2, r24	; 0x02
    279c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Address of the cursor depends on the row */
	switch (row) {
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	3d 83       	std	Y+5, r19	; 0x05
    27a6:	2c 83       	std	Y+4, r18	; 0x04
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	91 05       	cpc	r25, r1
    27b0:	c1 f0       	breq	.+48     	; 0x27e2 <LCD_moveCursor+0x56>
    27b2:	2c 81       	ldd	r18, Y+4	; 0x04
    27b4:	3d 81       	ldd	r19, Y+5	; 0x05
    27b6:	22 30       	cpi	r18, 0x02	; 2
    27b8:	31 05       	cpc	r19, r1
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <LCD_moveCursor+0x3a>
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	61 f0       	breq	.+24     	; 0x27dc <LCD_moveCursor+0x50>
    27c4:	19 c0       	rjmp	.+50     	; 0x27f8 <LCD_moveCursor+0x6c>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	22 30       	cpi	r18, 0x02	; 2
    27cc:	31 05       	cpc	r19, r1
    27ce:	69 f0       	breq	.+26     	; 0x27ea <LCD_moveCursor+0x5e>
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	83 30       	cpi	r24, 0x03	; 3
    27d6:	91 05       	cpc	r25, r1
    27d8:	61 f0       	breq	.+24     	; 0x27f2 <LCD_moveCursor+0x66>
    27da:	0e c0       	rjmp	.+28     	; 0x27f8 <LCD_moveCursor+0x6c>
	case 0 : /* First line */
		lcd_memory_address = LCD_FIRST_LINE_START_ID + col ;
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	0b c0       	rjmp	.+22     	; 0x27f8 <LCD_moveCursor+0x6c>
		break;
	case 1 : /* Second line */
		lcd_memory_address = LCD_SECOND_LINE_START_ID + col;
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	80 5c       	subi	r24, 0xC0	; 192
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	07 c0       	rjmp	.+14     	; 0x27f8 <LCD_moveCursor+0x6c>
		break;
	case 2 : /* Third line */
		lcd_memory_address = LCD_THIRD_LINE_START_ID + col;
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	80 5f       	subi	r24, 0xF0	; 240
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <LCD_moveCursor+0x6c>
		break;
	case 3 : /* Fourth line */
		lcd_memory_address = LCD_FOURTH_LINE_START_ID + col;
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	80 5b       	subi	r24, 0xB0	; 176
    27f6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	80 68       	ori	r24, 0x80	; 128
    27fc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>

}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <LCD_displayStringRowColumn+0x6>
    2816:	00 d0       	rcall	.+0      	; 0x2818 <LCD_displayStringRowColumn+0x8>
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	6a 83       	std	Y+2, r22	; 0x02
    2820:	5c 83       	std	Y+4, r21	; 0x04
    2822:	4b 83       	std	Y+3, r20	; 0x03
	/* Move cursor to the desired position */
	LCD_moveCursor(row, col);
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	6a 81       	ldd	r22, Y+2	; 0x02
    2828:	0e 94 c6 13 	call	0x278c	; 0x278c <LCD_moveCursor>

	/* Start printing the string from that position */
	LCD_displayString(str);
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayString>
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	62 97       	sbiw	r28, 0x12	; 18
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	9a 8b       	std	Y+18, r25	; 0x12
    2858:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result*/
	char buffer[16]; /* The maximum size of characters in one line in screenis 16 */

	/* Use itoa (integer to ascii) C function to convert the data to its corresponding ASCII value, included in stdlib header file*/
	itoa(data,buffer,10);  /*10 is the base for decimal*/
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	9a 89       	ldd	r25, Y+18	; 0x12
    285e:	9e 01       	movw	r18, r28
    2860:	2f 5f       	subi	r18, 0xFF	; 255
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	b9 01       	movw	r22, r18
    2866:	4a e0       	ldi	r20, 0x0A	; 10
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <itoa>
	/* data transfers its content to buffer with base 10 */

	LCD_displayString(buffer); /* Display the string */
    286e:	ce 01       	movw	r24, r28
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayString>

}
    2876:	62 96       	adiw	r28, 0x12	; 18
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
	/* Send clear display command */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_sendCommand>
}
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <main>:
uint8 g_second_password[10];
uint8 counter1 = 0;
uint8 counter2 = 0;

int main(void)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <main+0x6>
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
	/* To hold the value sent by micro1 */
	uint8 received_byte = 0;
    28a8:	19 82       	std	Y+1, r1	; 0x01

	/* Modules initialization */
	MICROCONTROLLER2_init();
    28aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <MICROCONTROLLER2_init>

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    28ae:	af e5       	ldi	r26, 0x5F	; 95
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ef e5       	ldi	r30, 0x5F	; 95
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	80 68       	ori	r24, 0x80	; 128
    28ba:	8c 93       	st	X, r24

	/* Send MC2_READY byte to MC1 */
	UART_sendByte(MICRO2_READY);
    28bc:	81 e1       	ldi	r24, 0x11	; 17
    28be:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>

	/* Wait until MC1 is ready to initialize communication */
	while(UART_recieveByte() != MICRO1_READY);
    28c2:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
    28c6:	80 31       	cpi	r24, 0x10	; 16
    28c8:	e1 f7       	brne	.-8      	; 0x28c2 <main+0x26>

	APP_checkIfFirstTimeEntry();
    28ca:	0e 94 19 06 	call	0xc32	; 0xc32 <APP_checkIfFirstTimeEntry>

	for (;;)
	{

		received_byte = UART_recieveByte();
    28ce:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
    28d2:	89 83       	std	Y+1, r24	; 0x01

		switch(received_byte)
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	3b 83       	std	Y+3, r19	; 0x03
    28dc:	2a 83       	std	Y+2, r18	; 0x02
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	8c 34       	cpi	r24, 0x4C	; 76
    28e4:	91 05       	cpc	r25, r1
    28e6:	09 f4       	brne	.+2      	; 0x28ea <main+0x4e>
    28e8:	48 c0       	rjmp	.+144    	; 0x297a <main+0xde>
    28ea:	2a 81       	ldd	r18, Y+2	; 0x02
    28ec:	3b 81       	ldd	r19, Y+3	; 0x03
    28ee:	2d 34       	cpi	r18, 0x4D	; 77
    28f0:	31 05       	cpc	r19, r1
    28f2:	84 f4       	brge	.+32     	; 0x2914 <main+0x78>
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	89 32       	cpi	r24, 0x29	; 41
    28fa:	91 05       	cpc	r25, r1
    28fc:	d9 f0       	breq	.+54     	; 0x2934 <main+0x98>
    28fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2900:	3b 81       	ldd	r19, Y+3	; 0x03
    2902:	2b 34       	cpi	r18, 0x4B	; 75
    2904:	31 05       	cpc	r19, r1
    2906:	11 f1       	breq	.+68     	; 0x294c <main+0xb0>
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	81 32       	cpi	r24, 0x21	; 33
    290e:	91 05       	cpc	r25, r1
    2910:	61 f0       	breq	.+24     	; 0x292a <main+0x8e>
    2912:	dd cf       	rjmp	.-70     	; 0x28ce <main+0x32>
    2914:	2a 81       	ldd	r18, Y+2	; 0x02
    2916:	3b 81       	ldd	r19, Y+3	; 0x03
    2918:	2d 34       	cpi	r18, 0x4D	; 77
    291a:	31 05       	cpc	r19, r1
    291c:	11 f1       	breq	.+68     	; 0x2962 <main+0xc6>
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	8b 37       	cpi	r24, 0x7B	; 123
    2924:	91 05       	cpc	r25, r1
    2926:	91 f1       	breq	.+100    	; 0x298c <main+0xf0>
    2928:	d2 cf       	rjmp	.-92     	; 0x28ce <main+0x32>

		/* The following two cases are only used once */
		case PASSWORD_UNCHECKED_FIRST_TIME :

			/* Wait until Mc1 finish sending the password */
			APP_receivePassword(g_first_password);
    292a:	82 ea       	ldi	r24, 0xA2	; 162
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <APP_receivePassword>
    2932:	cd cf       	rjmp	.-102    	; 0x28ce <main+0x32>
			break;

		case SECOND_PASSWORD_UNCHECKED_FIRST_TIME :

			/* Wait until Mc1 finish sending the password */
			APP_receivePassword(g_second_password);
    2934:	8c ea       	ldi	r24, 0xAC	; 172
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <APP_receivePassword>
				LCD_intgerToString(g_second_password[i]);
				_delay_ms(2000);
				i++;
			}
#endif
			APP_comparePasswordsFirstTime(g_first_password,g_second_password);
    293c:	82 ea       	ldi	r24, 0xA2	; 162
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	2c ea       	ldi	r18, 0xAC	; 172
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	b9 01       	movw	r22, r18
    2946:	0e 94 b6 07 	call	0xf6c	; 0xf6c <APP_comparePasswordsFirstTime>
    294a:	c1 cf       	rjmp	.-126    	; 0x28ce <main+0x32>
			break;

		case PASSWORD_UNCHECKED_FOR_DOOR :

			g_change=0;
    294c:	10 92 8b 00 	sts	0x008B, r1
			APP_receivePassword(g_first_password);
    2950:	82 ea       	ldi	r24, 0xA2	; 162
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <APP_receivePassword>
			APP_comparePasswords(g_first_password);
    2958:	82 ea       	ldi	r24, 0xA2	; 162
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 8a 09 	call	0x1314	; 0x1314 <APP_comparePasswords>
    2960:	b6 cf       	rjmp	.-148    	; 0x28ce <main+0x32>
			break;

		case PASSWORD_UNCHECKED_FOR_CHANGE:

			g_change=1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 93 8b 00 	sts	0x008B, r24
			APP_receivePassword(g_first_password);
    2968:	82 ea       	ldi	r24, 0xA2	; 162
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <APP_receivePassword>
			APP_comparePasswords(g_first_password);
    2970:	82 ea       	ldi	r24, 0xA2	; 162
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 8a 09 	call	0x1314	; 0x1314 <APP_comparePasswords>
    2978:	aa cf       	rjmp	.-172    	; 0x28ce <main+0x32>

			/* Regular compare with eeprom */
		case  PASSWORD_UNCHECKED_LOGIN :

			/* Wait until Mc1 finish sending the password */
			APP_receivePassword(g_first_password);
    297a:	82 ea       	ldi	r24, 0xA2	; 162
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <APP_receivePassword>

			//APP_setEEPROMCompare();

			APP_comparePasswords(g_first_password);
    2982:	82 ea       	ldi	r24, 0xA2	; 162
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 8a 09 	call	0x1314	; 0x1314 <APP_comparePasswords>
    298a:	a1 cf       	rjmp	.-190    	; 0x28ce <main+0x32>

			break;

		case APP_mainMenuCheck :

			APP_mainMenuChecker();
    298c:	0e 94 0f 0b 	call	0x161e	; 0x161e <APP_mainMenuChecker>
    2990:	9e cf       	rjmp	.-196    	; 0x28ce <main+0x32>

00002992 <DCMOTOR_init>:
#include "motor.h"

//#include "pwm_timer.h" /* To control the speed of fan */

void DCMOTOR_init(void)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	/* Setup the motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,PIN_OUTPUT);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	64 e0       	ldi	r22, 0x04	; 4
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,PIN_OUTPUT);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	65 e0       	ldi	r22, 0x05	; 5
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>

	/* Stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	64 e0       	ldi	r22, 0x04	; 4
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	65 e0       	ldi	r22, 0x05	; 5
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
}
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <DCMotor_Rotate>:

void DCMotor_Rotate(DcMotor_State state) //,uint8 speed
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <DCMotor_Rotate+0x6>
    29ce:	0f 92       	push	r0
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	89 83       	std	Y+1, r24	; 0x01
//
//	/* Send the speed value to the PWM to control the motor speed */
//	 PWM_Timer_start(fan_duty_cycle);

	/* Stop or rotate based on the state */
	switch(state)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	3b 83       	std	Y+3, r19	; 0x03
    29de:	2a 83       	std	Y+2, r18	; 0x02
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	91 05       	cpc	r25, r1
    29e8:	a1 f0       	breq	.+40     	; 0x2a12 <DCMotor_Rotate+0x4a>
    29ea:	2a 81       	ldd	r18, Y+2	; 0x02
    29ec:	3b 81       	ldd	r19, Y+3	; 0x03
    29ee:	22 30       	cpi	r18, 0x02	; 2
    29f0:	31 05       	cpc	r19, r1
    29f2:	d1 f0       	breq	.+52     	; 0x2a28 <DCMotor_Rotate+0x60>
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	01 f5       	brne	.+64     	; 0x2a3c <DCMotor_Rotate+0x74>
	{
	case DC_MOTOR_STOP :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	64 e0       	ldi	r22, 0x04	; 4
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	65 e0       	ldi	r22, 0x05	; 5
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    2a10:	15 c0       	rjmp	.+42     	; 0x2a3c <DCMotor_Rotate+0x74>
		break;
	case DC_MOTOR_CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	64 e0       	ldi	r22, 0x04	; 4
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	65 e0       	ldi	r22, 0x05	; 5
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
    2a26:	0a c0       	rjmp	.+20     	; 0x2a3c <DCMotor_Rotate+0x74>
		break;
	case DC_MOTOR_ANTI_CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	64 e0       	ldi	r22, 0x04	; 4
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	65 e0       	ldi	r22, 0x05	; 5
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <GPIO_writePin>
		break;
	}
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <PWM_Timer_start>:
 *                    		  Functions definitions                            *
 *******************************************************************************/


void PWM_Timer_start(const PWM_ConfigType *Config_Ptr)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <PWM_Timer_start+0x6>
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <PWM_Timer_start+0x8>
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01

	switch (Config_Ptr->identification)
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	80 81       	ld	r24, Z
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	3c 83       	std	Y+4, r19	; 0x04
    2a64:	2b 83       	std	Y+3, r18	; 0x03
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	c1 f1       	breq	.+112    	; 0x2ae0 <PWM_Timer_start+0x98>
    2a70:	2b 81       	ldd	r18, Y+3	; 0x03
    2a72:	3c 81       	ldd	r19, Y+4	; 0x04
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	31 05       	cpc	r19, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <PWM_Timer_start+0x34>
    2a7a:	64 c0       	rjmp	.+200    	; 0x2b44 <PWM_Timer_start+0xfc>
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <PWM_Timer_start+0x3e>
    2a84:	8b c0       	rjmp	.+278    	; 0x2b9c <PWM_Timer_start+0x154>
	{
	case TIMER0_ID :

		/* Configure PB3/OC0 as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTB_ID,PIN3,PIN_OUTPUT);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	63 e0       	ldi	r22, 0x03	; 3
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0xCF to clear COM01 (bit 5) & COM00 (bit 4)
		 * <<4 to insert them in COM01 & COM00
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->mode)<<4);
    2a90:	a3 e5       	ldi	r26, 0x53	; 83
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e3 e5       	ldi	r30, 0x53	; 83
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	2f 7c       	andi	r18, 0xCF	; 207
    2a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa2:	81 81       	ldd	r24, Z+1	; 0x01
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	82 95       	swap	r24
    2aaa:	92 95       	swap	r25
    2aac:	90 7f       	andi	r25, 0xF0	; 240
    2aae:	98 27       	eor	r25, r24
    2ab0:	80 7f       	andi	r24, 0xF0	; 240
    2ab2:	98 27       	eor	r25, r24
    2ab4:	82 2b       	or	r24, r18
    2ab6:	8c 93       	st	X, r24


		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*256 -> N(pre-scaler)= 64 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    2ab8:	a3 e5       	ldi	r26, 0x53	; 83
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e3 e5       	ldi	r30, 0x53	; 83
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	98 7f       	andi	r25, 0xF8	; 248
    2ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	89 2b       	or	r24, r25
    2ace:	8c 93       	st	X, r24

		/* Set value for the compare */
		OCR0 = Config_Ptr->duty_cycle;
    2ad0:	ac e5       	ldi	r26, 0x5C	; 92
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad8:	83 81       	ldd	r24, Z+3	; 0x03
    2ada:	94 81       	ldd	r25, Z+4	; 0x04
    2adc:	8c 93       	st	X, r24
    2ade:	5e c0       	rjmp	.+188    	; 0x2b9c <PWM_Timer_start+0x154>
		break;

	case TIMER1_ID :

		/* Configure PD5/OC1A as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	65 e0       	ldi	r22, 0x05	; 5
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0x3F to clear COM1A1 (bit 7) & COM1A0 (bit 6)
		 * <<6 to insert them in COM1A1 & COM1A0
		 */
		TCCR1A = (TCCR1A & 0x3F) | ((Config_Ptr->mode)<<6);
    2aea:	af e4       	ldi	r26, 0x4F	; 79
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	ef e4       	ldi	r30, 0x4F	; 79
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	28 2f       	mov	r18, r24
    2af6:	2f 73       	andi	r18, 0x3F	; 63
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	81 81       	ldd	r24, Z+1	; 0x01
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	00 24       	eor	r0, r0
    2b04:	96 95       	lsr	r25
    2b06:	87 95       	ror	r24
    2b08:	07 94       	ror	r0
    2b0a:	96 95       	lsr	r25
    2b0c:	87 95       	ror	r24
    2b0e:	07 94       	ror	r0
    2b10:	98 2f       	mov	r25, r24
    2b12:	80 2d       	mov	r24, r0
    2b14:	82 2b       	or	r24, r18
    2b16:	8c 93       	st	X, r24

		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*(1+TOP) -> N(pre-scaler)= 64 , You choose the top value */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2b18:	ae e4       	ldi	r26, 0x4E	; 78
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ee e4       	ldi	r30, 0x4E	; 78
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	98 2f       	mov	r25, r24
    2b24:	98 7f       	andi	r25, 0xF8	; 248
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	89 2b       	or	r24, r25
    2b2e:	8c 93       	st	X, r24

		/* Choose top value using TOP = (F_CPU/N*F_PWM)-1 */
		OCR1A = Config_Ptr->duty_cycle;
    2b30:	aa e4       	ldi	r26, 0x4A	; 74
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e9 81       	ldd	r30, Y+1	; 0x01
    2b36:	fa 81       	ldd	r31, Y+2	; 0x02
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	94 81       	ldd	r25, Z+4	; 0x04
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
    2b42:	2c c0       	rjmp	.+88     	; 0x2b9c <PWM_Timer_start+0x154>

		break;
	case TIMER2_ID :

		/* Configure PD7/OC2 as output pin -> pin where the PWM signal is generated from MC */
		GPIO_setupPinDirection(PORTD_ID,PIN7,PIN_OUTPUT);
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	67 e0       	ldi	r22, 0x07	; 7
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GPIO_setupPinDirection>

		/* Insert PWM Waveform mode
		 * &0xCF to clear COM21 (bit 5) & COM20 (bit 4)
		 * <<4 to insert them in COM21 & COM20
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->mode)<<4);
    2b4e:	a5 e4       	ldi	r26, 0x45	; 69
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e5 e4       	ldi	r30, 0x45	; 69
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	28 2f       	mov	r18, r24
    2b5a:	2f 7c       	andi	r18, 0xCF	; 207
    2b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b60:	81 81       	ldd	r24, Z+1	; 0x01
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	82 95       	swap	r24
    2b68:	92 95       	swap	r25
    2b6a:	90 7f       	andi	r25, 0xF0	; 240
    2b6c:	98 27       	eor	r25, r24
    2b6e:	80 7f       	andi	r24, 0xF0	; 240
    2b70:	98 27       	eor	r25, r24
    2b72:	82 2b       	or	r24, r18
    2b74:	8c 93       	st	X, r24

		/* F_CPU = 8Mhz , F_PWM = 200-700 -> using F_PWM = F_CPU/N*256 -> N(pre-scaler)= 64 */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler);
    2b76:	a5 e4       	ldi	r26, 0x45	; 69
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e5 e4       	ldi	r30, 0x45	; 69
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	98 2f       	mov	r25, r24
    2b82:	98 7f       	andi	r25, 0xF8	; 248
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	89 2b       	or	r24, r25
    2b8c:	8c 93       	st	X, r24

		/* Set value for the compare */
		OCR2 = Config_Ptr->duty_cycle;
    2b8e:	a3 e4       	ldi	r26, 0x43	; 67
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e9 81       	ldd	r30, Y+1	; 0x01
    2b94:	fa 81       	ldd	r31, Y+2	; 0x02
    2b96:	83 81       	ldd	r24, Z+3	; 0x03
    2b98:	94 81       	ldd	r25, Z+4	; 0x04
    2b9a:	8c 93       	st	X, r24

		break;
	}
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2baa:	1f 92       	push	r1
    2bac:	0f 92       	push	r0
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	0f 92       	push	r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	2f 93       	push	r18
    2bb6:	3f 93       	push	r19
    2bb8:	4f 93       	push	r20
    2bba:	5f 93       	push	r21
    2bbc:	6f 93       	push	r22
    2bbe:	7f 93       	push	r23
    2bc0:	8f 93       	push	r24
    2bc2:	9f 93       	push	r25
    2bc4:	af 93       	push	r26
    2bc6:	bf 93       	push	r27
    2bc8:	ef 93       	push	r30
    2bca:	ff 93       	push	r31
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    2bd4:	80 91 8e 00 	lds	r24, 0x008E
    2bd8:	90 91 8f 00 	lds	r25, 0x008F
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	29 f0       	breq	.+10     	; 0x2bea <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    2be0:	e0 91 8e 00 	lds	r30, 0x008E
    2be4:	f0 91 8f 00 	lds	r31, 0x008F
    2be8:	09 95       	icall
	}
}
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	7f 91       	pop	r23
    2bfc:	6f 91       	pop	r22
    2bfe:	5f 91       	pop	r21
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	0f 90       	pop	r0
    2c0c:	1f 90       	pop	r1
    2c0e:	18 95       	reti

00002c10 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2c10:	1f 92       	push	r1
    2c12:	0f 92       	push	r0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	0f 92       	push	r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	2f 93       	push	r18
    2c1c:	3f 93       	push	r19
    2c1e:	4f 93       	push	r20
    2c20:	5f 93       	push	r21
    2c22:	6f 93       	push	r22
    2c24:	7f 93       	push	r23
    2c26:	8f 93       	push	r24
    2c28:	9f 93       	push	r25
    2c2a:	af 93       	push	r26
    2c2c:	bf 93       	push	r27
    2c2e:	ef 93       	push	r30
    2c30:	ff 93       	push	r31
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    2c3a:	80 91 8e 00 	lds	r24, 0x008E
    2c3e:	90 91 8f 00 	lds	r25, 0x008F
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	29 f0       	breq	.+10     	; 0x2c50 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    2c46:	e0 91 8e 00 	lds	r30, 0x008E
    2c4a:	f0 91 8f 00 	lds	r31, 0x008F
    2c4e:	09 95       	icall
	}
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	ff 91       	pop	r31
    2c56:	ef 91       	pop	r30
    2c58:	bf 91       	pop	r27
    2c5a:	af 91       	pop	r26
    2c5c:	9f 91       	pop	r25
    2c5e:	8f 91       	pop	r24
    2c60:	7f 91       	pop	r23
    2c62:	6f 91       	pop	r22
    2c64:	5f 91       	pop	r21
    2c66:	4f 91       	pop	r20
    2c68:	3f 91       	pop	r19
    2c6a:	2f 91       	pop	r18
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f 90       	pop	r0
    2c72:	1f 90       	pop	r1
    2c74:	18 95       	reti

00002c76 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    2c76:	1f 92       	push	r1
    2c78:	0f 92       	push	r0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	0f 92       	push	r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	2f 93       	push	r18
    2c82:	3f 93       	push	r19
    2c84:	4f 93       	push	r20
    2c86:	5f 93       	push	r21
    2c88:	6f 93       	push	r22
    2c8a:	7f 93       	push	r23
    2c8c:	8f 93       	push	r24
    2c8e:	9f 93       	push	r25
    2c90:	af 93       	push	r26
    2c92:	bf 93       	push	r27
    2c94:	ef 93       	push	r30
    2c96:	ff 93       	push	r31
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2ca0:	80 91 90 00 	lds	r24, 0x0090
    2ca4:	90 91 91 00 	lds	r25, 0x0091
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	29 f0       	breq	.+10     	; 0x2cb6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2cac:	e0 91 90 00 	lds	r30, 0x0090
    2cb0:	f0 91 91 00 	lds	r31, 0x0091
    2cb4:	09 95       	icall
	}
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	ff 91       	pop	r31
    2cbc:	ef 91       	pop	r30
    2cbe:	bf 91       	pop	r27
    2cc0:	af 91       	pop	r26
    2cc2:	9f 91       	pop	r25
    2cc4:	8f 91       	pop	r24
    2cc6:	7f 91       	pop	r23
    2cc8:	6f 91       	pop	r22
    2cca:	5f 91       	pop	r21
    2ccc:	4f 91       	pop	r20
    2cce:	3f 91       	pop	r19
    2cd0:	2f 91       	pop	r18
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	0f 90       	pop	r0
    2cd8:	1f 90       	pop	r1
    2cda:	18 95       	reti

00002cdc <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2cdc:	1f 92       	push	r1
    2cde:	0f 92       	push	r0
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	0f 92       	push	r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	2f 93       	push	r18
    2ce8:	3f 93       	push	r19
    2cea:	4f 93       	push	r20
    2cec:	5f 93       	push	r21
    2cee:	6f 93       	push	r22
    2cf0:	7f 93       	push	r23
    2cf2:	8f 93       	push	r24
    2cf4:	9f 93       	push	r25
    2cf6:	af 93       	push	r26
    2cf8:	bf 93       	push	r27
    2cfa:	ef 93       	push	r30
    2cfc:	ff 93       	push	r31
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2d06:	80 91 90 00 	lds	r24, 0x0090
    2d0a:	90 91 91 00 	lds	r25, 0x0091
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2d12:	e0 91 90 00 	lds	r30, 0x0090
    2d16:	f0 91 91 00 	lds	r31, 0x0091
    2d1a:	09 95       	icall
	}
}
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	ff 91       	pop	r31
    2d22:	ef 91       	pop	r30
    2d24:	bf 91       	pop	r27
    2d26:	af 91       	pop	r26
    2d28:	9f 91       	pop	r25
    2d2a:	8f 91       	pop	r24
    2d2c:	7f 91       	pop	r23
    2d2e:	6f 91       	pop	r22
    2d30:	5f 91       	pop	r21
    2d32:	4f 91       	pop	r20
    2d34:	3f 91       	pop	r19
    2d36:	2f 91       	pop	r18
    2d38:	0f 90       	pop	r0
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	0f 90       	pop	r0
    2d3e:	1f 90       	pop	r1
    2d40:	18 95       	reti

00002d42 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    2d42:	1f 92       	push	r1
    2d44:	0f 92       	push	r0
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	2f 93       	push	r18
    2d4e:	3f 93       	push	r19
    2d50:	4f 93       	push	r20
    2d52:	5f 93       	push	r21
    2d54:	6f 93       	push	r22
    2d56:	7f 93       	push	r23
    2d58:	8f 93       	push	r24
    2d5a:	9f 93       	push	r25
    2d5c:	af 93       	push	r26
    2d5e:	bf 93       	push	r27
    2d60:	ef 93       	push	r30
    2d62:	ff 93       	push	r31
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2d6c:	80 91 90 00 	lds	r24, 0x0090
    2d70:	90 91 91 00 	lds	r25, 0x0091
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	29 f0       	breq	.+10     	; 0x2d82 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2d78:	e0 91 90 00 	lds	r30, 0x0090
    2d7c:	f0 91 91 00 	lds	r31, 0x0091
    2d80:	09 95       	icall
	}
}
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	ff 91       	pop	r31
    2d88:	ef 91       	pop	r30
    2d8a:	bf 91       	pop	r27
    2d8c:	af 91       	pop	r26
    2d8e:	9f 91       	pop	r25
    2d90:	8f 91       	pop	r24
    2d92:	7f 91       	pop	r23
    2d94:	6f 91       	pop	r22
    2d96:	5f 91       	pop	r21
    2d98:	4f 91       	pop	r20
    2d9a:	3f 91       	pop	r19
    2d9c:	2f 91       	pop	r18
    2d9e:	0f 90       	pop	r0
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	0f 90       	pop	r0
    2da4:	1f 90       	pop	r1
    2da6:	18 95       	reti

00002da8 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2da8:	1f 92       	push	r1
    2daa:	0f 92       	push	r0
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	0f 92       	push	r0
    2db0:	11 24       	eor	r1, r1
    2db2:	2f 93       	push	r18
    2db4:	3f 93       	push	r19
    2db6:	4f 93       	push	r20
    2db8:	5f 93       	push	r21
    2dba:	6f 93       	push	r22
    2dbc:	7f 93       	push	r23
    2dbe:	8f 93       	push	r24
    2dc0:	9f 93       	push	r25
    2dc2:	af 93       	push	r26
    2dc4:	bf 93       	push	r27
    2dc6:	ef 93       	push	r30
    2dc8:	ff 93       	push	r31
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    2dd2:	80 91 92 00 	lds	r24, 0x0092
    2dd6:	90 91 93 00 	lds	r25, 0x0093
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	29 f0       	breq	.+10     	; 0x2de8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    2dde:	e0 91 92 00 	lds	r30, 0x0092
    2de2:	f0 91 93 00 	lds	r31, 0x0093
    2de6:	09 95       	icall
	}
}
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	ff 91       	pop	r31
    2dee:	ef 91       	pop	r30
    2df0:	bf 91       	pop	r27
    2df2:	af 91       	pop	r26
    2df4:	9f 91       	pop	r25
    2df6:	8f 91       	pop	r24
    2df8:	7f 91       	pop	r23
    2dfa:	6f 91       	pop	r22
    2dfc:	5f 91       	pop	r21
    2dfe:	4f 91       	pop	r20
    2e00:	3f 91       	pop	r19
    2e02:	2f 91       	pop	r18
    2e04:	0f 90       	pop	r0
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	0f 90       	pop	r0
    2e0a:	1f 90       	pop	r1
    2e0c:	18 95       	reti

00002e0e <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    2e0e:	1f 92       	push	r1
    2e10:	0f 92       	push	r0
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	0f 92       	push	r0
    2e16:	11 24       	eor	r1, r1
    2e18:	2f 93       	push	r18
    2e1a:	3f 93       	push	r19
    2e1c:	4f 93       	push	r20
    2e1e:	5f 93       	push	r21
    2e20:	6f 93       	push	r22
    2e22:	7f 93       	push	r23
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
    2e28:	af 93       	push	r26
    2e2a:	bf 93       	push	r27
    2e2c:	ef 93       	push	r30
    2e2e:	ff 93       	push	r31
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    2e38:	80 91 92 00 	lds	r24, 0x0092
    2e3c:	90 91 93 00 	lds	r25, 0x0093
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	29 f0       	breq	.+10     	; 0x2e4e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    2e44:	e0 91 92 00 	lds	r30, 0x0092
    2e48:	f0 91 93 00 	lds	r31, 0x0093
    2e4c:	09 95       	icall
	}
}
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	ff 91       	pop	r31
    2e54:	ef 91       	pop	r30
    2e56:	bf 91       	pop	r27
    2e58:	af 91       	pop	r26
    2e5a:	9f 91       	pop	r25
    2e5c:	8f 91       	pop	r24
    2e5e:	7f 91       	pop	r23
    2e60:	6f 91       	pop	r22
    2e62:	5f 91       	pop	r21
    2e64:	4f 91       	pop	r20
    2e66:	3f 91       	pop	r19
    2e68:	2f 91       	pop	r18
    2e6a:	0f 90       	pop	r0
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	0f 90       	pop	r0
    2e70:	1f 90       	pop	r1
    2e72:	18 95       	reti

00002e74 <TIMER_init>:


void TIMER_init(const TIMER_ConfigType *Config_ptr)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	2a 97       	sbiw	r28, 0x0a	; 10
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	9a 83       	std	Y+2, r25	; 0x02
    2e8a:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_ptr->identification)
    2e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e90:	80 81       	ld	r24, Z
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	3a 87       	std	Y+10, r19	; 0x0a
    2e98:	29 87       	std	Y+9, r18	; 0x09
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <TIMER_init+0x32>
    2ea4:	8a c0       	rjmp	.+276    	; 0x2fba <TIMER_init+0x146>
    2ea6:	29 85       	ldd	r18, Y+9	; 0x09
    2ea8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eaa:	22 30       	cpi	r18, 0x02	; 2
    2eac:	31 05       	cpc	r19, r1
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <TIMER_init+0x3e>
    2eb0:	ff c0       	rjmp	.+510    	; 0x30b0 <TIMER_init+0x23c>
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <TIMER_init+0x48>
    2eba:	78 c1       	rjmp	.+752    	; 0x31ac <TIMER_init+0x338>
	{
	case TIMER0_ID :

		/* Load TCNT0 with initial value */
		TCNT0 = Config_ptr->initial_value;
    2ebc:	a2 e5       	ldi	r26, 0x52	; 82
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	8c 93       	st	X, r24
		/* Insert the pre-scaler bits :
		 * &0xB7 to clear WGM00 (bit 6) & WGM01 (bit3)
		 * &0x01 to get WGM00 & <<6 to insert it
		 * &0x02 to get WGM01 & <<3 to insert it
		 */
		TCCR0 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    2eca:	a3 e5       	ldi	r26, 0x53	; 83
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e3 e5       	ldi	r30, 0x53	; 83
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	27 7b       	andi	r18, 0xB7	; 183
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	81 81       	ldd	r24, Z+1	; 0x01
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	81 70       	andi	r24, 0x01	; 1
    2ee4:	90 70       	andi	r25, 0x00	; 0
    2ee6:	00 24       	eor	r0, r0
    2ee8:	96 95       	lsr	r25
    2eea:	87 95       	ror	r24
    2eec:	07 94       	ror	r0
    2eee:	96 95       	lsr	r25
    2ef0:	87 95       	ror	r24
    2ef2:	07 94       	ror	r0
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	80 2d       	mov	r24, r0
    2ef8:	28 2b       	or	r18, r24
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	81 81       	ldd	r24, Z+1	; 0x01
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	82 70       	andi	r24, 0x02	; 2
    2f06:	90 70       	andi	r25, 0x00	; 0
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	82 2b       	or	r24, r18
    2f16:	8c 93       	st	X, r24

		/* Insert the clock bits :
		 * &0xF8 to clear CS00 (bit 0) & CS01 (bit 1) & CS02 (bit 2)
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    2f18:	a3 e5       	ldi	r26, 0x53	; 83
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e3 e5       	ldi	r30, 0x53	; 83
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	98 2f       	mov	r25, r24
    2f24:	98 7f       	andi	r25, 0xF8	; 248
    2f26:	e9 81       	ldd	r30, Y+1	; 0x01
    2f28:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2a:	86 81       	ldd	r24, Z+6	; 0x06
    2f2c:	89 2b       	or	r24, r25
    2f2e:	8c 93       	st	X, r24

		switch ((Config_ptr->mode))
    2f30:	e9 81       	ldd	r30, Y+1	; 0x01
    2f32:	fa 81       	ldd	r31, Y+2	; 0x02
    2f34:	81 81       	ldd	r24, Z+1	; 0x01
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	38 87       	std	Y+8, r19	; 0x08
    2f3c:	2f 83       	std	Y+7, r18	; 0x07
    2f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f40:	98 85       	ldd	r25, Y+8	; 0x08
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	91 05       	cpc	r25, r1
    2f46:	51 f0       	breq	.+20     	; 0x2f5c <TIMER_init+0xe8>
    2f48:	2f 81       	ldd	r18, Y+7	; 0x07
    2f4a:	38 85       	ldd	r19, Y+8	; 0x08
    2f4c:	23 30       	cpi	r18, 0x03	; 3
    2f4e:	31 05       	cpc	r19, r1
    2f50:	61 f1       	breq	.+88     	; 0x2faa <TIMER_init+0x136>
    2f52:	8f 81       	ldd	r24, Y+7	; 0x07
    2f54:	98 85       	ldd	r25, Y+8	; 0x08
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	c1 f0       	breq	.+48     	; 0x2f8a <TIMER_init+0x116>
    2f5a:	28 c1       	rjmp	.+592    	; 0x31ac <TIMER_init+0x338>
		{

		case TIMER02_MODE_COMPARE :
			/* Load OCR0 with compare value if compare mode is on */
			OCR0 = Config_ptr->compare_value;
    2f5c:	ac e5       	ldi	r26, 0x5C	; 92
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e9 81       	ldd	r30, Y+1	; 0x01
    2f62:	fa 81       	ldd	r31, Y+2	; 0x02
    2f64:	84 81       	ldd	r24, Z+4	; 0x04
    2f66:	95 81       	ldd	r25, Z+5	; 0x05
    2f68:	8c 93       	st	X, r24

			/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    2f6a:	a9 e5       	ldi	r26, 0x59	; 89
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e9 e5       	ldi	r30, 0x59	; 89
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	8c 7f       	andi	r24, 0xFC	; 252
    2f76:	82 60       	ori	r24, 0x02	; 2
    2f78:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    2f7a:	a3 e5       	ldi	r26, 0x53	; 83
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e3 e5       	ldi	r30, 0x53	; 83
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 68       	ori	r24, 0x80	; 128
    2f86:	8c 93       	st	X, r24
    2f88:	11 c1       	rjmp	.+546    	; 0x31ac <TIMER_init+0x338>

			break;

		case TIMER02_MODE_NORMAL :
			/* Clear OCIE0 & TOIE0 & Enable Timer0 NORMAL Interrupt (TOIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    2f8a:	a9 e5       	ldi	r26, 0x59	; 89
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e9 e5       	ldi	r30, 0x59	; 89
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	8c 7f       	andi	r24, 0xFC	; 252
    2f96:	81 60       	ori	r24, 0x01	; 1
    2f98:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    2f9a:	a3 e5       	ldi	r26, 0x53	; 83
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e3 e5       	ldi	r30, 0x53	; 83
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	80 68       	ori	r24, 0x80	; 128
    2fa6:	8c 93       	st	X, r24
    2fa8:	01 c1       	rjmp	.+514    	; 0x31ac <TIMER_init+0x338>

			break;
		case TIMER02_MODE_FAST_PWM :
			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 &= ~(1<<FOC0);
    2faa:	a3 e5       	ldi	r26, 0x53	; 83
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e3 e5       	ldi	r30, 0x53	; 83
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8f 77       	andi	r24, 0x7F	; 127
    2fb6:	8c 93       	st	X, r24
    2fb8:	f9 c0       	rjmp	.+498    	; 0x31ac <TIMER_init+0x338>
		}
		break;

		case TIMER1_ID :
			/* Load TCNT1 with initial value */
			TCNT1 = Config_ptr->initial_value;
    2fba:	ac e4       	ldi	r26, 0x4C	; 76
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	11 96       	adiw	r26, 0x01	; 1
    2fc8:	9c 93       	st	X, r25
    2fca:	8e 93       	st	-X, r24

			/* Insert the pre-scaler bits in TCCR1A :
			 * &0xFC to clear WGM10 (bit 0) & WGM11 (bit1)
			 * &0x03 to get WGM10 & WGM11
			 */
			TCCR1A = (TCCR1A & 0xFC) | ( (Config_ptr->mode) & 0x03);
    2fcc:	af e4       	ldi	r26, 0x4F	; 79
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	ef e4       	ldi	r30, 0x4F	; 79
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	9c 7f       	andi	r25, 0xFC	; 252
    2fda:	e9 81       	ldd	r30, Y+1	; 0x01
    2fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fde:	81 81       	ldd	r24, Z+1	; 0x01
    2fe0:	83 70       	andi	r24, 0x03	; 3
    2fe2:	89 2b       	or	r24, r25
    2fe4:	8c 93       	st	X, r24

			/* Insert the pre-scaler bits in TCCR1B :
			 * &0xE7 to clear WGM12 (bit 3) & WGM13 (bit4)
			 * &0x0C to get WGM12 (bit 3) & WGM13 (bit 4) & << 1 to insert it.
			 */
			TCCR1B = (TCCR1B & 0xE7 ) | ((((Config_ptr->mode)&0x0C)<<1)) ;
    2fe6:	ae e4       	ldi	r26, 0x4E	; 78
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	ee e4       	ldi	r30, 0x4E	; 78
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	27 7e       	andi	r18, 0xE7	; 231
    2ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff8:	81 81       	ldd	r24, Z+1	; 0x01
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	8c 70       	andi	r24, 0x0C	; 12
    3000:	90 70       	andi	r25, 0x00	; 0
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	82 2b       	or	r24, r18
    3008:	8c 93       	st	X, r24

			/* Insert the clock bits :
			 * &0xF8 to clear CS10 (bit 0) & CS11 (bit 1) & CS12 (bit 2)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    300a:	ae e4       	ldi	r26, 0x4E	; 78
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	ee e4       	ldi	r30, 0x4E	; 78
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	98 2f       	mov	r25, r24
    3016:	98 7f       	andi	r25, 0xF8	; 248
    3018:	e9 81       	ldd	r30, Y+1	; 0x01
    301a:	fa 81       	ldd	r31, Y+2	; 0x02
    301c:	86 81       	ldd	r24, Z+6	; 0x06
    301e:	89 2b       	or	r24, r25
    3020:	8c 93       	st	X, r24



			switch ((Config_ptr->mode))
    3022:	e9 81       	ldd	r30, Y+1	; 0x01
    3024:	fa 81       	ldd	r31, Y+2	; 0x02
    3026:	81 81       	ldd	r24, Z+1	; 0x01
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	3e 83       	std	Y+6, r19	; 0x06
    302e:	2d 83       	std	Y+5, r18	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	91 05       	cpc	r25, r1
    3038:	51 f0       	breq	.+20     	; 0x304e <TIMER_init+0x1da>
    303a:	2d 81       	ldd	r18, Y+5	; 0x05
    303c:	3e 81       	ldd	r19, Y+6	; 0x06
    303e:	2f 30       	cpi	r18, 0x0F	; 15
    3040:	31 05       	cpc	r19, r1
    3042:	71 f1       	breq	.+92     	; 0x30a0 <TIMER_init+0x22c>
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	d1 f0       	breq	.+52     	; 0x3080 <TIMER_init+0x20c>
    304c:	af c0       	rjmp	.+350    	; 0x31ac <TIMER_init+0x338>
			{

			case TIMER1_MODE_COMPARE_OCR1A :

				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 COMPARE A match Interrupt (OCIE1A) */
				TIMSK = (TIMSK & 0xC3) | (1<<OCIE1A);
    304e:	a9 e5       	ldi	r26, 0x59	; 89
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e9 e5       	ldi	r30, 0x59	; 89
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	83 7c       	andi	r24, 0xC3	; 195
    305a:	80 61       	ori	r24, 0x10	; 16
    305c:	8c 93       	st	X, r24

				/* FOC1A bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR1A & 0xF7) | (1<<FOC1A);
    305e:	af e4       	ldi	r26, 0x4F	; 79
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	ef e4       	ldi	r30, 0x4F	; 79
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	88 60       	ori	r24, 0x08	; 8
    306a:	8c 93       	st	X, r24

				/* Load OCR1A with compare value if compare mode is on */
				OCR1A = Config_ptr->compare_value;
    306c:	aa e4       	ldi	r26, 0x4A	; 74
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e9 81       	ldd	r30, Y+1	; 0x01
    3072:	fa 81       	ldd	r31, Y+2	; 0x02
    3074:	84 81       	ldd	r24, Z+4	; 0x04
    3076:	95 81       	ldd	r25, Z+5	; 0x05
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	9c 93       	st	X, r25
    307c:	8e 93       	st	-X, r24
    307e:	96 c0       	rjmp	.+300    	; 0x31ac <TIMER_init+0x338>

				break;

			case TIMER1_MODE_NORMAL :
				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 Normal(overflow) Interrupt (TOIE1) */
				TIMSK = (TIMSK & 0x03) | (1<<TOIE1);
    3080:	a9 e5       	ldi	r26, 0x59	; 89
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e9 e5       	ldi	r30, 0x59	; 89
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	83 70       	andi	r24, 0x03	; 3
    308c:	84 60       	ori	r24, 0x04	; 4
    308e:	8c 93       	st	X, r24

				/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR0 & 0xF7) | (1<<FOC1A);
    3090:	af e4       	ldi	r26, 0x4F	; 79
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e3 e5       	ldi	r30, 0x53	; 83
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	88 60       	ori	r24, 0x08	; 8
    309c:	8c 93       	st	X, r24
    309e:	86 c0       	rjmp	.+268    	; 0x31ac <TIMER_init+0x338>

				break;
			case TIMER1_MODE_FAST_PWM_OCR1A :
				/* FOC1A & FOC1B bit is only active when the WGM01:00 bits specifies a non-PWM mode */
				TCCR1A &= ~(1<<FOC1A) & ~(1<<FOC1B);
    30a0:	af e4       	ldi	r26, 0x4F	; 79
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	ef e4       	ldi	r30, 0x4F	; 79
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	83 7f       	andi	r24, 0xF3	; 243
    30ac:	8c 93       	st	X, r24
    30ae:	7e c0       	rjmp	.+252    	; 0x31ac <TIMER_init+0x338>
			break;

			case TIMER2_ID :

				/* Load TCNT0 with initial value */
				TCNT2 = Config_ptr->initial_value;
    30b0:	a4 e4       	ldi	r26, 0x44	; 68
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e9 81       	ldd	r30, Y+1	; 0x01
    30b6:	fa 81       	ldd	r31, Y+2	; 0x02
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	8c 93       	st	X, r24
				/* Insert the pre-scaler bits :
				 * &0xB7 to clear WGM20 (bit 6) & WGM21 (bit3)
				 * &0x01 to get WGM20 & <<6 to insert it
				 * &0x02 to get WGM21 & <<3 to insert it
				 */
				TCCR2 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    30be:	a5 e4       	ldi	r26, 0x45	; 69
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e3 e5       	ldi	r30, 0x53	; 83
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	28 2f       	mov	r18, r24
    30ca:	27 7b       	andi	r18, 0xB7	; 183
    30cc:	e9 81       	ldd	r30, Y+1	; 0x01
    30ce:	fa 81       	ldd	r31, Y+2	; 0x02
    30d0:	81 81       	ldd	r24, Z+1	; 0x01
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	81 70       	andi	r24, 0x01	; 1
    30d8:	90 70       	andi	r25, 0x00	; 0
    30da:	00 24       	eor	r0, r0
    30dc:	96 95       	lsr	r25
    30de:	87 95       	ror	r24
    30e0:	07 94       	ror	r0
    30e2:	96 95       	lsr	r25
    30e4:	87 95       	ror	r24
    30e6:	07 94       	ror	r0
    30e8:	98 2f       	mov	r25, r24
    30ea:	80 2d       	mov	r24, r0
    30ec:	28 2b       	or	r18, r24
    30ee:	e9 81       	ldd	r30, Y+1	; 0x01
    30f0:	fa 81       	ldd	r31, Y+2	; 0x02
    30f2:	81 81       	ldd	r24, Z+1	; 0x01
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	82 70       	andi	r24, 0x02	; 2
    30fa:	90 70       	andi	r25, 0x00	; 0
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	82 2b       	or	r24, r18
    310a:	8c 93       	st	X, r24

				/* Insert the clock bits :
				 * &0xF8 to clear CS20 (bit 0) & CS21 (bit 1) & CS22 (bit 2)
				 */
				TCCR2 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    310c:	a5 e4       	ldi	r26, 0x45	; 69
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e3 e5       	ldi	r30, 0x53	; 83
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	98 2f       	mov	r25, r24
    3118:	98 7f       	andi	r25, 0xF8	; 248
    311a:	e9 81       	ldd	r30, Y+1	; 0x01
    311c:	fa 81       	ldd	r31, Y+2	; 0x02
    311e:	86 81       	ldd	r24, Z+6	; 0x06
    3120:	89 2b       	or	r24, r25
    3122:	8c 93       	st	X, r24

				switch ((Config_ptr->mode))
    3124:	e9 81       	ldd	r30, Y+1	; 0x01
    3126:	fa 81       	ldd	r31, Y+2	; 0x02
    3128:	81 81       	ldd	r24, Z+1	; 0x01
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	3c 83       	std	Y+4, r19	; 0x04
    3130:	2b 83       	std	Y+3, r18	; 0x03
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	82 30       	cpi	r24, 0x02	; 2
    3138:	91 05       	cpc	r25, r1
    313a:	51 f0       	breq	.+20     	; 0x3150 <TIMER_init+0x2dc>
    313c:	2b 81       	ldd	r18, Y+3	; 0x03
    313e:	3c 81       	ldd	r19, Y+4	; 0x04
    3140:	23 30       	cpi	r18, 0x03	; 3
    3142:	31 05       	cpc	r19, r1
    3144:	61 f1       	breq	.+88     	; 0x319e <TIMER_init+0x32a>
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	9c 81       	ldd	r25, Y+4	; 0x04
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	c1 f0       	breq	.+48     	; 0x317e <TIMER_init+0x30a>
    314e:	2e c0       	rjmp	.+92     	; 0x31ac <TIMER_init+0x338>
				{

				case TIMER02_MODE_COMPARE :

					/* Load OCR0 with compare value if compare mode is on */
					OCR2 = Config_ptr->compare_value;
    3150:	a3 e4       	ldi	r26, 0x43	; 67
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	84 81       	ldd	r24, Z+4	; 0x04
    315a:	95 81       	ldd	r25, Z+5	; 0x05
    315c:	8c 93       	st	X, r24

					/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
					TIMSK = (TIMSK & 0x3F) | (1<<OCIE2);
    315e:	a9 e5       	ldi	r26, 0x59	; 89
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e9 e5       	ldi	r30, 0x59	; 89
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 73       	andi	r24, 0x3F	; 63
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	8c 93       	st	X, r24

					/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    316e:	a5 e4       	ldi	r26, 0x45	; 69
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e5 e4       	ldi	r30, 0x45	; 69
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	80 68       	ori	r24, 0x80	; 128
    317a:	8c 93       	st	X, r24
    317c:	17 c0       	rjmp	.+46     	; 0x31ac <TIMER_init+0x338>


				case TIMER02_MODE_NORMAL :

					/* Clear OCIE2 & TOIE2 & Enable Timer2 NORMAL Interrupt (TOIE2) */
					TIMSK = (TIMSK & 0x3F) | (1<<TOIE2);
    317e:	a9 e5       	ldi	r26, 0x59	; 89
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e9 e5       	ldi	r30, 0x59	; 89
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	8f 73       	andi	r24, 0x3F	; 63
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	8c 93       	st	X, r24

					/* FOC2 bit is only active when the WGM00 bit specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    318e:	a5 e4       	ldi	r26, 0x45	; 69
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e5 e4       	ldi	r30, 0x45	; 69
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 68       	ori	r24, 0x80	; 128
    319a:	8c 93       	st	X, r24
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <TIMER_init+0x338>
					break;

				case TIMER02_MODE_FAST_PWM :

					/* FOC2 bit is only active when the WGM21:20 bits specifies a non-PWM mode */
					TCCR2 &= ~(1<<FOC2);
    319e:	a5 e4       	ldi	r26, 0x45	; 69
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e5 e4       	ldi	r30, 0x45	; 69
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8f 77       	andi	r24, 0x7F	; 127
    31aa:	8c 93       	st	X, r24
					/* PWM Configuration at main application */
					break;
				}
				break;
	}
}
    31ac:	2a 96       	adiw	r28, 0x0a	; 10
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <TIMER0_setCallback>:

void TIMER0_setCallback (void(*a_ptr)(void))
{
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <TIMER0_setCallback+0x6>
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer0Ptr = a_ptr;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	90 93 8f 00 	sts	0x008F, r25
    31d4:	80 93 8e 00 	sts	0x008E, r24
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <TIMER1_setCallback>:

void TIMER1_setCallback (void(*a_ptr)(void))
{
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <TIMER1_setCallback+0x6>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	9a 83       	std	Y+2, r25	; 0x02
    31ee:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer1Ptr = a_ptr;
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	90 93 91 00 	sts	0x0091, r25
    31f8:	80 93 90 00 	sts	0x0090, r24
}
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <TIMER2_setCallback>:

void TIMER2_setCallback (void(*a_ptr)(void))
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <TIMER2_setCallback+0x6>
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer2Ptr = a_ptr;
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	90 93 93 00 	sts	0x0093, r25
    321c:	80 93 92 00 	sts	0x0092, r24
}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <TIMER_DeInit>:

void TIMER_DeInit (uint8 TIMER_DeInit_ID)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <TIMER_DeInit+0x6>
    3230:	0f 92       	push	r0
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	89 83       	std	Y+1, r24	; 0x01
	switch (TIMER_DeInit_ID)
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	28 2f       	mov	r18, r24
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	3b 83       	std	Y+3, r19	; 0x03
    3240:	2a 83       	std	Y+2, r18	; 0x02
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	9b 81       	ldd	r25, Y+3	; 0x03
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	91 05       	cpc	r25, r1
    324a:	d1 f0       	breq	.+52     	; 0x3280 <TIMER_DeInit+0x56>
    324c:	2a 81       	ldd	r18, Y+2	; 0x02
    324e:	3b 81       	ldd	r19, Y+3	; 0x03
    3250:	22 30       	cpi	r18, 0x02	; 2
    3252:	31 05       	cpc	r19, r1
    3254:	79 f1       	breq	.+94     	; 0x32b4 <TIMER_DeInit+0x8a>
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	9b 81       	ldd	r25, Y+3	; 0x03
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	d9 f5       	brne	.+118    	; 0x32d4 <TIMER_DeInit+0xaa>
	{

	case TIMER0_ID :

		/* Clear Timer values */
		TCNT0 = 0;
    325e:	e2 e5       	ldi	r30, 0x52	; 82
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	10 82       	st	Z, r1
		TCCR0 = 0;
    3264:	e3 e5       	ldi	r30, 0x53	; 83
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	10 82       	st	Z, r1
		OCR0 = 0;
    326a:	ec e5       	ldi	r30, 0x5C	; 92
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    3270:	a9 e5       	ldi	r26, 0x59	; 89
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e9 e5       	ldi	r30, 0x59	; 89
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8c 7f       	andi	r24, 0xFC	; 252
    327c:	8c 93       	st	X, r24
    327e:	2a c0       	rjmp	.+84     	; 0x32d4 <TIMER_DeInit+0xaa>
		break;

	case TIMER1_ID :

		/* Clear Timer values */
		TCNT1 = 0;
    3280:	ec e4       	ldi	r30, 0x4C	; 76
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	11 82       	std	Z+1, r1	; 0x01
    3286:	10 82       	st	Z, r1
		TCCR1A = 0;
    3288:	ef e4       	ldi	r30, 0x4F	; 79
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	10 82       	st	Z, r1
		TCCR1B = 0;
    328e:	ee e4       	ldi	r30, 0x4E	; 78
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	10 82       	st	Z, r1
		OCR1A = 0;
    3294:	ea e4       	ldi	r30, 0x4A	; 74
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	11 82       	std	Z+1, r1	; 0x01
    329a:	10 82       	st	Z, r1
		OCR1B = 0;
    329c:	e8 e4       	ldi	r30, 0x48	; 72
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	11 82       	std	Z+1, r1	; 0x01
    32a2:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) & ~(1<<OCIE1B);
    32a4:	a9 e5       	ldi	r26, 0x59	; 89
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e9 e5       	ldi	r30, 0x59	; 89
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	83 7e       	andi	r24, 0xE3	; 227
    32b0:	8c 93       	st	X, r24
    32b2:	10 c0       	rjmp	.+32     	; 0x32d4 <TIMER_DeInit+0xaa>
		break;

	case TIMER2_ID :

		/* Clear Timer values */
		TCNT2 = 0;
    32b4:	e4 e4       	ldi	r30, 0x44	; 68
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	10 82       	st	Z, r1
		TCCR2 = 0;
    32ba:	e5 e4       	ldi	r30, 0x45	; 69
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	10 82       	st	Z, r1
		OCR2 = 0;
    32c0:	e3 e4       	ldi	r30, 0x43	; 67
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    32c6:	a9 e5       	ldi	r26, 0x59	; 89
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e9 e5       	ldi	r30, 0x59	; 89
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	8f 73       	andi	r24, 0x3F	; 63
    32d2:	8c 93       	st	X, r24

	}
}
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <setCallBackFunctionTimer1>:

/*******************************************************************************
 *                    		  Function Declarations                            *
 *******************************************************************************/
void setCallBackFunctionTimer1 (void)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    32e8:	80 91 b6 00 	lds	r24, 0x00B6
    32ec:	8f 5f       	subi	r24, 0xFF	; 255
    32ee:	80 93 b6 00 	sts	0x00B6, r24
}
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <APP_startTimer_1Sec>:

void APP_startTimer_1Sec(void)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	2c 97       	sbiw	r28, 0x0c	; 12
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 1*8Mhz/1024 = 7812.5
	 * Generates interrupt every 1 second
	 */

	g_tick=0;
    330c:	10 92 b6 00 	sts	0x00B6, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    3310:	80 e7       	ldi	r24, 0x70	; 112
    3312:	99 e1       	ldi	r25, 0x19	; 25
    3314:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <TIMER1_setCallback>
	//	g_flag = TIMER_LCD_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,7812,TIMER_CLOCK_CPU_1024};
    3318:	ce 01       	movw	r24, r28
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	99 87       	std	Y+9, r25	; 0x09
    331e:	88 87       	std	Y+8, r24	; 0x08
    3320:	e5 e7       	ldi	r30, 0x75	; 117
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	fb 87       	std	Y+11, r31	; 0x0b
    3326:	ea 87       	std	Y+10, r30	; 0x0a
    3328:	f7 e0       	ldi	r31, 0x07	; 7
    332a:	fc 87       	std	Y+12, r31	; 0x0c
    332c:	ea 85       	ldd	r30, Y+10	; 0x0a
    332e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3330:	00 80       	ld	r0, Z
    3332:	8a 85       	ldd	r24, Y+10	; 0x0a
    3334:	9b 85       	ldd	r25, Y+11	; 0x0b
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	9b 87       	std	Y+11, r25	; 0x0b
    333a:	8a 87       	std	Y+10, r24	; 0x0a
    333c:	e8 85       	ldd	r30, Y+8	; 0x08
    333e:	f9 85       	ldd	r31, Y+9	; 0x09
    3340:	00 82       	st	Z, r0
    3342:	88 85       	ldd	r24, Y+8	; 0x08
    3344:	99 85       	ldd	r25, Y+9	; 0x09
    3346:	01 96       	adiw	r24, 0x01	; 1
    3348:	99 87       	std	Y+9, r25	; 0x09
    334a:	88 87       	std	Y+8, r24	; 0x08
    334c:	9c 85       	ldd	r25, Y+12	; 0x0c
    334e:	91 50       	subi	r25, 0x01	; 1
    3350:	9c 87       	std	Y+12, r25	; 0x0c
    3352:	ec 85       	ldd	r30, Y+12	; 0x0c
    3354:	ee 23       	and	r30, r30
    3356:	51 f7       	brne	.-44     	; 0x332c <APP_startTimer_1Sec+0x34>
	TIMER_init(&configuration1);
    3358:	ce 01       	movw	r24, r28
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <TIMER_init>
}
    3360:	2c 96       	adiw	r28, 0x0c	; 12
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <APP_startTimer_3Sec>:
void APP_startTimer_3Sec(void)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	2c 97       	sbiw	r28, 0x0c	; 12
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar , Comparing mode with top value of 1024 (1 sec).
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 3*8Mhz/1024 = 23437.5
	 * Generates interrupt every 5 second
	 */

	g_tick=0;
    3386:	10 92 b6 00 	sts	0x00B6, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    338a:	80 e7       	ldi	r24, 0x70	; 112
    338c:	99 e1       	ldi	r25, 0x19	; 25
    338e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <TIMER1_setCallback>
	//		g_flag = TIMER_MOTOR_MOVE_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,23437,TIMER_CLOCK_CPU_1024};
    3392:	ce 01       	movw	r24, r28
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	99 87       	std	Y+9, r25	; 0x09
    3398:	88 87       	std	Y+8, r24	; 0x08
    339a:	ec e7       	ldi	r30, 0x7C	; 124
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	fb 87       	std	Y+11, r31	; 0x0b
    33a0:	ea 87       	std	Y+10, r30	; 0x0a
    33a2:	f7 e0       	ldi	r31, 0x07	; 7
    33a4:	fc 87       	std	Y+12, r31	; 0x0c
    33a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    33a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    33aa:	00 80       	ld	r0, Z
    33ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	9b 87       	std	Y+11, r25	; 0x0b
    33b4:	8a 87       	std	Y+10, r24	; 0x0a
    33b6:	e8 85       	ldd	r30, Y+8	; 0x08
    33b8:	f9 85       	ldd	r31, Y+9	; 0x09
    33ba:	00 82       	st	Z, r0
    33bc:	88 85       	ldd	r24, Y+8	; 0x08
    33be:	99 85       	ldd	r25, Y+9	; 0x09
    33c0:	01 96       	adiw	r24, 0x01	; 1
    33c2:	99 87       	std	Y+9, r25	; 0x09
    33c4:	88 87       	std	Y+8, r24	; 0x08
    33c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c8:	91 50       	subi	r25, 0x01	; 1
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    33ce:	ee 23       	and	r30, r30
    33d0:	51 f7       	brne	.-44     	; 0x33a6 <APP_startTimer_3Sec+0x34>
	TIMER_init(&configuration1);
    33d2:	ce 01       	movw	r24, r28
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <TIMER_init>
}
    33da:	2c 96       	adiw	r28, 0x0c	; 12
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <APP_startTimer_6Sec>:

void APP_startTimer_6Sec(void)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	2c 97       	sbiw	r28, 0x0c	; 12
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
	/* Timer delay Configurations for 6 Second delay:
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 6*8Mhz/1024 = 46875
	 * Generates interrupt every 6 seconds
	 */
	g_tick=0;
    3400:	10 92 b6 00 	sts	0x00B6, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    3404:	80 e7       	ldi	r24, 0x70	; 112
    3406:	99 e1       	ldi	r25, 0x19	; 25
    3408:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <TIMER1_setCallback>
	//	g_flag = TIMER_BUZZER_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,46875,TIMER_CLOCK_CPU_1024};
    340c:	ce 01       	movw	r24, r28
    340e:	01 96       	adiw	r24, 0x01	; 1
    3410:	99 87       	std	Y+9, r25	; 0x09
    3412:	88 87       	std	Y+8, r24	; 0x08
    3414:	e3 e8       	ldi	r30, 0x83	; 131
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	fb 87       	std	Y+11, r31	; 0x0b
    341a:	ea 87       	std	Y+10, r30	; 0x0a
    341c:	f7 e0       	ldi	r31, 0x07	; 7
    341e:	fc 87       	std	Y+12, r31	; 0x0c
    3420:	ea 85       	ldd	r30, Y+10	; 0x0a
    3422:	fb 85       	ldd	r31, Y+11	; 0x0b
    3424:	00 80       	ld	r0, Z
    3426:	8a 85       	ldd	r24, Y+10	; 0x0a
    3428:	9b 85       	ldd	r25, Y+11	; 0x0b
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	9b 87       	std	Y+11, r25	; 0x0b
    342e:	8a 87       	std	Y+10, r24	; 0x0a
    3430:	e8 85       	ldd	r30, Y+8	; 0x08
    3432:	f9 85       	ldd	r31, Y+9	; 0x09
    3434:	00 82       	st	Z, r0
    3436:	88 85       	ldd	r24, Y+8	; 0x08
    3438:	99 85       	ldd	r25, Y+9	; 0x09
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	99 87       	std	Y+9, r25	; 0x09
    343e:	88 87       	std	Y+8, r24	; 0x08
    3440:	9c 85       	ldd	r25, Y+12	; 0x0c
    3442:	91 50       	subi	r25, 0x01	; 1
    3444:	9c 87       	std	Y+12, r25	; 0x0c
    3446:	ec 85       	ldd	r30, Y+12	; 0x0c
    3448:	ee 23       	and	r30, r30
    344a:	51 f7       	brne	.-44     	; 0x3420 <APP_startTimer_6Sec+0x34>
	TIMER_init(&configuration1);
    344c:	ce 01       	movw	r24, r28
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <TIMER_init>
}
    3454:	2c 96       	adiw	r28, 0x0c	; 12
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <APP_Timer1DelayForScreenCheck>:

void APP_Timer1DelayForScreenCheck(void)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
	while (g_tick !=1);
    346e:	80 91 b6 00 	lds	r24, 0x00B6
    3472:	81 30       	cpi	r24, 0x01	; 1
    3474:	e1 f7       	brne	.-8      	; 0x346e <APP_Timer1DelayForScreenCheck+0x8>
	g_tick=0;
    3476:	10 92 b6 00 	sts	0x00B6, r1
	TIMER_DeInit(TIMER1_ID);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	0e 94 15 19 	call	0x322a	; 0x322a <TIMER_DeInit>

}
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <APP_Timer1DelayForBuzzerCheck>:
void APP_Timer1DelayForBuzzerCheck(void)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	/* Must call APP_startTimer_6Sec before to identify g_tick every 6 sec */
	/* Delay for 60 second */
	while (g_tick !=10);
    348e:	80 91 b6 00 	lds	r24, 0x00B6
    3492:	8a 30       	cpi	r24, 0x0A	; 10
    3494:	e1 f7       	brne	.-8      	; 0x348e <APP_Timer1DelayForBuzzerCheck+0x8>
	g_tick = 0;
    3496:	10 92 b6 00 	sts	0x00B6, r1
	TIMER_DeInit(TIMER1_ID);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	0e 94 15 19 	call	0x322a	; 0x322a <TIMER_DeInit>

}
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <TWI_init>:
#include <avr/io.h>

#include "twi.h"

void TWI_init(const TWI_ConfigType *Config_ptr)
{
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <TWI_init+0x12>
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01
	/* enable TWI */
	TWCR = (1<<TWEN);
    34c0:	e6 e5       	ldi	r30, 0x56	; 86
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	84 e0       	ldi	r24, 0x04	; 4
    34c6:	80 83       	st	Z, r24

	/* Insert the address while preserving the TWGCE bit (bit 0) *
	 * I2C has only 128 address.
	 */
	if ((Config_ptr->address)<128) {
    34c8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ca:	fa 81       	ldd	r31, Y+2	; 0x02
    34cc:	81 81       	ldd	r24, Z+1	; 0x01
    34ce:	88 23       	and	r24, r24
    34d0:	84 f0       	brlt	.+32     	; 0x34f2 <TWI_init+0x4c>
		TWAR = (TWAR & 0x01) | ((Config_ptr->address)<<1);
    34d2:	a2 e2       	ldi	r26, 0x22	; 34
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	e2 e2       	ldi	r30, 0x22	; 34
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	28 2f       	mov	r18, r24
    34de:	21 70       	andi	r18, 0x01	; 1
    34e0:	e9 81       	ldd	r30, Y+1	; 0x01
    34e2:	fa 81       	ldd	r31, Y+2	; 0x02
    34e4:	81 81       	ldd	r24, Z+1	; 0x01
    34e6:	88 2f       	mov	r24, r24
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	82 2b       	or	r24, r18
    34f0:	8c 93       	st	X, r24
	}
	/*
	 * Insert the pre-scaler, the other bits are Read only so equal operation doesn't
	 * affect them, what affect them if we wrote in a specific bit
	 */
	TWSR = (Config_ptr->prescaler);
    34f2:	a1 e2       	ldi	r26, 0x21	; 33
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e9 81       	ldd	r30, Y+1	; 0x01
    34f8:	fa 81       	ldd	r31, Y+2	; 0x02
    34fa:	80 81       	ld	r24, Z
    34fc:	8c 93       	st	X, r24

	/* Calculate the value of TWBR using the equation in the datasheet */
	TWBR = (((F_CPU/(Config_ptr->sclFrequency))- 16)/(2*(4^(Config_ptr->prescaler))));
    34fe:	cc 24       	eor	r12, r12
    3500:	dd 24       	eor	r13, r13
    3502:	68 94       	set
    3504:	c5 f8       	bld	r12, 5
    3506:	e9 81       	ldd	r30, Y+1	; 0x01
    3508:	fa 81       	ldd	r31, Y+2	; 0x02
    350a:	22 81       	ldd	r18, Z+2	; 0x02
    350c:	33 81       	ldd	r19, Z+3	; 0x03
    350e:	44 81       	ldd	r20, Z+4	; 0x04
    3510:	55 81       	ldd	r21, Z+5	; 0x05
    3512:	80 e4       	ldi	r24, 0x40	; 64
    3514:	92 e4       	ldi	r25, 0x42	; 66
    3516:	af e0       	ldi	r26, 0x0F	; 15
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__udivmodsi4>
    3522:	da 01       	movw	r26, r20
    3524:	c9 01       	movw	r24, r18
    3526:	0f 2e       	mov	r0, r31
    3528:	f0 ef       	ldi	r31, 0xF0	; 240
    352a:	ef 2e       	mov	r14, r31
    352c:	ff ef       	ldi	r31, 0xFF	; 255
    352e:	ff 2e       	mov	r15, r31
    3530:	ff ef       	ldi	r31, 0xFF	; 255
    3532:	0f 2f       	mov	r16, r31
    3534:	ff ef       	ldi	r31, 0xFF	; 255
    3536:	1f 2f       	mov	r17, r31
    3538:	f0 2d       	mov	r31, r0
    353a:	e8 0e       	add	r14, r24
    353c:	f9 1e       	adc	r15, r25
    353e:	0a 1f       	adc	r16, r26
    3540:	1b 1f       	adc	r17, r27
    3542:	e9 81       	ldd	r30, Y+1	; 0x01
    3544:	fa 81       	ldd	r31, Y+2	; 0x02
    3546:	90 81       	ld	r25, Z
    3548:	84 e0       	ldi	r24, 0x04	; 4
    354a:	89 27       	eor	r24, r25
    354c:	88 2f       	mov	r24, r24
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	9c 01       	movw	r18, r24
    3556:	44 27       	eor	r20, r20
    3558:	37 fd       	sbrc	r19, 7
    355a:	40 95       	com	r20
    355c:	54 2f       	mov	r21, r20
    355e:	c8 01       	movw	r24, r16
    3560:	b7 01       	movw	r22, r14
    3562:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__udivmodsi4>
    3566:	da 01       	movw	r26, r20
    3568:	c9 01       	movw	r24, r18
    356a:	f6 01       	movw	r30, r12
    356c:	80 83       	st	Z, r24

}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	df 90       	pop	r13
    3580:	cf 90       	pop	r12
    3582:	08 95       	ret

00003584 <TWI_start>:

void TWI_start(void)
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the start bit TWINT=1 to read it after the data is sent.
	 * send the start bit by TWSTA=1
	 * In order not to disable TWI by = , We enable it manually every step.
	 */

	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    358c:	e6 e5       	ldi	r30, 0x56	; 86
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	84 ea       	ldi	r24, 0xA4	; 164
    3592:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    3594:	e6 e5       	ldi	r30, 0x56	; 86
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	88 23       	and	r24, r24
    359c:	dc f7       	brge	.-10     	; 0x3594 <TWI_start+0x10>
}
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <TWI_stop>:

void TWI_stop(void)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    35ac:	e6 e5       	ldi	r30, 0x56	; 86
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	84 e9       	ldi	r24, 0x94	; 148
    35b2:	80 83       	st	Z, r24
}
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	0f 92       	push	r0
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    35c6:	e3 e2       	ldi	r30, 0x23	; 35
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    35ce:	e6 e5       	ldi	r30, 0x56	; 86
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	84 e8       	ldi	r24, 0x84	; 132
    35d4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    35d6:	e6 e5       	ldi	r30, 0x56	; 86
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	88 23       	and	r24, r24
    35de:	dc f7       	brge	.-10     	; 0x35d6 <TWI_writeByte+0x1c>
}
    35e0:	0f 90       	pop	r0
    35e2:	cf 91       	pop	r28
    35e4:	df 91       	pop	r29
    35e6:	08 95       	ret

000035e8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    35e8:	df 93       	push	r29
    35ea:	cf 93       	push	r28
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    35f0:	e6 e5       	ldi	r30, 0x56	; 86
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	84 ec       	ldi	r24, 0xC4	; 196
    35f6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    35f8:	e6 e5       	ldi	r30, 0x56	; 86
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	88 23       	and	r24, r24
    3600:	dc f7       	brge	.-10     	; 0x35f8 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    3602:	e3 e2       	ldi	r30, 0x23	; 35
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
}
    3608:	cf 91       	pop	r28
    360a:	df 91       	pop	r29
    360c:	08 95       	ret

0000360e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    360e:	df 93       	push	r29
    3610:	cf 93       	push	r28
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    3616:	e6 e5       	ldi	r30, 0x56	; 86
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	84 e8       	ldi	r24, 0x84	; 132
    361c:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    361e:	e6 e5       	ldi	r30, 0x56	; 86
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	88 23       	and	r24, r24
    3626:	dc f7       	brge	.-10     	; 0x361e <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    3628:	e3 e2       	ldi	r30, 0x23	; 35
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
}
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	0f 92       	push	r0
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    363e:	e1 e2       	ldi	r30, 0x21	; 33
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	88 7f       	andi	r24, 0xF8	; 248
    3646:	89 83       	std	Y+1, r24	; 0x01
	return status;
    3648:	89 81       	ldd	r24, Y+1	; 0x01
}
    364a:	0f 90       	pop	r0
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	00 d0       	rcall	.+0      	; 0x3658 <UART_init+0x6>
    3658:	00 d0       	rcall	.+0      	; 0x365a <UART_init+0x8>
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	9c 83       	std	Y+4, r25	; 0x04
    3660:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3662:	1a 82       	std	Y+2, r1	; 0x02
    3664:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3666:	eb e2       	ldi	r30, 0x2B	; 43
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	82 e0       	ldi	r24, 0x02	; 2
    366c:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Number of Bits using Dynamic Configuration
	 * RXB8 & TXB8 is used only for 9-bit data mode (when UCSZ2 = 1)
	 ***********************************************************************/ 

	UCSRB = (1<<RXEN) | (1<<TXEN); //| (1<<RXCIE);
    366e:	ea e2       	ldi	r30, 0x2A	; 42
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	88 e1       	ldi	r24, 0x18	; 24
    3674:	80 83       	st	Z, r24

	/*
	 * & with FB to clear UCSZ2 bit (bit2) and preserve the other bits.
	 * &(1<<2) to get the UCSZ2 bit without UCSZ1 & UCSZ0
	 */
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr ->data_bits) & (1<<2));
    3676:	aa e2       	ldi	r26, 0x2A	; 42
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	ea e2       	ldi	r30, 0x2A	; 42
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	98 2f       	mov	r25, r24
    3682:	9b 7f       	andi	r25, 0xFB	; 251
    3684:	eb 81       	ldd	r30, Y+3	; 0x03
    3686:	fc 81       	ldd	r31, Y+4	; 0x04
    3688:	84 81       	ldd	r24, Z+4	; 0x04
    368a:	84 70       	andi	r24, 0x04	; 4
    368c:	89 2b       	or	r24, r25
    368e:	8c 93       	st	X, r24

	/* Set RXB8 & TXB8 if we're operating 9-bits mode */
	if ( (Config_Ptr ->data_bits) & (1<<2))
    3690:	eb 81       	ldd	r30, Y+3	; 0x03
    3692:	fc 81       	ldd	r31, Y+4	; 0x04
    3694:	84 81       	ldd	r24, Z+4	; 0x04
    3696:	88 2f       	mov	r24, r24
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	84 70       	andi	r24, 0x04	; 4
    369c:	90 70       	andi	r25, 0x00	; 0
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	39 f0       	breq	.+14     	; 0x36b0 <UART_init+0x5e>
		{
			UCSRB |= (1<<RXB8) | (1<<TXB8);
    36a2:	aa e2       	ldi	r26, 0x2A	; 42
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	ea e2       	ldi	r30, 0x2A	; 42
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	83 60       	ori	r24, 0x03	; 3
    36ae:	8c 93       	st	X, r24
	 * UPM1:0  = Determine Number of parity bits using dynamic Configuration.
	 * USBS    = Determine Number of stop bits using dynamic configuration.
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    36b0:	e0 e4       	ldi	r30, 0x40	; 64
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 e8       	ldi	r24, 0x80	; 128
    36b6:	80 83       	st	Z, r24

	/*
	 * &0xCF to clear UPM1 (bit 5) & UPM2 (bit4) and preserve the other bits.
	 * <<4 to insert the parity bits in UMP1 & UMP2.
	 */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr ->parity)<<4);
    36b8:	a0 e4       	ldi	r26, 0x40	; 64
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e0 e4       	ldi	r30, 0x40	; 64
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	28 2f       	mov	r18, r24
    36c4:	2f 7c       	andi	r18, 0xCF	; 207
    36c6:	eb 81       	ldd	r30, Y+3	; 0x03
    36c8:	fc 81       	ldd	r31, Y+4	; 0x04
    36ca:	85 81       	ldd	r24, Z+5	; 0x05
    36cc:	88 2f       	mov	r24, r24
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	82 95       	swap	r24
    36d2:	92 95       	swap	r25
    36d4:	90 7f       	andi	r25, 0xF0	; 240
    36d6:	98 27       	eor	r25, r24
    36d8:	80 7f       	andi	r24, 0xF0	; 240
    36da:	98 27       	eor	r25, r24
    36dc:	82 2b       	or	r24, r18
    36de:	8c 93       	st	X, r24
	/*
	 * &0xF7 to clear USBS (bit 3) and preserve the other bits.
	 * <<3 to insert the stop bit in USBS
	 *
	 */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr ->stop)<<3);
    36e0:	a0 e4       	ldi	r26, 0x40	; 64
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e0 e4       	ldi	r30, 0x40	; 64
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	28 2f       	mov	r18, r24
    36ec:	27 7f       	andi	r18, 0xF7	; 247
    36ee:	eb 81       	ldd	r30, Y+3	; 0x03
    36f0:	fc 81       	ldd	r31, Y+4	; 0x04
    36f2:	86 81       	ldd	r24, Z+6	; 0x06
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	82 2b       	or	r24, r18
    3706:	8c 93       	st	X, r24
	 * &0xF9 to clear UCSZ0 (bit 1) & UCSZ1 (bit 2) and preserve the other bits.
	 * &0x03 to get UCSZ0 & UCSZ1 without UCSZ2.
	 * <<1 to insert the character size bits in UCSZ1 & UCSZ0.
	 *
	 */
	UCSRC = (UCSRC & 0xF9) | ( ((Config_Ptr ->data_bits)&0x03) <<1);
    3708:	a0 e4       	ldi	r26, 0x40	; 64
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	e0 e4       	ldi	r30, 0x40	; 64
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	28 2f       	mov	r18, r24
    3714:	29 7f       	andi	r18, 0xF9	; 249
    3716:	eb 81       	ldd	r30, Y+3	; 0x03
    3718:	fc 81       	ldd	r31, Y+4	; 0x04
    371a:	84 81       	ldd	r24, Z+4	; 0x04
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	83 70       	andi	r24, 0x03	; 3
    3722:	90 70       	andi	r25, 0x00	; 0
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	82 2b       	or	r24, r18
    372a:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->bitRate) * 8UL))) - 1);
    372c:	eb 81       	ldd	r30, Y+3	; 0x03
    372e:	fc 81       	ldd	r31, Y+4	; 0x04
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	a2 81       	ldd	r26, Z+2	; 0x02
    3736:	b3 81       	ldd	r27, Z+3	; 0x03
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	aa 1f       	adc	r26, r26
    373e:	bb 1f       	adc	r27, r27
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	aa 1f       	adc	r26, r26
    3746:	bb 1f       	adc	r27, r27
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	aa 1f       	adc	r26, r26
    374e:	bb 1f       	adc	r27, r27
    3750:	9c 01       	movw	r18, r24
    3752:	ad 01       	movw	r20, r26
    3754:	80 e4       	ldi	r24, 0x40	; 64
    3756:	92 e4       	ldi	r25, 0x42	; 66
    3758:	af e0       	ldi	r26, 0x0F	; 15
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	bc 01       	movw	r22, r24
    375e:	cd 01       	movw	r24, r26
    3760:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__udivmodsi4>
    3764:	da 01       	movw	r26, r20
    3766:	c9 01       	movw	r24, r18
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 * Example : 111100000000
	 * UBRRL is = 00000000
	 * UBRRH = 111100000000>>8 = xxxxxxxx1111
	 */
	UBRRH = ubrr_value>>8;
    376e:	e0 e4       	ldi	r30, 0x40	; 64
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
    3776:	89 2f       	mov	r24, r25
    3778:	99 27       	eor	r25, r25
    377a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    377c:	e9 e2       	ldi	r30, 0x29	; 41
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	80 83       	st	Z, r24
}
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	0f 92       	push	r0
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    379e:	eb e2       	ldi	r30, 0x2B	; 43
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	80 72       	andi	r24, 0x20	; 32
    37aa:	90 70       	andi	r25, 0x00	; 0
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	b9 f3       	breq	.-18     	; 0x379e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    37b0:	ec e2       	ldi	r30, 0x2C	; 44
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    37c8:	eb e2       	ldi	r30, 0x2B	; 43
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	88 23       	and	r24, r24
    37d0:	dc f7       	brge	.-10     	; 0x37c8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    37d2:	ec e2       	ldi	r30, 0x2C	; 44
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
}
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	00 d0       	rcall	.+0      	; 0x37e4 <UART_sendString+0x6>
    37e4:	0f 92       	push	r0
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	9b 83       	std	Y+3, r25	; 0x03
    37ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37ee:	19 82       	std	Y+1, r1	; 0x01
    37f0:	0e c0       	rjmp	.+28     	; 0x380e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	9b 81       	ldd	r25, Y+3	; 0x03
    37fc:	fc 01       	movw	r30, r24
    37fe:	e2 0f       	add	r30, r18
    3800:	f3 1f       	adc	r31, r19
    3802:	80 81       	ld	r24, Z
    3804:	0e 94 c9 1b 	call	0x3792	; 0x3792 <UART_sendByte>
		i++;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	8f 5f       	subi	r24, 0xFF	; 255
    380c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	fc 01       	movw	r30, r24
    381a:	e2 0f       	add	r30, r18
    381c:	f3 1f       	adc	r31, r19
    381e:	80 81       	ld	r24, Z
    3820:	88 23       	and	r24, r24
    3822:	39 f7       	brne	.-50     	; 0x37f2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	08 95       	ret

00003830 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	00 d0       	rcall	.+0      	; 0x383a <UART_receiveString+0xa>
    383a:	0f 92       	push	r0
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	9b 83       	std	Y+3, r25	; 0x03
    3842:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3844:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	9b 81       	ldd	r25, Y+3	; 0x03
    3850:	8c 01       	movw	r16, r24
    3852:	02 0f       	add	r16, r18
    3854:	13 1f       	adc	r17, r19
    3856:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
    385a:	f8 01       	movw	r30, r16
    385c:	80 83       	st	Z, r24
    385e:	0f c0       	rjmp	.+30     	; 0x387e <UART_receiveString+0x4e>
	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
	{
		i++;
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	8f 5f       	subi	r24, 0xFF	; 255
    3864:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	9b 81       	ldd	r25, Y+3	; 0x03
    3870:	8c 01       	movw	r16, r24
    3872:	02 0f       	add	r16, r18
    3874:	13 1f       	adc	r17, r19
    3876:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <UART_recieveByte>
    387a:	f8 01       	movw	r30, r16
    387c:	80 83       	st	Z, r24
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	fc 01       	movw	r30, r24
    388a:	e2 0f       	add	r30, r18
    388c:	f3 1f       	adc	r31, r19
    388e:	80 81       	ld	r24, Z
    3890:	83 32       	cpi	r24, 0x23	; 35
    3892:	31 f7       	brne	.-52     	; 0x3860 <UART_receiveString+0x30>
		Str[i] = UART_recieveByte();
	}
	/* Can be done by do while to receive the first byte safely */

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	28 2f       	mov	r18, r24
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	fc 01       	movw	r30, r24
    38a0:	e2 0f       	add	r30, r18
    38a2:	f3 1f       	adc	r31, r19
    38a4:	10 82       	st	Z, r1
}
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	08 95       	ret

000038b6 <__udivmodsi4>:
    38b6:	a1 e2       	ldi	r26, 0x21	; 33
    38b8:	1a 2e       	mov	r1, r26
    38ba:	aa 1b       	sub	r26, r26
    38bc:	bb 1b       	sub	r27, r27
    38be:	fd 01       	movw	r30, r26
    38c0:	0d c0       	rjmp	.+26     	; 0x38dc <__udivmodsi4_ep>

000038c2 <__udivmodsi4_loop>:
    38c2:	aa 1f       	adc	r26, r26
    38c4:	bb 1f       	adc	r27, r27
    38c6:	ee 1f       	adc	r30, r30
    38c8:	ff 1f       	adc	r31, r31
    38ca:	a2 17       	cp	r26, r18
    38cc:	b3 07       	cpc	r27, r19
    38ce:	e4 07       	cpc	r30, r20
    38d0:	f5 07       	cpc	r31, r21
    38d2:	20 f0       	brcs	.+8      	; 0x38dc <__udivmodsi4_ep>
    38d4:	a2 1b       	sub	r26, r18
    38d6:	b3 0b       	sbc	r27, r19
    38d8:	e4 0b       	sbc	r30, r20
    38da:	f5 0b       	sbc	r31, r21

000038dc <__udivmodsi4_ep>:
    38dc:	66 1f       	adc	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	88 1f       	adc	r24, r24
    38e2:	99 1f       	adc	r25, r25
    38e4:	1a 94       	dec	r1
    38e6:	69 f7       	brne	.-38     	; 0x38c2 <__udivmodsi4_loop>
    38e8:	60 95       	com	r22
    38ea:	70 95       	com	r23
    38ec:	80 95       	com	r24
    38ee:	90 95       	com	r25
    38f0:	9b 01       	movw	r18, r22
    38f2:	ac 01       	movw	r20, r24
    38f4:	bd 01       	movw	r22, r26
    38f6:	cf 01       	movw	r24, r30
    38f8:	08 95       	ret

000038fa <__prologue_saves__>:
    38fa:	2f 92       	push	r2
    38fc:	3f 92       	push	r3
    38fe:	4f 92       	push	r4
    3900:	5f 92       	push	r5
    3902:	6f 92       	push	r6
    3904:	7f 92       	push	r7
    3906:	8f 92       	push	r8
    3908:	9f 92       	push	r9
    390a:	af 92       	push	r10
    390c:	bf 92       	push	r11
    390e:	cf 92       	push	r12
    3910:	df 92       	push	r13
    3912:	ef 92       	push	r14
    3914:	ff 92       	push	r15
    3916:	0f 93       	push	r16
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	ca 1b       	sub	r28, r26
    3924:	db 0b       	sbc	r29, r27
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	09 94       	ijmp

00003932 <__epilogue_restores__>:
    3932:	2a 88       	ldd	r2, Y+18	; 0x12
    3934:	39 88       	ldd	r3, Y+17	; 0x11
    3936:	48 88       	ldd	r4, Y+16	; 0x10
    3938:	5f 84       	ldd	r5, Y+15	; 0x0f
    393a:	6e 84       	ldd	r6, Y+14	; 0x0e
    393c:	7d 84       	ldd	r7, Y+13	; 0x0d
    393e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3940:	9b 84       	ldd	r9, Y+11	; 0x0b
    3942:	aa 84       	ldd	r10, Y+10	; 0x0a
    3944:	b9 84       	ldd	r11, Y+9	; 0x09
    3946:	c8 84       	ldd	r12, Y+8	; 0x08
    3948:	df 80       	ldd	r13, Y+7	; 0x07
    394a:	ee 80       	ldd	r14, Y+6	; 0x06
    394c:	fd 80       	ldd	r15, Y+5	; 0x05
    394e:	0c 81       	ldd	r16, Y+4	; 0x04
    3950:	1b 81       	ldd	r17, Y+3	; 0x03
    3952:	aa 81       	ldd	r26, Y+2	; 0x02
    3954:	b9 81       	ldd	r27, Y+1	; 0x01
    3956:	ce 0f       	add	r28, r30
    3958:	d1 1d       	adc	r29, r1
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	ed 01       	movw	r28, r26
    3966:	08 95       	ret

00003968 <itoa>:
    3968:	fb 01       	movw	r30, r22
    396a:	9f 01       	movw	r18, r30
    396c:	e8 94       	clt
    396e:	42 30       	cpi	r20, 0x02	; 2
    3970:	c4 f0       	brlt	.+48     	; 0x39a2 <itoa+0x3a>
    3972:	45 32       	cpi	r20, 0x25	; 37
    3974:	b4 f4       	brge	.+44     	; 0x39a2 <itoa+0x3a>
    3976:	4a 30       	cpi	r20, 0x0A	; 10
    3978:	29 f4       	brne	.+10     	; 0x3984 <itoa+0x1c>
    397a:	97 fb       	bst	r25, 7
    397c:	1e f4       	brtc	.+6      	; 0x3984 <itoa+0x1c>
    397e:	90 95       	com	r25
    3980:	81 95       	neg	r24
    3982:	9f 4f       	sbci	r25, 0xFF	; 255
    3984:	64 2f       	mov	r22, r20
    3986:	77 27       	eor	r23, r23
    3988:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__udivmodhi4>
    398c:	80 5d       	subi	r24, 0xD0	; 208
    398e:	8a 33       	cpi	r24, 0x3A	; 58
    3990:	0c f0       	brlt	.+2      	; 0x3994 <itoa+0x2c>
    3992:	89 5d       	subi	r24, 0xD9	; 217
    3994:	81 93       	st	Z+, r24
    3996:	cb 01       	movw	r24, r22
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	a1 f7       	brne	.-24     	; 0x3984 <itoa+0x1c>
    399c:	16 f4       	brtc	.+4      	; 0x39a2 <itoa+0x3a>
    399e:	5d e2       	ldi	r21, 0x2D	; 45
    39a0:	51 93       	st	Z+, r21
    39a2:	10 82       	st	Z, r1
    39a4:	c9 01       	movw	r24, r18
    39a6:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <strrev>

000039aa <strrev>:
    39aa:	dc 01       	movw	r26, r24
    39ac:	fc 01       	movw	r30, r24
    39ae:	67 2f       	mov	r22, r23
    39b0:	71 91       	ld	r23, Z+
    39b2:	77 23       	and	r23, r23
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <strrev+0x4>
    39b6:	32 97       	sbiw	r30, 0x02	; 2
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <strrev+0x18>
    39ba:	7c 91       	ld	r23, X
    39bc:	6d 93       	st	X+, r22
    39be:	70 83       	st	Z, r23
    39c0:	62 91       	ld	r22, -Z
    39c2:	ae 17       	cp	r26, r30
    39c4:	bf 07       	cpc	r27, r31
    39c6:	c8 f3       	brcs	.-14     	; 0x39ba <strrev+0x10>
    39c8:	08 95       	ret

000039ca <__udivmodhi4>:
    39ca:	aa 1b       	sub	r26, r26
    39cc:	bb 1b       	sub	r27, r27
    39ce:	51 e1       	ldi	r21, 0x11	; 17
    39d0:	07 c0       	rjmp	.+14     	; 0x39e0 <__udivmodhi4_ep>

000039d2 <__udivmodhi4_loop>:
    39d2:	aa 1f       	adc	r26, r26
    39d4:	bb 1f       	adc	r27, r27
    39d6:	a6 17       	cp	r26, r22
    39d8:	b7 07       	cpc	r27, r23
    39da:	10 f0       	brcs	.+4      	; 0x39e0 <__udivmodhi4_ep>
    39dc:	a6 1b       	sub	r26, r22
    39de:	b7 0b       	sbc	r27, r23

000039e0 <__udivmodhi4_ep>:
    39e0:	88 1f       	adc	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	5a 95       	dec	r21
    39e6:	a9 f7       	brne	.-22     	; 0x39d2 <__udivmodhi4_loop>
    39e8:	80 95       	com	r24
    39ea:	90 95       	com	r25
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	08 95       	ret

000039f2 <_exit>:
    39f2:	f8 94       	cli

000039f4 <__stop_program>:
    39f4:	ff cf       	rjmp	.-2      	; 0x39f4 <__stop_program>
