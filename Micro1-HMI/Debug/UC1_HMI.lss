
UC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000030fa  0000318e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080012e  0080012e  0000325c  2**0
                  ALLOC
  3 .stab         000030c0  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019d6  00000000  00000000  0000631c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b884  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c43f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_3>
      10:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__vector_6>
      1c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_7>
      20:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__vector_8>
      24:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 11 	call	0x22ea	; 0x22ea <main>
      8a:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e0       	ldi	r26, 0x09	; 9
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e0       	ldi	r24, 0x09	; 9
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MICROCONTROLLER_init>:
/*******************************************************************************
 *                    		  Function Declarations                            *
 *******************************************************************************/

void MICROCONTROLLER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LCD_init>

	UART_ConfigType UART_configPtr = {UART_BIT_RATE_9600_BITS_PER_SECONDS,UART_EIGHT_BIT_DATA_MODE,UART_PARITY_DISABLED,UART_ONE_STOP_BIT};
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	99 87       	std	Y+9, r25	; 0x09
     b64:	88 87       	std	Y+8, r24	; 0x08
     b66:	e1 e1       	ldi	r30, 0x11	; 17
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	fb 87       	std	Y+11, r31	; 0x0b
     b6c:	ea 87       	std	Y+10, r30	; 0x0a
     b6e:	f7 e0       	ldi	r31, 0x07	; 7
     b70:	fc 87       	std	Y+12, r31	; 0x0c
     b72:	ea 85       	ldd	r30, Y+10	; 0x0a
     b74:	fb 85       	ldd	r31, Y+11	; 0x0b
     b76:	00 80       	ld	r0, Z
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8a 87       	std	Y+10, r24	; 0x0a
     b82:	e8 85       	ldd	r30, Y+8	; 0x08
     b84:	f9 85       	ldd	r31, Y+9	; 0x09
     b86:	00 82       	st	Z, r0
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	99 87       	std	Y+9, r25	; 0x09
     b90:	88 87       	std	Y+8, r24	; 0x08
     b92:	9c 85       	ldd	r25, Y+12	; 0x0c
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	ec 85       	ldd	r30, Y+12	; 0x0c
     b9a:	ee 23       	and	r30, r30
     b9c:	51 f7       	brne	.-44     	; 0xb72 <MICROCONTROLLER_init+0x2c>
	UART_init(&UART_configPtr);
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <UART_init>
}
     ba6:	2c 96       	adiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <APP_askForPasswordFirstTime>:


void APP_askForPasswordFirstTime(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	60 97       	sbiw	r28, 0x10	; 16
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     bcc:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     bce:	1f 86       	std	Y+15, r1	; 0x0f

	/* When called from New Password function */
	LCD_clearScreen();
     bd0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter New Pass:");
     bd4:	20 e6       	ldi	r18, 0x60	; 96
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_displayStringRowColumn>

	/* Move cursor to second line */
	LCD_moveCursor(1,0);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_moveCursor>

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(PASSWORD_UNCHECKED_FIRST_TIME);
     bea:	81 e2       	ldi	r24, 0x21	; 33
     bec:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     bf0:	87 c0       	rjmp	.+270    	; 0xd00 <APP_askForPasswordFirstTime+0x148>

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {

		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     bf2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <KEYPAD_getPressedKey>
     bf6:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ((g_keypad_button >= 0) && (g_keypad_button <=9))
     bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfa:	8a 30       	cpi	r24, 0x0A	; 10
     bfc:	38 f4       	brcc	.+14     	; 0xc0c <APP_askForPasswordFirstTime+0x54>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     c00:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>

			/* Display * for every character input */
			LCD_displayCharacter('*');
     c04:	8a e2       	ldi	r24, 0x2A	; 42
     c06:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayCharacter>
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <APP_askForPasswordFirstTime+0x64>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0e:	8d 30       	cpi	r24, 0x0D	; 13
     c10:	29 f4       	brne	.+10     	; 0xc1c <APP_askForPasswordFirstTime+0x64>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     c16:	8e e5       	ldi	r24, 0x5E	; 94
     c18:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e8       	ldi	r25, 0x80	; 128
     c20:	ab e3       	ldi	r26, 0x3B	; 59
     c22:	b5 e4       	ldi	r27, 0x45	; 69
     c24:	8b 87       	std	Y+11, r24	; 0x0b
     c26:	9c 87       	std	Y+12, r25	; 0x0c
     c28:	ad 87       	std	Y+13, r26	; 0x0d
     c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c30:	8d 85       	ldd	r24, Y+13	; 0x0d
     c32:	9e 85       	ldd	r25, Y+14	; 0x0e
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	53 e4       	ldi	r21, 0x43	; 67
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	8f 83       	std	Y+7, r24	; 0x07
     c46:	98 87       	std	Y+8, r25	; 0x08
     c48:	a9 87       	std	Y+9, r26	; 0x09
     c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c60:	88 23       	and	r24, r24
     c62:	2c f4       	brge	.+10     	; 0xc6e <APP_askForPasswordFirstTime+0xb6>
		__ticks = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <APP_askForPasswordFirstTime+0x134>
	else if (__tmp > 65535)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	4c f5       	brge	.+82     	; 0xcd8 <APP_askForPasswordFirstTime+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c86:	6b 85       	ldd	r22, Y+11	; 0x0b
     c88:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9e 83       	std	Y+6, r25	; 0x06
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	0f c0       	rjmp	.+30     	; 0xcce <APP_askForPasswordFirstTime+0x116>
     cb0:	89 e1       	ldi	r24, 0x19	; 25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <APP_askForPasswordFirstTime+0x104>
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <APP_askForPasswordFirstTime+0xf8>
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <APP_askForPasswordFirstTime+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd8:	6f 81       	ldd	r22, Y+7	; 0x07
     cda:	78 85       	ldd	r23, Y+8	; 0x08
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <APP_askForPasswordFirstTime+0x140>
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(PASSWORD_UNCHECKED_FIRST_TIME);

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
     d00:	88 89       	ldd	r24, Y+16	; 0x10
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <APP_askForPasswordFirstTime+0x150>
     d06:	75 cf       	rjmp	.-278    	; 0xbf2 <APP_askForPasswordFirstTime+0x3a>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
     d08:	60 96       	adiw	r28, 0x10	; 16
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <APP_confirmPasswordFirstTime>:

void APP_confirmPasswordFirstTime(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	60 97       	sbiw	r28, 0x10	; 16
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     d2e:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     d30:	1f 86       	std	Y+15, r1	; 0x0f

	/* Show once at first and move cursor to second line*/
	LCD_clearScreen();
     d32:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Pass:");
     d36:	20 e7       	ldi	r18, 0x70	; 112
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	a9 01       	movw	r20, r18
     d40:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_moveCursor>

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(SECOND_PASSWORD_UNCHECKED_FIRST_TIME);
     d4c:	89 e2       	ldi	r24, 0x29	; 41
     d4e:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     d52:	87 c0       	rjmp	.+270    	; 0xe62 <APP_confirmPasswordFirstTime+0x148>

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     d54:	0e 94 c1 0b 	call	0x1782	; 0x1782 <KEYPAD_getPressedKey>
     d58:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ((g_keypad_button >=0) && (g_keypad_button <=9))
     d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5c:	8a 30       	cpi	r24, 0x0A	; 10
     d5e:	38 f4       	brcc	.+14     	; 0xd6e <APP_confirmPasswordFirstTime+0x54>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     d60:	8f 85       	ldd	r24, Y+15	; 0x0f
     d62:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>

			/* Display * for every character input */
			LCD_displayCharacter('*');
     d66:	8a e2       	ldi	r24, 0x2A	; 42
     d68:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayCharacter>
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <APP_confirmPasswordFirstTime+0x64>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d70:	8d 30       	cpi	r24, 0x0D	; 13
     d72:	29 f4       	brne	.+10     	; 0xd7e <APP_confirmPasswordFirstTime+0x64>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     d78:	8e e5       	ldi	r24, 0x5E	; 94
     d7a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e8       	ldi	r25, 0x80	; 128
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b5 e4       	ldi	r27, 0x45	; 69
     d86:	8b 87       	std	Y+11, r24	; 0x0b
     d88:	9c 87       	std	Y+12, r25	; 0x0c
     d8a:	ad 87       	std	Y+13, r26	; 0x0d
     d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d90:	7c 85       	ldd	r23, Y+12	; 0x0c
     d92:	8d 85       	ldd	r24, Y+13	; 0x0d
     d94:	9e 85       	ldd	r25, Y+14	; 0x0e
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	4a e7       	ldi	r20, 0x7A	; 122
     d9c:	53 e4       	ldi	r21, 0x43	; 67
     d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	8f 83       	std	Y+7, r24	; 0x07
     da8:	98 87       	std	Y+8, r25	; 0x08
     daa:	a9 87       	std	Y+9, r26	; 0x09
     dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dae:	6f 81       	ldd	r22, Y+7	; 0x07
     db0:	78 85       	ldd	r23, Y+8	; 0x08
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	9a 85       	ldd	r25, Y+10	; 0x0a
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e8       	ldi	r20, 0x80	; 128
     dbc:	5f e3       	ldi	r21, 0x3F	; 63
     dbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <APP_confirmPasswordFirstTime+0xb6>
		__ticks = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	3f c0       	rjmp	.+126    	; 0xe4e <APP_confirmPasswordFirstTime+0x134>
	else if (__tmp > 65535)
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	3f ef       	ldi	r19, 0xFF	; 255
     ddc:	4f e7       	ldi	r20, 0x7F	; 127
     dde:	57 e4       	ldi	r21, 0x47	; 71
     de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de4:	18 16       	cp	r1, r24
     de6:	4c f5       	brge	.+82     	; 0xe3a <APP_confirmPasswordFirstTime+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dea:	7c 85       	ldd	r23, Y+12	; 0x0c
     dec:	8d 85       	ldd	r24, Y+13	; 0x0d
     dee:	9e 85       	ldd	r25, Y+14	; 0x0e
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	51 e4       	ldi	r21, 0x41	; 65
     df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <APP_confirmPasswordFirstTime+0x116>
     e12:	89 e1       	ldi	r24, 0x19	; 25
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9c 83       	std	Y+4, r25	; 0x04
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <APP_confirmPasswordFirstTime+0x104>
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f7       	brne	.-38     	; 0xe12 <APP_confirmPasswordFirstTime+0xf8>
     e38:	14 c0       	rjmp	.+40     	; 0xe62 <APP_confirmPasswordFirstTime+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <APP_confirmPasswordFirstTime+0x140>
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(SECOND_PASSWORD_UNCHECKED_FIRST_TIME);

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
     e62:	88 89       	ldd	r24, Y+16	; 0x10
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <APP_confirmPasswordFirstTime+0x150>
     e68:	75 cf       	rjmp	.-278    	; 0xd54 <APP_confirmPasswordFirstTime+0x3a>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
     e6a:	60 96       	adiw	r28, 0x10	; 16
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <APP_askForPassword>:

void APP_askForPassword(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	60 97       	sbiw	r28, 0x10	; 16
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     e90:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     e92:	1f 86       	std	Y+15, r1	; 0x0f

	/* Show once at first */
	LCD_clearScreen();
     e94:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass:");
     e98:	2f e7       	ldi	r18, 0x7F	; 127
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_displayStringRowColumn>

	/* Move cursor to second line */
	LCD_moveCursor(1,0);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_moveCursor>

	if (g_change ==0)
     eae:	80 91 2f 01 	lds	r24, 0x012F
     eb2:	88 23       	and	r24, r24
     eb4:	21 f4       	brne	.+8      	; 0xebe <APP_askForPassword+0x42>
	{
		/* Sends to Micro2 to be prepared to receive first time password */
		UART_sendByte(PASSWORD_UNCHECKED_FOR_DOOR);
     eb6:	8b e4       	ldi	r24, 0x4B	; 75
     eb8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     ebc:	98 c0       	rjmp	.+304    	; 0xfee <APP_askForPassword+0x172>
	}
	else if (g_change ==1)
     ebe:	80 91 2f 01 	lds	r24, 0x012F
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	21 f4       	brne	.+8      	; 0xece <APP_askForPassword+0x52>
	{
		UART_sendByte(PASSWORD_UNCHECKED_FOR_CHANGE);
     ec6:	8d e4       	ldi	r24, 0x4D	; 77
     ec8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     ecc:	90 c0       	rjmp	.+288    	; 0xfee <APP_askForPassword+0x172>
	}
	else if (g_change ==2)
     ece:	80 91 2f 01 	lds	r24, 0x012F
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	09 f0       	breq	.+2      	; 0xed8 <APP_askForPassword+0x5c>
     ed6:	8b c0       	rjmp	.+278    	; 0xfee <APP_askForPassword+0x172>
	{
		UART_sendByte(PASSWORD_UNCHECKED_LOGIN);
     ed8:	8c e4       	ldi	r24, 0x4C	; 76
     eda:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     ede:	87 c0       	rjmp	.+270    	; 0xfee <APP_askForPassword+0x172>
	}
	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {

		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     ee0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <KEYPAD_getPressedKey>
     ee4:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ((g_keypad_button >= 0) && (g_keypad_button <=9))
     ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee8:	8a 30       	cpi	r24, 0x0A	; 10
     eea:	38 f4       	brcc	.+14     	; 0xefa <APP_askForPassword+0x7e>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>

//			LCD_intgerToString(g_keypad_button);
			/* Display * for every character input */
			LCD_displayCharacter('*');
     ef2:	8a e2       	ldi	r24, 0x2A	; 42
     ef4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayCharacter>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <APP_askForPassword+0x8e>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     efa:	8f 85       	ldd	r24, Y+15	; 0x0f
     efc:	8d 30       	cpi	r24, 0x0D	; 13
     efe:	29 f4       	brne	.+10     	; 0xf0a <APP_askForPassword+0x8e>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     f04:	8e e5       	ldi	r24, 0x5E	; 94
     f06:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e8       	ldi	r25, 0x80	; 128
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b5 e4       	ldi	r27, 0x45	; 69
     f12:	8b 87       	std	Y+11, r24	; 0x0b
     f14:	9c 87       	std	Y+12, r25	; 0x0c
     f16:	ad 87       	std	Y+13, r26	; 0x0d
     f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a e7       	ldi	r20, 0x7A	; 122
     f28:	53 e4       	ldi	r21, 0x43	; 67
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	a9 87       	std	Y+9, r26	; 0x09
     f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f4e:	88 23       	and	r24, r24
     f50:	2c f4       	brge	.+10     	; 0xf5c <APP_askForPassword+0xe0>
		__ticks = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <APP_askForPassword+0x15e>
	else if (__tmp > 65535)
     f5c:	6f 81       	ldd	r22, Y+7	; 0x07
     f5e:	78 85       	ldd	r23, Y+8	; 0x08
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	4c f5       	brge	.+82     	; 0xfc6 <APP_askForPassword+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <APP_askForPassword+0x140>
     f9e:	89 e1       	ldi	r24, 0x19	; 25
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <APP_askForPassword+0x12e>
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	69 f7       	brne	.-38     	; 0xf9e <APP_askForPassword+0x122>
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <APP_askForPassword+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	78 85       	ldd	r23, Y+8	; 0x08
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <APP_askForPassword+0x16a>
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
	else if (g_change ==2)
	{
		UART_sendByte(PASSWORD_UNCHECKED_LOGIN);
	}
	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
     fee:	88 89       	ldd	r24, Y+16	; 0x10
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <APP_askForPassword+0x17a>
     ff4:	75 cf       	rjmp	.-278    	; 0xee0 <APP_askForPassword+0x64>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
     ff6:	60 96       	adiw	r28, 0x10	; 16
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <APP_getNewPassword>:


/* Function that get the password and its confirmation */
void APP_getNewPassword (void)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62

	/* Get a password for the first time */
	APP_askForPasswordFirstTime();
    1010:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <APP_askForPasswordFirstTime>

	/* Get a confirmation password */
	APP_confirmPasswordFirstTime();
    1014:	0e 94 8d 06 	call	0xd1a	; 0xd1a <APP_confirmPasswordFirstTime>

}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <APP_mainMenu>:

void APP_mainMenu(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	/* To get the pressed button */
	uint8 keypad_button = 0;
    1028:	19 82       	std	Y+1, r1	; 0x01

	/* Screen commands */
	LCD_clearScreen();
    102a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    102e:	8b e8       	ldi	r24, 0x8B	; 139
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1036:	29 e9       	ldi	r18, 0x99	; 153
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_displayStringRowColumn>

	UART_sendByte(APP_mainMenuCheck);
    1044:	8b e7       	ldi	r24, 0x7B	; 123
    1046:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>

	/* Get key from user */
	keypad_button= KEYPAD_getPressedKey();
    104a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <KEYPAD_getPressedKey>
    104e:	89 83       	std	Y+1, r24	; 0x01
	//	LCD_displayCharacter(keypad_button);

	/* Send the choice of user */
	UART_sendByte(keypad_button);
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>

}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <APP_doorProcessing>:

void APP_doorProcessing(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    1066:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	APP_startTimer_3Sec();
    106a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <APP_startTimer_3Sec>


	LCD_displayString("Door is Opening");
    106e:	89 ea       	ldi	r24, 0xA9	; 169
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
	/* Must call APP_startTimer_3Sec before to identify g_tick every 3 sec */
	/* Delay for 15 second */
	while (g_tick !=5);
    1076:	80 91 36 01 	lds	r24, 0x0136
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	e1 f7       	brne	.-8      	; 0x1076 <APP_doorProcessing+0x18>
	g_tick = 0;
    107e:	10 92 36 01 	sts	0x0136, r1

	/* Delay for 3 second */
	LCD_clearScreen();
    1082:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayString("Stop");
    1086:	89 eb       	ldi	r24, 0xB9	; 185
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
	while (g_tick !=1);
    108e:	80 91 36 01 	lds	r24, 0x0136
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	e1 f7       	brne	.-8      	; 0x108e <APP_doorProcessing+0x30>
	g_tick = 0;
    1096:	10 92 36 01 	sts	0x0136, r1

	/* Delay for 15 second */
	LCD_clearScreen();
    109a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayString("Door is Closing");
    109e:	8e eb       	ldi	r24, 0xBE	; 190
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
	while (g_tick !=5);
    10a6:	80 91 36 01 	lds	r24, 0x0136
    10aa:	85 30       	cpi	r24, 0x05	; 5
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <APP_doorProcessing+0x48>
	g_tick=0;
    10ae:	10 92 36 01 	sts	0x0136, r1

	TIMER_DeInit(TIMER1_ID);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER_DeInit>

}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <APP_invalidInput>:

void APP_invalidInput(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    10c6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayString("INVALID INPUT");
    10ca:	8e ec       	ldi	r24, 0xCE	; 206
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>

	/* Delay for 1 sec */
	APP_startTimer_1Sec();
    10d2:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <APP_startTimer_1Sec>
	APP_Timer1DelayForScreenCheck();
    10d6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <APP_Timer1DelayForScreenCheck>

}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <APP_wrongPassword>:

void APP_wrongPassword(void)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    10e8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
	LCD_displayString("WRONG PASSWORD");
    10ec:	8c ed       	ldi	r24, 0xDC	; 220
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>

	/* Delay for 1 sec */
	APP_startTimer_6Sec();
    10f4:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <APP_startTimer_6Sec>
	APP_Timer1DelayForBuzzerCheck();
    10f8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <APP_Timer1DelayForBuzzerCheck>

	/* Show menu */
	APP_mainMenu();
    10fc:	0e 94 0f 08 	call	0x101e	; 0x101e <APP_mainMenu>

}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <GPIO_setupPinDirection+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <GPIO_setupPinDirection+0x8>
    110e:	0f 92       	push	r0
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	6a 83       	std	Y+2, r22	; 0x02
    1118:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	88 30       	cpi	r24, 0x08	; 8
    111e:	08 f0       	brcs	.+2      	; 0x1122 <GPIO_setupPinDirection+0x1c>
    1120:	d5 c0       	rjmp	.+426    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	08 f0       	brcs	.+2      	; 0x112a <GPIO_setupPinDirection+0x24>
    1128:	d1 c0       	rjmp	.+418    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3d 83       	std	Y+5, r19	; 0x05
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <GPIO_setupPinDirection+0x3a>
    113e:	43 c0       	rjmp	.+134    	; 0x11c6 <GPIO_setupPinDirection+0xc0>
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <GPIO_setupPinDirection+0x4e>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	71 f0       	breq	.+28     	; 0x116e <GPIO_setupPinDirection+0x68>
    1152:	bc c0       	rjmp	.+376    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <GPIO_setupPinDirection+0x5a>
    115e:	5f c0       	rjmp	.+190    	; 0x121e <GPIO_setupPinDirection+0x118>
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	91 05       	cpc	r25, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <GPIO_setupPinDirection+0x66>
    116a:	85 c0       	rjmp	.+266    	; 0x1276 <GPIO_setupPinDirection+0x170>
    116c:	af c0       	rjmp	.+350    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1174:	aa e3       	ldi	r26, 0x3A	; 58
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ea e3       	ldi	r30, 0x3A	; 58
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_setupPinDirection+0x8c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_setupPinDirection+0x88>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	98 c0       	rjmp	.+304    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_setupPinDirection+0xb4>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_setupPinDirection+0xb0>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	83 c0       	rjmp	.+262    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11cc:	a7 e3       	ldi	r26, 0x37	; 55
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_setupPinDirection+0xe4>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_setupPinDirection+0xe0>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	6c c0       	rjmp	.+216    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11f4:	a7 e3       	ldi	r26, 0x37	; 55
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e7 e3       	ldi	r30, 0x37	; 55
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_setupPinDirection+0x10c>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_setupPinDirection+0x108>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	57 c0       	rjmp	.+174    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	a1 f4       	brne	.+40     	; 0x124c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1224:	a4 e3       	ldi	r26, 0x34	; 52
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e4 e3       	ldi	r30, 0x34	; 52
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_setupPinDirection+0x13c>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_setupPinDirection+0x138>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	40 c0       	rjmp	.+128    	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    124c:	a4 e3       	ldi	r26, 0x34	; 52
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e4 e3       	ldi	r30, 0x34	; 52
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_setupPinDirection+0x164>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_setupPinDirection+0x160>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	2b c0       	rjmp	.+86     	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    127c:	a1 e3       	ldi	r26, 0x31	; 49
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_setupPinDirection+0x194>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_setupPinDirection+0x190>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12a4:	a1 e3       	ldi	r26, 0x31	; 49
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e1 e3       	ldi	r30, 0x31	; 49
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_setupPinDirection+0x1bc>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_setupPinDirection+0x1b8>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_writePin+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <GPIO_writePin+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
    12ee:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	85 30       	cpi	r24, 0x05	; 5
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <GPIO_writePin+0x1c>
    12f6:	d5 c0       	rjmp	.+426    	; 0x14a2 <GPIO_writePin+0x1c6>
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	89 30       	cpi	r24, 0x09	; 9
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <GPIO_writePin+0x24>
    12fe:	d1 c0       	rjmp	.+418    	; 0x14a2 <GPIO_writePin+0x1c6>
		/* Do nothing */
	}
	else
	{
		/* Write pin value as wanted */
		switch (port_num)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <GPIO_writePin+0x3a>
    1314:	43 c0       	rjmp	.+134    	; 0x139c <GPIO_writePin+0xc0>
    1316:	2c 81       	ldd	r18, Y+4	; 0x04
    1318:	3d 81       	ldd	r19, Y+5	; 0x05
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <GPIO_writePin+0x4e>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	71 f0       	breq	.+28     	; 0x1344 <GPIO_writePin+0x68>
    1328:	bc c0       	rjmp	.+376    	; 0x14a2 <GPIO_writePin+0x1c6>
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <GPIO_writePin+0x5a>
    1334:	5f c0       	rjmp	.+190    	; 0x13f4 <GPIO_writePin+0x118>
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <GPIO_writePin+0x66>
    1340:	85 c0       	rjmp	.+266    	; 0x144c <GPIO_writePin+0x170>
    1342:	af c0       	rjmp	.+350    	; 0x14a2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_writePin+0x8c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_writePin+0x88>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	98 c0       	rjmp	.+304    	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1372:	ab e3       	ldi	r26, 0x3B	; 59
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	eb e3       	ldi	r30, 0x3B	; 59
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_writePin+0xb4>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_writePin+0xb0>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	83 c0       	rjmp	.+262    	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13a2:	a8 e3       	ldi	r26, 0x38	; 56
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_writePin+0xe4>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_writePin+0xe0>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	6c c0       	rjmp	.+216    	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13ca:	a8 e3       	ldi	r26, 0x38	; 56
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e8 e3       	ldi	r30, 0x38	; 56
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_writePin+0x10c>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_writePin+0x108>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	57 c0       	rjmp	.+174    	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13fa:	a5 e3       	ldi	r26, 0x35	; 53
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e3       	ldi	r30, 0x35	; 53
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_writePin+0x13c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_writePin+0x138>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	40 c0       	rjmp	.+128    	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1422:	a5 e3       	ldi	r26, 0x35	; 53
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e3       	ldi	r30, 0x35	; 53
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_writePin+0x164>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_writePin+0x160>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	2b c0       	rjmp	.+86     	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1452:	a2 e3       	ldi	r26, 0x32	; 50
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_writePin+0x194>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_writePin+0x190>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    147a:	a2 e3       	ldi	r26, 0x32	; 50
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_writePin+0x1bc>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_writePin+0x1b8>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_readPin+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_readPin+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW; /* To hold the pin_value in order not to do switch cases with mulitple returns within it */
    14c4:	19 82       	std	Y+1, r1	; 0x01
	if (pin_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS )
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <GPIO_readPin+0x1c>
    14cc:	84 c0       	rjmp	.+264    	; 0x15d6 <GPIO_readPin+0x124>
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <GPIO_readPin+0x24>
    14d4:	80 c0       	rjmp	.+256    	; 0x15d6 <GPIO_readPin+0x124>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3d 83       	std	Y+5, r19	; 0x05
    14de:	2c 83       	std	Y+4, r18	; 0x04
    14e0:	4c 81       	ldd	r20, Y+4	; 0x04
    14e2:	5d 81       	ldd	r21, Y+5	; 0x05
    14e4:	41 30       	cpi	r20, 0x01	; 1
    14e6:	51 05       	cpc	r21, r1
    14e8:	79 f1       	breq	.+94     	; 0x1548 <GPIO_readPin+0x96>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	34 f4       	brge	.+12     	; 0x1500 <GPIO_readPin+0x4e>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	21 15       	cp	r18, r1
    14fa:	31 05       	cpc	r19, r1
    14fc:	69 f0       	breq	.+26     	; 0x1518 <GPIO_readPin+0x66>
    14fe:	6b c0       	rjmp	.+214    	; 0x15d6 <GPIO_readPin+0x124>
    1500:	4c 81       	ldd	r20, Y+4	; 0x04
    1502:	5d 81       	ldd	r21, Y+5	; 0x05
    1504:	42 30       	cpi	r20, 0x02	; 2
    1506:	51 05       	cpc	r21, r1
    1508:	b9 f1       	breq	.+110    	; 0x1578 <GPIO_readPin+0xc6>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	91 05       	cpc	r25, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <GPIO_readPin+0x64>
    1514:	49 c0       	rjmp	.+146    	; 0x15a8 <GPIO_readPin+0xf6>
    1516:	5f c0       	rjmp	.+190    	; 0x15d6 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num)) /* Note that we read from the PIN not the PORT */
    1518:	e9 e3       	ldi	r30, 0x39	; 57
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a9 01       	movw	r20, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <GPIO_readPin+0x7e>
    152c:	55 95       	asr	r21
    152e:	47 95       	ror	r20
    1530:	8a 95       	dec	r24
    1532:	e2 f7       	brpl	.-8      	; 0x152c <GPIO_readPin+0x7a>
    1534:	ca 01       	movw	r24, r20
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	90 70       	andi	r25, 0x00	; 0
    153a:	88 23       	and	r24, r24
    153c:	19 f0       	breq	.+6      	; 0x1544 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	49 c0       	rjmp	.+146    	; 0x15d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1544:	19 82       	std	Y+1, r1	; 0x01
    1546:	47 c0       	rjmp	.+142    	; 0x15d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    1548:	e6 e3       	ldi	r30, 0x36	; 54
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a9 01       	movw	r20, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <GPIO_readPin+0xae>
    155c:	55 95       	asr	r21
    155e:	47 95       	ror	r20
    1560:	8a 95       	dec	r24
    1562:	e2 f7       	brpl	.-8      	; 0x155c <GPIO_readPin+0xaa>
    1564:	ca 01       	movw	r24, r20
    1566:	81 70       	andi	r24, 0x01	; 1
    1568:	90 70       	andi	r25, 0x00	; 0
    156a:	88 23       	and	r24, r24
    156c:	19 f0       	breq	.+6      	; 0x1574 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	31 c0       	rjmp	.+98     	; 0x15d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	2f c0       	rjmp	.+94     	; 0x15d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    1578:	e3 e3       	ldi	r30, 0x33	; 51
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_readPin+0xde>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_readPin+0xda>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	88 23       	and	r24, r24
    159c:	19 f0       	breq	.+6      	; 0x15a4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	19 c0       	rjmp	.+50     	; 0x15d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15a4:	19 82       	std	Y+1, r1	; 0x01
    15a6:	17 c0       	rjmp	.+46     	; 0x15d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    15a8:	e0 e3       	ldi	r30, 0x30	; 48
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a9 01       	movw	r20, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_readPin+0x10e>
    15bc:	55 95       	asr	r21
    15be:	47 95       	ror	r20
    15c0:	8a 95       	dec	r24
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_readPin+0x10a>
    15c4:	ca 01       	movw	r24, r20
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	90 70       	andi	r25, 0x00	; 0
    15ca:	88 23       	and	r24, r24
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15d4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_setupPortDirection+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <GPIO_setupPortDirection+0x8>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	90 f5       	brcc	.+100    	; 0x1662 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3c 83       	std	Y+4, r19	; 0x04
    1606:	2b 83       	std	Y+3, r18	; 0x03
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	d1 f0       	breq	.+52     	; 0x1646 <GPIO_setupPortDirection+0x5e>
    1612:	2b 81       	ldd	r18, Y+3	; 0x03
    1614:	3c 81       	ldd	r19, Y+4	; 0x04
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	2c f4       	brge	.+10     	; 0x1626 <GPIO_setupPortDirection+0x3e>
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 f0       	breq	.+24     	; 0x163c <GPIO_setupPortDirection+0x54>
    1624:	1e c0       	rjmp	.+60     	; 0x1662 <GPIO_setupPortDirection+0x7a>
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <GPIO_setupPortDirection+0x68>
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <GPIO_setupPortDirection+0x72>
    163a:	13 c0       	rjmp	.+38     	; 0x1662 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    163c:	ea e3       	ldi	r30, 0x3A	; 58
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1646:	e7 e3       	ldi	r30, 0x37	; 55
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1650:	e4 e3       	ldi	r30, 0x34	; 52
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    165a:	e1 e3       	ldi	r30, 0x31	; 49
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	80 83       	st	Z, r24
			break;
		}
	}
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_writePort+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <GPIO_writePort+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	90 f5       	brcc	.+100    	; 0x16ea <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3c 83       	std	Y+4, r19	; 0x04
    168e:	2b 83       	std	Y+3, r18	; 0x03
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	d1 f0       	breq	.+52     	; 0x16ce <GPIO_writePort+0x5e>
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	2c f4       	brge	.+10     	; 0x16ae <GPIO_writePort+0x3e>
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	61 f0       	breq	.+24     	; 0x16c4 <GPIO_writePort+0x54>
    16ac:	1e c0       	rjmp	.+60     	; 0x16ea <GPIO_writePort+0x7a>
    16ae:	2b 81       	ldd	r18, Y+3	; 0x03
    16b0:	3c 81       	ldd	r19, Y+4	; 0x04
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	81 f0       	breq	.+32     	; 0x16d8 <GPIO_writePort+0x68>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <GPIO_writePort+0x72>
    16c2:	13 c0       	rjmp	.+38     	; 0x16ea <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    16ce:	e8 e3       	ldi	r30, 0x38	; 56
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 83       	st	Z, r24
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 83       	st	Z, r24
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    16e2:	e2 e3       	ldi	r30, 0x32	; 50
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <GPIO_readPort+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <GPIO_readPort+0x8>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1706:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS)
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	90 f5       	brcc	.+100    	; 0x1772 <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3c 83       	std	Y+4, r19	; 0x04
    1716:	2b 83       	std	Y+3, r18	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	d1 f0       	breq	.+52     	; 0x1756 <GPIO_readPort+0x5e>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	2c f4       	brge	.+10     	; 0x1736 <GPIO_readPort+0x3e>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	61 f0       	breq	.+24     	; 0x174c <GPIO_readPort+0x54>
    1734:	1e c0       	rjmp	.+60     	; 0x1772 <GPIO_readPort+0x7a>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	81 f0       	breq	.+32     	; 0x1760 <GPIO_readPort+0x68>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <GPIO_readPort+0x72>
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			port_value = PINA;
    174c:	e9 e3       	ldi	r30, 0x39	; 57
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			port_value = PINB;
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			port_value = PINC;
    1760:	e3 e3       	ldi	r30, 0x33	; 51
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			port_value = PIND;
    176a:	e0 e3       	ldi	r30, 0x30	; 48
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <KEYPAD_getPressedKey+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    178e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1790:	1b 82       	std	Y+3, r1	; 0x03
    1792:	43 c0       	rjmp	.+134    	; 0x181a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	98 2f       	mov	r25, r24
    17a0:	9c 5f       	subi	r25, 0xFC	; 252
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	69 2f       	mov	r22, r25
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 83 08 	call	0x1106	; 0x1106 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9c 01       	movw	r18, r24
    17b4:	2c 5f       	subi	r18, 0xFC	; 252
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <KEYPAD_getPressedKey+0x40>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	2a 95       	dec	r18
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <KEYPAD_getPressedKey+0x3c>
    17c6:	80 95       	com	r24
    17c8:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17d2:	1a 82       	std	Y+2, r1	; 0x02
    17d4:	1c c0       	rjmp	.+56     	; 0x180e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	6a 81       	ldd	r22, Y+2	; 0x02
    17da:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <GPIO_readPin>
    17de:	88 23       	and	r24, r24
    17e0:	99 f4       	brne	.+38     	; 0x1808 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	98 2f       	mov	r25, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	89 0f       	add	r24, r25
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	0e 94 12 0c 	call	0x1824	; 0x1824 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	08 f3       	brcs	.-62     	; 0x17d6 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	08 f4       	brcc	.+2      	; 0x1822 <KEYPAD_getPressedKey+0xa0>
    1820:	b9 cf       	rjmp	.-142    	; 0x1794 <KEYPAD_getPressedKey+0x12>
    1822:	b6 cf       	rjmp	.-148    	; 0x1790 <KEYPAD_getPressedKey+0xe>

00001824 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <KEYPAD_4x4_adjustKeyNumber+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1832:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1848:	70 c0       	rjmp	.+224    	; 0x192a <KEYPAD_4x4_adjustKeyNumber+0x106>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	29 30       	cpi	r18, 0x09	; 9
    1850:	31 05       	cpc	r19, r1
    1852:	5c f5       	brge	.+86     	; 0x18aa <KEYPAD_4x4_adjustKeyNumber+0x86>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    185e:	59 c0       	rjmp	.+178    	; 0x1912 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	25 30       	cpi	r18, 0x05	; 5
    1866:	31 05       	cpc	r19, r1
    1868:	9c f4       	brge	.+38     	; 0x1890 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1874:	48 c0       	rjmp	.+144    	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	23 30       	cpi	r18, 0x03	; 3
    187c:	31 05       	cpc	r19, r1
    187e:	0c f0       	brlt	.+2      	; 0x1882 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1880:	45 c0       	rjmp	.+138    	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    188c:	39 c0       	rjmp	.+114    	; 0x1900 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    188e:	67 c0       	rjmp	.+206    	; 0x195e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1890:	2b 81       	ldd	r18, Y+3	; 0x03
    1892:	3c 81       	ldd	r19, Y+4	; 0x04
    1894:	26 30       	cpi	r18, 0x06	; 6
    1896:	31 05       	cpc	r19, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <KEYPAD_4x4_adjustKeyNumber+0x78>
    189a:	41 c0       	rjmp	.+130    	; 0x191e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	87 30       	cpi	r24, 0x07	; 7
    18a2:	91 05       	cpc	r25, r1
    18a4:	0c f0       	brlt	.+2      	; 0x18a8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    18a6:	3e c0       	rjmp	.+124    	; 0x1924 <KEYPAD_4x4_adjustKeyNumber+0x100>
    18a8:	37 c0       	rjmp	.+110    	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	2c 30       	cpi	r18, 0x0C	; 12
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    18b4:	46 c0       	rjmp	.+140    	; 0x1942 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	8d 30       	cpi	r24, 0x0D	; 13
    18bc:	91 05       	cpc	r25, r1
    18be:	5c f4       	brge	.+22     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	2a 30       	cpi	r18, 0x0A	; 10
    18c6:	31 05       	cpc	r19, r1
    18c8:	b1 f1       	breq	.+108    	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0x112>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	8b 30       	cpi	r24, 0x0B	; 11
    18d0:	91 05       	cpc	r25, r1
    18d2:	a4 f5       	brge	.+104    	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0x118>
    18d4:	2d c0       	rjmp	.+90     	; 0x1930 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	2e 30       	cpi	r18, 0x0E	; 14
    18dc:	31 05       	cpc	r19, r1
    18de:	b9 f1       	breq	.+110    	; 0x194e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	8e 30       	cpi	r24, 0x0E	; 14
    18e6:	91 05       	cpc	r25, r1
    18e8:	7c f1       	brlt	.+94     	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x124>
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	2f 30       	cpi	r18, 0x0F	; 15
    18f0:	31 05       	cpc	r19, r1
    18f2:	79 f1       	breq	.+94     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	80 31       	cpi	r24, 0x10	; 16
    18fa:	91 05       	cpc	r25, r1
    18fc:	69 f1       	breq	.+90     	; 0x1958 <KEYPAD_4x4_adjustKeyNumber+0x134>
    18fe:	2f c0       	rjmp	.+94     	; 0x195e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1900:	87 e0       	ldi	r24, 0x07	; 7
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	2e c0       	rjmp	.+92     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1906:	88 e0       	ldi	r24, 0x08	; 8
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	2b c0       	rjmp	.+86     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    190c:	89 e0       	ldi	r24, 0x09	; 9
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	28 c0       	rjmp	.+80     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1912:	85 e2       	ldi	r24, 0x25	; 37
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	25 c0       	rjmp	.+74     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	22 c0       	rjmp	.+68     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    191e:	85 e0       	ldi	r24, 0x05	; 5
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	1f c0       	rjmp	.+62     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1924:	86 e0       	ldi	r24, 0x06	; 6
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	1c c0       	rjmp	.+56     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    192a:	8a e2       	ldi	r24, 0x2A	; 42
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	19 c0       	rjmp	.+50     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	10 c0       	rjmp	.+32     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1942:	8d e2       	ldi	r24, 0x2D	; 45
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1948:	8d e0       	ldi	r24, 0x0D	; 13
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	0a c0       	rjmp	.+20     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    194e:	19 82       	std	Y+1, r1	; 0x01
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1952:	8d e3       	ldi	r24, 0x3D	; 61
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1958:	8b e2       	ldi	r24, 0x2B	; 43
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 83 08 	call	0x1106	; 0x1106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 83 08 	call	0x1106	; 0x1106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 83 08 	call	0x1106	; 0x1106 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	6f ef       	ldi	r22, 0xFF	; 255
    199c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    19a0:	88 e3       	ldi	r24, 0x38	; 56
    19a2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19a6:	8c e0       	ldi	r24, 0x0C	; 12
    19a8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_sendCommand>
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	e9 97       	sbiw	r28, 0x39	; 57
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e8       	ldi	r26, 0x80	; 128
    19e8:	bf e3       	ldi	r27, 0x3F	; 63
    19ea:	8d ab       	std	Y+53, r24	; 0x35
    19ec:	9e ab       	std	Y+54, r25	; 0x36
    19ee:	af ab       	std	Y+55, r26	; 0x37
    19f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6d a9       	ldd	r22, Y+53	; 0x35
    19f4:	7e a9       	ldd	r23, Y+54	; 0x36
    19f6:	8f a9       	ldd	r24, Y+55	; 0x37
    19f8:	98 ad       	ldd	r25, Y+56	; 0x38
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	53 e4       	ldi	r21, 0x43	; 67
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	89 ab       	std	Y+49, r24	; 0x31
    1a0c:	9a ab       	std	Y+50, r25	; 0x32
    1a0e:	ab ab       	std	Y+51, r26	; 0x33
    1a10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a12:	69 a9       	ldd	r22, Y+49	; 0x31
    1a14:	7a a9       	ldd	r23, Y+50	; 0x32
    1a16:	8b a9       	ldd	r24, Y+51	; 0x33
    1a18:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	98 ab       	std	Y+48, r25	; 0x30
    1a30:	8f a7       	std	Y+47, r24	; 0x2f
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a34:	69 a9       	ldd	r22, Y+49	; 0x31
    1a36:	7a a9       	ldd	r23, Y+50	; 0x32
    1a38:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a50:	8f a9       	ldd	r24, Y+55	; 0x37
    1a52:	98 ad       	ldd	r25, Y+56	; 0x38
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	98 ab       	std	Y+48, r25	; 0x30
    1a72:	8f a7       	std	Y+47, r24	; 0x2f
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <LCD_sendCommand+0xdc>
    1a76:	89 e1       	ldi	r24, 0x19	; 25
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9e a7       	std	Y+46, r25	; 0x2e
    1a7c:	8d a7       	std	Y+45, r24	; 0x2d
    1a7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a80:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_sendCommand+0xca>
    1a86:	9e a7       	std	Y+46, r25	; 0x2e
    1a88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	98 ab       	std	Y+48, r25	; 0x30
    1a92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a96:	98 a9       	ldd	r25, Y+48	; 0x30
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <LCD_sendCommand+0xbe>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	98 ab       	std	Y+48, r25	; 0x30
    1ab0:	8f a7       	std	Y+47, r24	; 0x2f
    1ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab6:	9c a7       	std	Y+44, r25	; 0x2c
    1ab8:	8b a7       	std	Y+43, r24	; 0x2b
    1aba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1abc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_sendCommand+0x106>
    1ac2:	9c a7       	std	Y+44, r25	; 0x2c
    1ac4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e8       	ldi	r26, 0x80	; 128
    1ad6:	bf e3       	ldi	r27, 0x3F	; 63
    1ad8:	8f a3       	std	Y+39, r24	; 0x27
    1ada:	98 a7       	std	Y+40, r25	; 0x28
    1adc:	a9 a7       	std	Y+41, r26	; 0x29
    1ade:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a e7       	ldi	r20, 0x7A	; 122
    1aee:	53 e4       	ldi	r21, 0x43	; 67
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8b a3       	std	Y+35, r24	; 0x23
    1afa:	9c a3       	std	Y+36, r25	; 0x24
    1afc:	ad a3       	std	Y+37, r26	; 0x25
    1afe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b00:	6b a1       	ldd	r22, Y+35	; 0x23
    1b02:	7c a1       	ldd	r23, Y+36	; 0x24
    1b04:	8d a1       	ldd	r24, Y+37	; 0x25
    1b06:	9e a1       	ldd	r25, Y+38	; 0x26
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9a a3       	std	Y+34, r25	; 0x22
    1b60:	89 a3       	std	Y+33, r24	; 0x21
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <LCD_sendCommand+0x1ca>
    1b64:	89 e1       	ldi	r24, 0x19	; 25
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	98 a3       	std	Y+32, r25	; 0x20
    1b6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_sendCommand+0x1b8>
    1b74:	98 a3       	std	Y+32, r25	; 0x20
    1b76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9a a3       	std	Y+34, r25	; 0x22
    1b80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	89 a1       	ldd	r24, Y+33	; 0x21
    1b84:	9a a1       	ldd	r25, Y+34	; 0x22
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <LCD_sendCommand+0x1ac>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	9e a1       	ldd	r25, Y+38	; 0x26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_sendCommand+0x1f4>
    1bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	69 ad       	ldd	r22, Y+57	; 0x39
    1bb8:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_writePort>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	89 8f       	std	Y+25, r24	; 0x19
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	53 e4       	ldi	r21, 0x43	; 67
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 8b       	std	Y+21, r24	; 0x15
    1be6:	9e 8b       	std	Y+22, r25	; 0x16
    1be8:	af 8b       	std	Y+23, r26	; 0x17
    1bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_sendCommand+0x256>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_sendCommand+0x2b6>
    1c50:	89 e1       	ldi	r24, 0x19	; 25
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
    1c58:	89 89       	ldd	r24, Y+17	; 0x11
    1c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_sendCommand+0x2a4>
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_sendCommand+0x298>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x2e0>
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	bf e3       	ldi	r27, 0x3F	; 63
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	53 e4       	ldi	r21, 0x43	; 67
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_sendCommand+0x344>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_sendCommand+0x3a4>
    1d3e:	89 e1       	ldi	r24, 0x19	; 25
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_sendCommand+0x392>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_sendCommand+0x386>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_sendCommand+0x3ce>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d8e:	e9 96       	adiw	r28, 0x39	; 57
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	e9 97       	sbiw	r28, 0x39	; 57
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e8       	ldi	r26, 0x80	; 128
    1dd0:	bf e3       	ldi	r27, 0x3F	; 63
    1dd2:	8d ab       	std	Y+53, r24	; 0x35
    1dd4:	9e ab       	std	Y+54, r25	; 0x36
    1dd6:	af ab       	std	Y+55, r26	; 0x37
    1dd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dda:	6d a9       	ldd	r22, Y+53	; 0x35
    1ddc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dde:	8f a9       	ldd	r24, Y+55	; 0x37
    1de0:	98 ad       	ldd	r25, Y+56	; 0x38
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a e7       	ldi	r20, 0x7A	; 122
    1de8:	53 e4       	ldi	r21, 0x43	; 67
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	89 ab       	std	Y+49, r24	; 0x31
    1df4:	9a ab       	std	Y+50, r25	; 0x32
    1df6:	ab ab       	std	Y+51, r26	; 0x33
    1df8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	5f e3       	ldi	r21, 0x3F	; 63
    1e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	98 ab       	std	Y+48, r25	; 0x30
    1e18:	8f a7       	std	Y+47, r24	; 0x2f
    1e1a:	3f c0       	rjmp	.+126    	; 0x1e9a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e30:	18 16       	cp	r1, r24
    1e32:	4c f5       	brge	.+82     	; 0x1e86 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e34:	6d a9       	ldd	r22, Y+53	; 0x35
    1e36:	7e a9       	ldd	r23, Y+54	; 0x36
    1e38:	8f a9       	ldd	r24, Y+55	; 0x37
    1e3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e2       	ldi	r20, 0x20	; 32
    1e42:	51 e4       	ldi	r21, 0x41	; 65
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	98 ab       	std	Y+48, r25	; 0x30
    1e5a:	8f a7       	std	Y+47, r24	; 0x2f
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <LCD_displayCharacter+0xdc>
    1e5e:	89 e1       	ldi	r24, 0x19	; 25
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e a7       	std	Y+46, r25	; 0x2e
    1e64:	8d a7       	std	Y+45, r24	; 0x2d
    1e66:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e68:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_displayCharacter+0xca>
    1e6e:	9e a7       	std	Y+46, r25	; 0x2e
    1e70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e74:	98 a9       	ldd	r25, Y+48	; 0x30
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	69 f7       	brne	.-38     	; 0x1e5e <LCD_displayCharacter+0xbe>
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	98 ab       	std	Y+48, r25	; 0x30
    1e98:	8f a7       	std	Y+47, r24	; 0x2f
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ea0:	8b a7       	std	Y+43, r24	; 0x2b
    1ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_displayCharacter+0x106>
    1eaa:	9c a7       	std	Y+44, r25	; 0x2c
    1eac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	62 e0       	ldi	r22, 0x02	; 2
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8f a3       	std	Y+39, r24	; 0x27
    1ec2:	98 a7       	std	Y+40, r25	; 0x28
    1ec4:	a9 a7       	std	Y+41, r26	; 0x29
    1ec6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	53 e4       	ldi	r21, 0x43	; 67
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8b a3       	std	Y+35, r24	; 0x23
    1ee2:	9c a3       	std	Y+36, r25	; 0x24
    1ee4:	ad a3       	std	Y+37, r26	; 0x25
    1ee6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eea:	7c a1       	ldd	r23, Y+36	; 0x24
    1eec:	8d a1       	ldd	r24, Y+37	; 0x25
    1eee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f10:	9e a1       	ldd	r25, Y+38	; 0x26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6f a1       	ldd	r22, Y+39	; 0x27
    1f24:	78 a5       	ldd	r23, Y+40	; 0x28
    1f26:	89 a5       	ldd	r24, Y+41	; 0x29
    1f28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a a3       	std	Y+34, r25	; 0x22
    1f48:	89 a3       	std	Y+33, r24	; 0x21
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_displayCharacter+0x1ca>
    1f4c:	89 e1       	ldi	r24, 0x19	; 25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	98 a3       	std	Y+32, r25	; 0x20
    1f52:	8f 8f       	std	Y+31, r24	; 0x1f
    1f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f56:	98 a1       	ldd	r25, Y+32	; 0x20
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_displayCharacter+0x1b8>
    1f5c:	98 a3       	std	Y+32, r25	; 0x20
    1f5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	89 a1       	ldd	r24, Y+33	; 0x21
    1f62:	9a a1       	ldd	r25, Y+34	; 0x22
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_displayCharacter+0x1ac>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9a a3       	std	Y+34, r25	; 0x22
    1f86:	89 a3       	std	Y+33, r24	; 0x21
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_displayCharacter+0x1f4>
    1f98:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	69 ad       	ldd	r22, Y+57	; 0x39
    1fa0:	0e 94 38 0b 	call	0x1670	; 0x1670 <GPIO_writePort>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	89 8f       	std	Y+25, r24	; 0x19
    1fae:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	53 e4       	ldi	r21, 0x43	; 67
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8d 8b       	std	Y+21, r24	; 0x15
    1fce:	9e 8b       	std	Y+22, r25	; 0x16
    1fd0:	af 8b       	std	Y+23, r26	; 0x17
    1fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_displayCharacter+0x2b6>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_displayCharacter+0x2a4>
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_displayCharacter+0x298>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_displayCharacter+0x2e0>
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <GPIO_writePin>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	8b 87       	std	Y+11, r24	; 0x0b
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	ad 87       	std	Y+13, r26	; 0x0d
    20a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a e7       	ldi	r20, 0x7A	; 122
    20b0:	53 e4       	ldi	r21, 0x43	; 67
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8f 83       	std	Y+7, r24	; 0x07
    20bc:	98 87       	std	Y+8, r25	; 0x08
    20be:	a9 87       	std	Y+9, r26	; 0x09
    20c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_displayCharacter+0x3a4>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_displayCharacter+0x392>
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_displayCharacter+0x386>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_displayCharacter+0x3ce>
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2176:	e9 96       	adiw	r28, 0x39	; 57
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <LCD_displayString+0x6>
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9b 83       	std	Y+3, r25	; 0x03
    2196:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	0e c0       	rjmp	.+28     	; 0x21b8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	80 81       	ld	r24, Z
    21ae:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayCharacter>
		i++;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	8f 5f       	subi	r24, 0xFF	; 255
    21b6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	80 81       	ld	r24, Z
    21ca:	88 23       	and	r24, r24
    21cc:	39 f7       	brne	.-50     	; 0x219c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <LCD_moveCursor+0x6>
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <LCD_moveCursor+0x8>
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3d 83       	std	Y+5, r19	; 0x05
    21f4:	2c 83       	std	Y+4, r18	; 0x04
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	c1 f0       	breq	.+48     	; 0x2230 <LCD_moveCursor+0x56>
    2200:	2c 81       	ldd	r18, Y+4	; 0x04
    2202:	3d 81       	ldd	r19, Y+5	; 0x05
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	2c f4       	brge	.+10     	; 0x2214 <LCD_moveCursor+0x3a>
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	9d 81       	ldd	r25, Y+5	; 0x05
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 f0       	breq	.+24     	; 0x222a <LCD_moveCursor+0x50>
    2212:	19 c0       	rjmp	.+50     	; 0x2246 <LCD_moveCursor+0x6c>
    2214:	2c 81       	ldd	r18, Y+4	; 0x04
    2216:	3d 81       	ldd	r19, Y+5	; 0x05
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	69 f0       	breq	.+26     	; 0x2238 <LCD_moveCursor+0x5e>
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	9d 81       	ldd	r25, Y+5	; 0x05
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	61 f0       	breq	.+24     	; 0x2240 <LCD_moveCursor+0x66>
    2228:	0e c0       	rjmp	.+28     	; 0x2246 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	0b c0       	rjmp	.+22     	; 0x2246 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	80 5c       	subi	r24, 0xC0	; 192
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	07 c0       	rjmp	.+14     	; 0x2246 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	80 5f       	subi	r24, 0xF0	; 240
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	80 5b       	subi	r24, 0xB0	; 176
    2244:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_sendCommand>
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <LCD_displayStringRowColumn+0x6>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <LCD_displayStringRowColumn+0x8>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	6a 83       	std	Y+2, r22	; 0x02
    226e:	5c 83       	std	Y+4, r21	; 0x04
    2270:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	6a 81       	ldd	r22, Y+2	; 0x02
    2276:	0e 94 ed 10 	call	0x21da	; 0x21da <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	62 97       	sbiw	r28, 0x12	; 18
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	9a 8b       	std	Y+18, r25	; 0x12
    22a6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22a8:	89 89       	ldd	r24, Y+17	; 0x11
    22aa:	9a 89       	ldd	r25, Y+18	; 0x12
    22ac:	9e 01       	movw	r18, r28
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	b9 01       	movw	r22, r18
    22b4:	4a e0       	ldi	r20, 0x0A	; 10
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	0e 94 36 18 	call	0x306c	; 0x306c <itoa>
   LCD_displayString(buff); /* Display the string */
    22bc:	ce 01       	movw	r24, r28
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>
}
    22c4:	62 96       	adiw	r28, 0x12	; 18
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_sendCommand>
}
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <main>:

uint8 g_change=0;


int main(void)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <main+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
	/* To hold the value sent by micro1 */
	uint8 received_byte = 0;
    22f6:	19 82       	std	Y+1, r1	; 0x01

	/* Modules initialization */
	MICROCONTROLLER_init();
    22f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <MICROCONTROLLER_init>

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    22fc:	af e5       	ldi	r26, 0x5F	; 95
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e5       	ldi	r30, 0x5F	; 95
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	80 68       	ori	r24, 0x80	; 128
    2308:	8c 93       	st	X, r24

	/* Wait until MC2 is ready to initialize communication */
	while(UART_recieveByte() != MICRO2_READY);
    230a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <UART_recieveByte>
    230e:	81 31       	cpi	r24, 0x11	; 17
    2310:	e1 f7       	brne	.-8      	; 0x230a <main+0x20>


	for (;;)
	{
		received_byte = UART_recieveByte();
    2312:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <UART_recieveByte>
    2316:	89 83       	std	Y+1, r24	; 0x01
		/* Reset received value in every switch case in order not to execute again */

		switch(received_byte)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	3b 83       	std	Y+3, r19	; 0x03
    2320:	2a 83       	std	Y+2, r18	; 0x02
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	83 34       	cpi	r24, 0x43	; 67
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <main+0x44>
    232c:	84 c0       	rjmp	.+264    	; 0x2436 <main+0x14c>
    232e:	2a 81       	ldd	r18, Y+2	; 0x02
    2330:	3b 81       	ldd	r19, Y+3	; 0x03
    2332:	24 34       	cpi	r18, 0x44	; 68
    2334:	31 05       	cpc	r19, r1
    2336:	7c f5       	brge	.+94     	; 0x2396 <main+0xac>
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	8a 32       	cpi	r24, 0x2A	; 42
    233e:	91 05       	cpc	r25, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <main+0x5a>
    2342:	82 c0       	rjmp	.+260    	; 0x2448 <main+0x15e>
    2344:	2a 81       	ldd	r18, Y+2	; 0x02
    2346:	3b 81       	ldd	r19, Y+3	; 0x03
    2348:	2b 32       	cpi	r18, 0x2B	; 43
    234a:	31 05       	cpc	r19, r1
    234c:	9c f4       	brge	.+38     	; 0x2374 <main+0x8a>
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	85 32       	cpi	r24, 0x25	; 37
    2354:	91 05       	cpc	r25, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <main+0x70>
    2358:	7a c0       	rjmp	.+244    	; 0x244e <main+0x164>
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	3b 81       	ldd	r19, Y+3	; 0x03
    235e:	26 32       	cpi	r18, 0x26	; 38
    2360:	31 05       	cpc	r19, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <main+0x7c>
    2364:	6e c0       	rjmp	.+220    	; 0x2442 <main+0x158>
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	84 32       	cpi	r24, 0x24	; 36
    236c:	91 05       	cpc	r25, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <main+0x88>
    2370:	4c c0       	rjmp	.+152    	; 0x240a <main+0x120>
    2372:	cf cf       	rjmp	.-98     	; 0x2312 <main+0x28>
    2374:	2a 81       	ldd	r18, Y+2	; 0x02
    2376:	3b 81       	ldd	r19, Y+3	; 0x03
    2378:	2f 33       	cpi	r18, 0x3F	; 63
    237a:	31 05       	cpc	r19, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <main+0x96>
    237e:	50 c0       	rjmp	.+160    	; 0x2420 <main+0x136>
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	80 34       	cpi	r24, 0x40	; 64
    2386:	91 05       	cpc	r25, r1
    2388:	11 f1       	breq	.+68     	; 0x23ce <main+0xe4>
    238a:	2a 81       	ldd	r18, Y+2	; 0x02
    238c:	3b 81       	ldd	r19, Y+3	; 0x03
    238e:	2b 33       	cpi	r18, 0x3B	; 59
    2390:	31 05       	cpc	r19, r1
    2392:	41 f1       	breq	.+80     	; 0x23e4 <main+0xfa>
    2394:	be cf       	rjmp	.-132    	; 0x2312 <main+0x28>
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	83 35       	cpi	r24, 0x53	; 83
    239c:	91 05       	cpc	r25, r1
    239e:	09 f4       	brne	.+2      	; 0x23a2 <main+0xb8>
    23a0:	59 c0       	rjmp	.+178    	; 0x2454 <main+0x16a>
    23a2:	2a 81       	ldd	r18, Y+2	; 0x02
    23a4:	3b 81       	ldd	r19, Y+3	; 0x03
    23a6:	24 35       	cpi	r18, 0x54	; 84
    23a8:	31 05       	cpc	r19, r1
    23aa:	34 f4       	brge	.+12     	; 0x23b8 <main+0xce>
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	84 34       	cpi	r24, 0x44	; 68
    23b2:	91 05       	cpc	r25, r1
    23b4:	d9 f1       	breq	.+118    	; 0x242c <main+0x142>
    23b6:	ad cf       	rjmp	.-166    	; 0x2312 <main+0x28>
    23b8:	2a 81       	ldd	r18, Y+2	; 0x02
    23ba:	3b 81       	ldd	r19, Y+3	; 0x03
    23bc:	2a 35       	cpi	r18, 0x5A	; 90
    23be:	31 05       	cpc	r19, r1
    23c0:	f1 f0       	breq	.+60     	; 0x23fe <main+0x114>
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	8d 37       	cpi	r24, 0x7D	; 125
    23c8:	91 05       	cpc	r25, r1
    23ca:	e1 f0       	breq	.+56     	; 0x2404 <main+0x11a>
    23cc:	a2 cf       	rjmp	.-188    	; 0x2312 <main+0x28>
		{

		case PASSWORDS_MATCHED :

			LCD_clearScreen();
    23ce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
			LCD_displayString("MATCH");
    23d2:	8b ee       	ldi	r24, 0xEB	; 235
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    23da:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    23de:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <APP_Timer1DelayForScreenCheck>
    23e2:	97 cf       	rjmp	.-210    	; 0x2312 <main+0x28>

			break;

		case PASSWORDS_UNMATCHED_FIRST_TIME :

			LCD_clearScreen();
    23e4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
			LCD_displayString("Doesn't Match");
    23e8:	81 ef       	ldi	r24, 0xF1	; 241
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    23f0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    23f4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <APP_Timer1DelayForScreenCheck>

			APP_getNewPassword();
    23f8:	0e 94 04 08 	call	0x1008	; 0x1008 <APP_getNewPassword>
    23fc:	8a cf       	rjmp	.-236    	; 0x2312 <main+0x28>
			break;

		case CHANGE_PASSWORD: /* - */

			APP_getNewPassword();
    23fe:	0e 94 04 08 	call	0x1008	; 0x1008 <APP_getNewPassword>
    2402:	87 cf       	rjmp	.-242    	; 0x2312 <main+0x28>

			break;

		case ASK_FOR_NEW_PASSWORD :

			APP_getNewPassword();
    2404:	0e 94 04 08 	call	0x1008	; 0x1008 <APP_getNewPassword>
    2408:	84 cf       	rjmp	.-248    	; 0x2312 <main+0x28>
			break;

		case PASSWORDS_UNMATCHED :

			/* LCD Commands */
			LCD_clearScreen();
    240a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_clearScreen>
			LCD_displayString("Unmatched");
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    2416:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    241a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <APP_Timer1DelayForScreenCheck>
    241e:	79 cf       	rjmp	.-270    	; 0x2312 <main+0x28>
			//			_delay_ms(1000);
			break;

		case ASK_FOR_PASSWORD : /* + */

			g_change=2;
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	80 93 2f 01 	sts	0x012F, r24
			APP_askForPassword();
    2426:	0e 94 3e 07 	call	0xe7c	; 0xe7c <APP_askForPassword>
    242a:	73 cf       	rjmp	.-282    	; 0x2312 <main+0x28>

			break;

		case ASK_FOR_DOOR_PASSWORD :
			g_change = 0;
    242c:	10 92 2f 01 	sts	0x012F, r1
			APP_askForPassword();
    2430:	0e 94 3e 07 	call	0xe7c	; 0xe7c <APP_askForPassword>
    2434:	6e cf       	rjmp	.-292    	; 0x2312 <main+0x28>
			break;

		case ASK_FOR_CHANGING_PASSWORD :
			g_change=1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	80 93 2f 01 	sts	0x012F, r24
			APP_askForPassword();
    243c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <APP_askForPassword>
    2440:	68 cf       	rjmp	.-304    	; 0x2312 <main+0x28>
			break;

		case PASSWORD_WRONG :

			APP_wrongPassword();
    2442:	0e 94 70 08 	call	0x10e0	; 0x10e0 <APP_wrongPassword>
    2446:	65 cf       	rjmp	.-310    	; 0x2312 <main+0x28>

			break;

		case DOOR_OPENING :

			APP_doorProcessing();
    2448:	0e 94 2f 08 	call	0x105e	; 0x105e <APP_doorProcessing>
    244c:	62 cf       	rjmp	.-316    	; 0x2312 <main+0x28>
			//
			//			break;

		case INVALID_INPUT :

			APP_invalidInput();
    244e:	0e 94 5f 08 	call	0x10be	; 0x10be <APP_invalidInput>
    2452:	5f cf       	rjmp	.-322    	; 0x2312 <main+0x28>

			break;

		case SHOW_MENU :
			APP_mainMenu();
    2454:	0e 94 0f 08 	call	0x101e	; 0x101e <APP_mainMenu>
    2458:	5c cf       	rjmp	.-328    	; 0x2312 <main+0x28>

0000245a <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    245a:	1f 92       	push	r1
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	0f 92       	push	r0
    2462:	11 24       	eor	r1, r1
    2464:	2f 93       	push	r18
    2466:	3f 93       	push	r19
    2468:	4f 93       	push	r20
    246a:	5f 93       	push	r21
    246c:	6f 93       	push	r22
    246e:	7f 93       	push	r23
    2470:	8f 93       	push	r24
    2472:	9f 93       	push	r25
    2474:	af 93       	push	r26
    2476:	bf 93       	push	r27
    2478:	ef 93       	push	r30
    247a:	ff 93       	push	r31
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    2484:	80 91 30 01 	lds	r24, 0x0130
    2488:	90 91 31 01 	lds	r25, 0x0131
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	29 f0       	breq	.+10     	; 0x249a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    2490:	e0 91 30 01 	lds	r30, 0x0130
    2494:	f0 91 31 01 	lds	r31, 0x0131
    2498:	09 95       	icall
	}
}
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	ff 91       	pop	r31
    24a0:	ef 91       	pop	r30
    24a2:	bf 91       	pop	r27
    24a4:	af 91       	pop	r26
    24a6:	9f 91       	pop	r25
    24a8:	8f 91       	pop	r24
    24aa:	7f 91       	pop	r23
    24ac:	6f 91       	pop	r22
    24ae:	5f 91       	pop	r21
    24b0:	4f 91       	pop	r20
    24b2:	3f 91       	pop	r19
    24b4:	2f 91       	pop	r18
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	2f 93       	push	r18
    24cc:	3f 93       	push	r19
    24ce:	4f 93       	push	r20
    24d0:	5f 93       	push	r21
    24d2:	6f 93       	push	r22
    24d4:	7f 93       	push	r23
    24d6:	8f 93       	push	r24
    24d8:	9f 93       	push	r25
    24da:	af 93       	push	r26
    24dc:	bf 93       	push	r27
    24de:	ef 93       	push	r30
    24e0:	ff 93       	push	r31
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    24ea:	80 91 30 01 	lds	r24, 0x0130
    24ee:	90 91 31 01 	lds	r25, 0x0131
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	29 f0       	breq	.+10     	; 0x2500 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    24f6:	e0 91 30 01 	lds	r30, 0x0130
    24fa:	f0 91 31 01 	lds	r31, 0x0131
    24fe:	09 95       	icall
	}
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	ff 91       	pop	r31
    2506:	ef 91       	pop	r30
    2508:	bf 91       	pop	r27
    250a:	af 91       	pop	r26
    250c:	9f 91       	pop	r25
    250e:	8f 91       	pop	r24
    2510:	7f 91       	pop	r23
    2512:	6f 91       	pop	r22
    2514:	5f 91       	pop	r21
    2516:	4f 91       	pop	r20
    2518:	3f 91       	pop	r19
    251a:	2f 91       	pop	r18
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti

00002526 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    2526:	1f 92       	push	r1
    2528:	0f 92       	push	r0
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	0f 92       	push	r0
    252e:	11 24       	eor	r1, r1
    2530:	2f 93       	push	r18
    2532:	3f 93       	push	r19
    2534:	4f 93       	push	r20
    2536:	5f 93       	push	r21
    2538:	6f 93       	push	r22
    253a:	7f 93       	push	r23
    253c:	8f 93       	push	r24
    253e:	9f 93       	push	r25
    2540:	af 93       	push	r26
    2542:	bf 93       	push	r27
    2544:	ef 93       	push	r30
    2546:	ff 93       	push	r31
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2550:	80 91 32 01 	lds	r24, 0x0132
    2554:	90 91 33 01 	lds	r25, 0x0133
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	29 f0       	breq	.+10     	; 0x2566 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    255c:	e0 91 32 01 	lds	r30, 0x0132
    2560:	f0 91 33 01 	lds	r31, 0x0133
    2564:	09 95       	icall
	}
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	ff 91       	pop	r31
    256c:	ef 91       	pop	r30
    256e:	bf 91       	pop	r27
    2570:	af 91       	pop	r26
    2572:	9f 91       	pop	r25
    2574:	8f 91       	pop	r24
    2576:	7f 91       	pop	r23
    2578:	6f 91       	pop	r22
    257a:	5f 91       	pop	r21
    257c:	4f 91       	pop	r20
    257e:	3f 91       	pop	r19
    2580:	2f 91       	pop	r18
    2582:	0f 90       	pop	r0
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	0f 90       	pop	r0
    2588:	1f 90       	pop	r1
    258a:	18 95       	reti

0000258c <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    258c:	1f 92       	push	r1
    258e:	0f 92       	push	r0
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	2f 93       	push	r18
    2598:	3f 93       	push	r19
    259a:	4f 93       	push	r20
    259c:	5f 93       	push	r21
    259e:	6f 93       	push	r22
    25a0:	7f 93       	push	r23
    25a2:	8f 93       	push	r24
    25a4:	9f 93       	push	r25
    25a6:	af 93       	push	r26
    25a8:	bf 93       	push	r27
    25aa:	ef 93       	push	r30
    25ac:	ff 93       	push	r31
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    25b6:	80 91 32 01 	lds	r24, 0x0132
    25ba:	90 91 33 01 	lds	r25, 0x0133
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	29 f0       	breq	.+10     	; 0x25cc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    25c2:	e0 91 32 01 	lds	r30, 0x0132
    25c6:	f0 91 33 01 	lds	r31, 0x0133
    25ca:	09 95       	icall
	}
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    261c:	80 91 32 01 	lds	r24, 0x0132
    2620:	90 91 33 01 	lds	r25, 0x0133
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	29 f0       	breq	.+10     	; 0x2632 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2628:	e0 91 32 01 	lds	r30, 0x0132
    262c:	f0 91 33 01 	lds	r31, 0x0133
    2630:	09 95       	icall
	}
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	0f 90       	pop	r0
    2654:	1f 90       	pop	r1
    2656:	18 95       	reti

00002658 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    2682:	80 91 34 01 	lds	r24, 0x0134
    2686:	90 91 35 01 	lds	r25, 0x0135
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	29 f0       	breq	.+10     	; 0x2698 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    268e:	e0 91 34 01 	lds	r30, 0x0134
    2692:	f0 91 35 01 	lds	r31, 0x0135
    2696:	09 95       	icall
	}
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	ff 91       	pop	r31
    269e:	ef 91       	pop	r30
    26a0:	bf 91       	pop	r27
    26a2:	af 91       	pop	r26
    26a4:	9f 91       	pop	r25
    26a6:	8f 91       	pop	r24
    26a8:	7f 91       	pop	r23
    26aa:	6f 91       	pop	r22
    26ac:	5f 91       	pop	r21
    26ae:	4f 91       	pop	r20
    26b0:	3f 91       	pop	r19
    26b2:	2f 91       	pop	r18
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	ef 93       	push	r30
    26de:	ff 93       	push	r31
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    26e8:	80 91 34 01 	lds	r24, 0x0134
    26ec:	90 91 35 01 	lds	r25, 0x0135
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	29 f0       	breq	.+10     	; 0x26fe <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    26f4:	e0 91 34 01 	lds	r30, 0x0134
    26f8:	f0 91 35 01 	lds	r31, 0x0135
    26fc:	09 95       	icall
	}
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	ff 91       	pop	r31
    2704:	ef 91       	pop	r30
    2706:	bf 91       	pop	r27
    2708:	af 91       	pop	r26
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	7f 91       	pop	r23
    2710:	6f 91       	pop	r22
    2712:	5f 91       	pop	r21
    2714:	4f 91       	pop	r20
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <TIMER_init>:


void TIMER_init(const TIMER_ConfigType *Config_ptr)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	2a 97       	sbiw	r28, 0x0a	; 10
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_ptr->identification)
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	80 81       	ld	r24, Z
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	3a 87       	std	Y+10, r19	; 0x0a
    2748:	29 87       	std	Y+9, r18	; 0x09
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	91 05       	cpc	r25, r1
    2752:	09 f4       	brne	.+2      	; 0x2756 <TIMER_init+0x32>
    2754:	8a c0       	rjmp	.+276    	; 0x286a <TIMER_init+0x146>
    2756:	29 85       	ldd	r18, Y+9	; 0x09
    2758:	3a 85       	ldd	r19, Y+10	; 0x0a
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	09 f4       	brne	.+2      	; 0x2762 <TIMER_init+0x3e>
    2760:	ff c0       	rjmp	.+510    	; 0x2960 <TIMER_init+0x23c>
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	09 f0       	breq	.+2      	; 0x276c <TIMER_init+0x48>
    276a:	78 c1       	rjmp	.+752    	; 0x2a5c <TIMER_init+0x338>
	{
	case TIMER0_ID :

		/* Load TCNT0 with initial value */
		TCNT0 = Config_ptr->initial_value;
    276c:	a2 e5       	ldi	r26, 0x52	; 82
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	8c 93       	st	X, r24
		/* Insert the pre-scaler bits :
		 * &0xB7 to clear WGM00 (bit 6) & WGM01 (bit3)
		 * &0x01 to get WGM00 & <<6 to insert it
		 * &0x02 to get WGM01 & <<3 to insert it
		 */
		TCCR0 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    277a:	a3 e5       	ldi	r26, 0x53	; 83
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e3 e5       	ldi	r30, 0x53	; 83
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	28 2f       	mov	r18, r24
    2786:	27 7b       	andi	r18, 0xB7	; 183
    2788:	e9 81       	ldd	r30, Y+1	; 0x01
    278a:	fa 81       	ldd	r31, Y+2	; 0x02
    278c:	81 81       	ldd	r24, Z+1	; 0x01
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	81 70       	andi	r24, 0x01	; 1
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	00 24       	eor	r0, r0
    2798:	96 95       	lsr	r25
    279a:	87 95       	ror	r24
    279c:	07 94       	ror	r0
    279e:	96 95       	lsr	r25
    27a0:	87 95       	ror	r24
    27a2:	07 94       	ror	r0
    27a4:	98 2f       	mov	r25, r24
    27a6:	80 2d       	mov	r24, r0
    27a8:	28 2b       	or	r18, r24
    27aa:	e9 81       	ldd	r30, Y+1	; 0x01
    27ac:	fa 81       	ldd	r31, Y+2	; 0x02
    27ae:	81 81       	ldd	r24, Z+1	; 0x01
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	82 70       	andi	r24, 0x02	; 2
    27b6:	90 70       	andi	r25, 0x00	; 0
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	82 2b       	or	r24, r18
    27c6:	8c 93       	st	X, r24

		/* Insert the clock bits :
		 * &0xF8 to clear CS00 (bit 0) & CS01 (bit 1) & CS02 (bit 2)
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    27c8:	a3 e5       	ldi	r26, 0x53	; 83
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e3 e5       	ldi	r30, 0x53	; 83
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	98 2f       	mov	r25, r24
    27d4:	98 7f       	andi	r25, 0xF8	; 248
    27d6:	e9 81       	ldd	r30, Y+1	; 0x01
    27d8:	fa 81       	ldd	r31, Y+2	; 0x02
    27da:	86 81       	ldd	r24, Z+6	; 0x06
    27dc:	89 2b       	or	r24, r25
    27de:	8c 93       	st	X, r24

		switch ((Config_ptr->mode))
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	81 81       	ldd	r24, Z+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	38 87       	std	Y+8, r19	; 0x08
    27ec:	2f 83       	std	Y+7, r18	; 0x07
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	98 85       	ldd	r25, Y+8	; 0x08
    27f2:	82 30       	cpi	r24, 0x02	; 2
    27f4:	91 05       	cpc	r25, r1
    27f6:	51 f0       	breq	.+20     	; 0x280c <TIMER_init+0xe8>
    27f8:	2f 81       	ldd	r18, Y+7	; 0x07
    27fa:	38 85       	ldd	r19, Y+8	; 0x08
    27fc:	23 30       	cpi	r18, 0x03	; 3
    27fe:	31 05       	cpc	r19, r1
    2800:	61 f1       	breq	.+88     	; 0x285a <TIMER_init+0x136>
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	98 85       	ldd	r25, Y+8	; 0x08
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	c1 f0       	breq	.+48     	; 0x283a <TIMER_init+0x116>
    280a:	28 c1       	rjmp	.+592    	; 0x2a5c <TIMER_init+0x338>
		{

		case TIMER02_MODE_COMPARE :
			/* Load OCR0 with compare value if compare mode is on */
			OCR0 = Config_ptr->compare_value;
    280c:	ac e5       	ldi	r26, 0x5C	; 92
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	84 81       	ldd	r24, Z+4	; 0x04
    2816:	95 81       	ldd	r25, Z+5	; 0x05
    2818:	8c 93       	st	X, r24

			/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    281a:	a9 e5       	ldi	r26, 0x59	; 89
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e9 e5       	ldi	r30, 0x59	; 89
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8c 7f       	andi	r24, 0xFC	; 252
    2826:	82 60       	ori	r24, 0x02	; 2
    2828:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    282a:	a3 e5       	ldi	r26, 0x53	; 83
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e3 e5       	ldi	r30, 0x53	; 83
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 68       	ori	r24, 0x80	; 128
    2836:	8c 93       	st	X, r24
    2838:	11 c1       	rjmp	.+546    	; 0x2a5c <TIMER_init+0x338>

			break;

		case TIMER02_MODE_NORMAL :
			/* Clear OCIE0 & TOIE0 & Enable Timer0 NORMAL Interrupt (TOIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    283a:	a9 e5       	ldi	r26, 0x59	; 89
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e9 e5       	ldi	r30, 0x59	; 89
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8c 7f       	andi	r24, 0xFC	; 252
    2846:	81 60       	ori	r24, 0x01	; 1
    2848:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    284a:	a3 e5       	ldi	r26, 0x53	; 83
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e3 e5       	ldi	r30, 0x53	; 83
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	8c 93       	st	X, r24
    2858:	01 c1       	rjmp	.+514    	; 0x2a5c <TIMER_init+0x338>

			break;
		case TIMER02_MODE_FAST_PWM :
			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 &= ~(1<<FOC0);
    285a:	a3 e5       	ldi	r26, 0x53	; 83
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e3 e5       	ldi	r30, 0x53	; 83
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	8f 77       	andi	r24, 0x7F	; 127
    2866:	8c 93       	st	X, r24
    2868:	f9 c0       	rjmp	.+498    	; 0x2a5c <TIMER_init+0x338>
		}
		break;

		case TIMER1_ID :
			/* Load TCNT1 with initial value */
			TCNT1 = Config_ptr->initial_value;
    286a:	ac e4       	ldi	r26, 0x4C	; 76
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e9 81       	ldd	r30, Y+1	; 0x01
    2870:	fa 81       	ldd	r31, Y+2	; 0x02
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	11 96       	adiw	r26, 0x01	; 1
    2878:	9c 93       	st	X, r25
    287a:	8e 93       	st	-X, r24

			/* Insert the pre-scaler bits in TCCR1A :
			 * &0xFC to clear WGM10 (bit 0) & WGM11 (bit1)
			 * &0x03 to get WGM10 & WGM11
			 */
			TCCR1A = (TCCR1A & 0xFC) | ( (Config_ptr->mode) & 0x03);
    287c:	af e4       	ldi	r26, 0x4F	; 79
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ef e4       	ldi	r30, 0x4F	; 79
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	98 2f       	mov	r25, r24
    2888:	9c 7f       	andi	r25, 0xFC	; 252
    288a:	e9 81       	ldd	r30, Y+1	; 0x01
    288c:	fa 81       	ldd	r31, Y+2	; 0x02
    288e:	81 81       	ldd	r24, Z+1	; 0x01
    2890:	83 70       	andi	r24, 0x03	; 3
    2892:	89 2b       	or	r24, r25
    2894:	8c 93       	st	X, r24

			/* Insert the pre-scaler bits in TCCR1B :
			 * &0xE7 to clear WGM12 (bit 3) & WGM13 (bit4)
			 * &0x0C to get WGM12 (bit 3) & WGM13 (bit 4) & << 1 to insert it.
			 */
			TCCR1B = (TCCR1B & 0xE7 ) | ((((Config_ptr->mode)&0x0C)<<1)) ;
    2896:	ae e4       	ldi	r26, 0x4E	; 78
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	ee e4       	ldi	r30, 0x4E	; 78
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	28 2f       	mov	r18, r24
    28a2:	27 7e       	andi	r18, 0xE7	; 231
    28a4:	e9 81       	ldd	r30, Y+1	; 0x01
    28a6:	fa 81       	ldd	r31, Y+2	; 0x02
    28a8:	81 81       	ldd	r24, Z+1	; 0x01
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	8c 70       	andi	r24, 0x0C	; 12
    28b0:	90 70       	andi	r25, 0x00	; 0
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	82 2b       	or	r24, r18
    28b8:	8c 93       	st	X, r24

			/* Insert the clock bits :
			 * &0xF8 to clear CS10 (bit 0) & CS11 (bit 1) & CS12 (bit 2)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    28ba:	ae e4       	ldi	r26, 0x4E	; 78
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	ee e4       	ldi	r30, 0x4E	; 78
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	98 2f       	mov	r25, r24
    28c6:	98 7f       	andi	r25, 0xF8	; 248
    28c8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ca:	fa 81       	ldd	r31, Y+2	; 0x02
    28cc:	86 81       	ldd	r24, Z+6	; 0x06
    28ce:	89 2b       	or	r24, r25
    28d0:	8c 93       	st	X, r24



			switch ((Config_ptr->mode))
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	81 81       	ldd	r24, Z+1	; 0x01
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3e 83       	std	Y+6, r19	; 0x06
    28de:	2d 83       	std	Y+5, r18	; 0x05
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	84 30       	cpi	r24, 0x04	; 4
    28e6:	91 05       	cpc	r25, r1
    28e8:	51 f0       	breq	.+20     	; 0x28fe <TIMER_init+0x1da>
    28ea:	2d 81       	ldd	r18, Y+5	; 0x05
    28ec:	3e 81       	ldd	r19, Y+6	; 0x06
    28ee:	2f 30       	cpi	r18, 0x0F	; 15
    28f0:	31 05       	cpc	r19, r1
    28f2:	71 f1       	breq	.+92     	; 0x2950 <TIMER_init+0x22c>
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	d1 f0       	breq	.+52     	; 0x2930 <TIMER_init+0x20c>
    28fc:	af c0       	rjmp	.+350    	; 0x2a5c <TIMER_init+0x338>
			{

			case TIMER1_MODE_COMPARE_OCR1A :

				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 COMPARE A match Interrupt (OCIE1A) */
				TIMSK = (TIMSK & 0xC3) | (1<<OCIE1A);
    28fe:	a9 e5       	ldi	r26, 0x59	; 89
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e9 e5       	ldi	r30, 0x59	; 89
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	83 7c       	andi	r24, 0xC3	; 195
    290a:	80 61       	ori	r24, 0x10	; 16
    290c:	8c 93       	st	X, r24

				/* FOC1A bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR1A & 0xF7) | (1<<FOC1A);
    290e:	af e4       	ldi	r26, 0x4F	; 79
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ef e4       	ldi	r30, 0x4F	; 79
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	88 60       	ori	r24, 0x08	; 8
    291a:	8c 93       	st	X, r24

				/* Load OCR1A with compare value if compare mode is on */
				OCR1A = Config_ptr->compare_value;
    291c:	aa e4       	ldi	r26, 0x4A	; 74
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e9 81       	ldd	r30, Y+1	; 0x01
    2922:	fa 81       	ldd	r31, Y+2	; 0x02
    2924:	84 81       	ldd	r24, Z+4	; 0x04
    2926:	95 81       	ldd	r25, Z+5	; 0x05
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
    292e:	96 c0       	rjmp	.+300    	; 0x2a5c <TIMER_init+0x338>

				break;

			case TIMER1_MODE_NORMAL :
				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 Normal(overflow) Interrupt (TOIE1) */
				TIMSK = (TIMSK & 0x03) | (1<<TOIE1);
    2930:	a9 e5       	ldi	r26, 0x59	; 89
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e9 e5       	ldi	r30, 0x59	; 89
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	83 70       	andi	r24, 0x03	; 3
    293c:	84 60       	ori	r24, 0x04	; 4
    293e:	8c 93       	st	X, r24

				/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR0 & 0xF7) | (1<<FOC1A);
    2940:	af e4       	ldi	r26, 0x4F	; 79
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e3 e5       	ldi	r30, 0x53	; 83
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	88 60       	ori	r24, 0x08	; 8
    294c:	8c 93       	st	X, r24
    294e:	86 c0       	rjmp	.+268    	; 0x2a5c <TIMER_init+0x338>

				break;
			case TIMER1_MODE_FAST_PWM_OCR1A :
				/* FOC1A & FOC1B bit is only active when the WGM01:00 bits specifies a non-PWM mode */
				TCCR1A &= ~(1<<FOC1A) & ~(1<<FOC1B);
    2950:	af e4       	ldi	r26, 0x4F	; 79
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ef e4       	ldi	r30, 0x4F	; 79
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	83 7f       	andi	r24, 0xF3	; 243
    295c:	8c 93       	st	X, r24
    295e:	7e c0       	rjmp	.+252    	; 0x2a5c <TIMER_init+0x338>
			break;

			case TIMER2_ID :

				/* Load TCNT0 with initial value */
				TCNT2 = Config_ptr->initial_value;
    2960:	a4 e4       	ldi	r26, 0x44	; 68
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	8c 93       	st	X, r24
				/* Insert the pre-scaler bits :
				 * &0xB7 to clear WGM20 (bit 6) & WGM21 (bit3)
				 * &0x01 to get WGM20 & <<6 to insert it
				 * &0x02 to get WGM21 & <<3 to insert it
				 */
				TCCR2 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    296e:	a5 e4       	ldi	r26, 0x45	; 69
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e3 e5       	ldi	r30, 0x53	; 83
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	28 2f       	mov	r18, r24
    297a:	27 7b       	andi	r18, 0xB7	; 183
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	81 81       	ldd	r24, Z+1	; 0x01
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	81 70       	andi	r24, 0x01	; 1
    2988:	90 70       	andi	r25, 0x00	; 0
    298a:	00 24       	eor	r0, r0
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	07 94       	ror	r0
    2992:	96 95       	lsr	r25
    2994:	87 95       	ror	r24
    2996:	07 94       	ror	r0
    2998:	98 2f       	mov	r25, r24
    299a:	80 2d       	mov	r24, r0
    299c:	28 2b       	or	r18, r24
    299e:	e9 81       	ldd	r30, Y+1	; 0x01
    29a0:	fa 81       	ldd	r31, Y+2	; 0x02
    29a2:	81 81       	ldd	r24, Z+1	; 0x01
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	82 70       	andi	r24, 0x02	; 2
    29aa:	90 70       	andi	r25, 0x00	; 0
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	82 2b       	or	r24, r18
    29ba:	8c 93       	st	X, r24

				/* Insert the clock bits :
				 * &0xF8 to clear CS20 (bit 0) & CS21 (bit 1) & CS22 (bit 2)
				 */
				TCCR2 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    29bc:	a5 e4       	ldi	r26, 0x45	; 69
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e3 e5       	ldi	r30, 0x53	; 83
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	98 2f       	mov	r25, r24
    29c8:	98 7f       	andi	r25, 0xF8	; 248
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	86 81       	ldd	r24, Z+6	; 0x06
    29d0:	89 2b       	or	r24, r25
    29d2:	8c 93       	st	X, r24

				switch ((Config_ptr->mode))
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	3c 83       	std	Y+4, r19	; 0x04
    29e0:	2b 83       	std	Y+3, r18	; 0x03
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	82 30       	cpi	r24, 0x02	; 2
    29e8:	91 05       	cpc	r25, r1
    29ea:	51 f0       	breq	.+20     	; 0x2a00 <TIMER_init+0x2dc>
    29ec:	2b 81       	ldd	r18, Y+3	; 0x03
    29ee:	3c 81       	ldd	r19, Y+4	; 0x04
    29f0:	23 30       	cpi	r18, 0x03	; 3
    29f2:	31 05       	cpc	r19, r1
    29f4:	61 f1       	breq	.+88     	; 0x2a4e <TIMER_init+0x32a>
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	c1 f0       	breq	.+48     	; 0x2a2e <TIMER_init+0x30a>
    29fe:	2e c0       	rjmp	.+92     	; 0x2a5c <TIMER_init+0x338>
				{

				case TIMER02_MODE_COMPARE :

					/* Load OCR0 with compare value if compare mode is on */
					OCR2 = Config_ptr->compare_value;
    2a00:	a3 e4       	ldi	r26, 0x43	; 67
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	84 81       	ldd	r24, Z+4	; 0x04
    2a0a:	95 81       	ldd	r25, Z+5	; 0x05
    2a0c:	8c 93       	st	X, r24

					/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
					TIMSK = (TIMSK & 0x3F) | (1<<OCIE2);
    2a0e:	a9 e5       	ldi	r26, 0x59	; 89
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e9 e5       	ldi	r30, 0x59	; 89
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	8f 73       	andi	r24, 0x3F	; 63
    2a1a:	80 68       	ori	r24, 0x80	; 128
    2a1c:	8c 93       	st	X, r24

					/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2a1e:	a5 e4       	ldi	r26, 0x45	; 69
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e5 e4       	ldi	r30, 0x45	; 69
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	80 68       	ori	r24, 0x80	; 128
    2a2a:	8c 93       	st	X, r24
    2a2c:	17 c0       	rjmp	.+46     	; 0x2a5c <TIMER_init+0x338>


				case TIMER02_MODE_NORMAL :

					/* Clear OCIE2 & TOIE2 & Enable Timer2 NORMAL Interrupt (TOIE2) */
					TIMSK = (TIMSK & 0x3F) | (1<<TOIE2);
    2a2e:	a9 e5       	ldi	r26, 0x59	; 89
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e9 e5       	ldi	r30, 0x59	; 89
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 73       	andi	r24, 0x3F	; 63
    2a3a:	80 64       	ori	r24, 0x40	; 64
    2a3c:	8c 93       	st	X, r24

					/* FOC2 bit is only active when the WGM00 bit specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2a3e:	a5 e4       	ldi	r26, 0x45	; 69
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e5 e4       	ldi	r30, 0x45	; 69
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 68       	ori	r24, 0x80	; 128
    2a4a:	8c 93       	st	X, r24
    2a4c:	07 c0       	rjmp	.+14     	; 0x2a5c <TIMER_init+0x338>
					break;

				case TIMER02_MODE_FAST_PWM :

					/* FOC2 bit is only active when the WGM21:20 bits specifies a non-PWM mode */
					TCCR2 &= ~(1<<FOC2);
    2a4e:	a5 e4       	ldi	r26, 0x45	; 69
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e5 e4       	ldi	r30, 0x45	; 69
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 77       	andi	r24, 0x7F	; 127
    2a5a:	8c 93       	st	X, r24
					/* PWM Configuration at main application */
					break;
				}
				break;
	}
}
    2a5c:	2a 96       	adiw	r28, 0x0a	; 10
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <TIMER0_setCallback>:

void TIMER0_setCallback (void(*a_ptr)(void))
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <TIMER0_setCallback+0x6>
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer0Ptr = a_ptr;
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	90 93 31 01 	sts	0x0131, r25
    2a84:	80 93 30 01 	sts	0x0130, r24
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <TIMER1_setCallback>:

void TIMER1_setCallback (void(*a_ptr)(void))
{
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <TIMER1_setCallback+0x6>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer1Ptr = a_ptr;
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	90 93 33 01 	sts	0x0133, r25
    2aa8:	80 93 32 01 	sts	0x0132, r24
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <TIMER2_setCallback>:

void TIMER2_setCallback (void(*a_ptr)(void))
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <TIMER2_setCallback+0x6>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer2Ptr = a_ptr;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	90 93 35 01 	sts	0x0135, r25
    2acc:	80 93 34 01 	sts	0x0134, r24
}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <TIMER_DeInit>:

void TIMER_DeInit (uint8 TIMER_DeInit_ID)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <TIMER_DeInit+0x6>
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	89 83       	std	Y+1, r24	; 0x01
	switch (TIMER_DeInit_ID)
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	3b 83       	std	Y+3, r19	; 0x03
    2af0:	2a 83       	std	Y+2, r18	; 0x02
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	91 05       	cpc	r25, r1
    2afa:	d1 f0       	breq	.+52     	; 0x2b30 <TIMER_DeInit+0x56>
    2afc:	2a 81       	ldd	r18, Y+2	; 0x02
    2afe:	3b 81       	ldd	r19, Y+3	; 0x03
    2b00:	22 30       	cpi	r18, 0x02	; 2
    2b02:	31 05       	cpc	r19, r1
    2b04:	79 f1       	breq	.+94     	; 0x2b64 <TIMER_DeInit+0x8a>
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	d9 f5       	brne	.+118    	; 0x2b84 <TIMER_DeInit+0xaa>
	{

	case TIMER0_ID :

		/* Clear Timer values */
		TCNT0 = 0;
    2b0e:	e2 e5       	ldi	r30, 0x52	; 82
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	10 82       	st	Z, r1
		TCCR0 = 0;
    2b14:	e3 e5       	ldi	r30, 0x53	; 83
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	10 82       	st	Z, r1
		OCR0 = 0;
    2b1a:	ec e5       	ldi	r30, 0x5C	; 92
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    2b20:	a9 e5       	ldi	r26, 0x59	; 89
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e9 e5       	ldi	r30, 0x59	; 89
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	8c 7f       	andi	r24, 0xFC	; 252
    2b2c:	8c 93       	st	X, r24
    2b2e:	2a c0       	rjmp	.+84     	; 0x2b84 <TIMER_DeInit+0xaa>
		break;

	case TIMER1_ID :

		/* Clear Timer values */
		TCNT1 = 0;
    2b30:	ec e4       	ldi	r30, 0x4C	; 76
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	11 82       	std	Z+1, r1	; 0x01
    2b36:	10 82       	st	Z, r1
		TCCR1A = 0;
    2b38:	ef e4       	ldi	r30, 0x4F	; 79
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	10 82       	st	Z, r1
		TCCR1B = 0;
    2b3e:	ee e4       	ldi	r30, 0x4E	; 78
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	10 82       	st	Z, r1
		OCR1A = 0;
    2b44:	ea e4       	ldi	r30, 0x4A	; 74
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	11 82       	std	Z+1, r1	; 0x01
    2b4a:	10 82       	st	Z, r1
		OCR1B = 0;
    2b4c:	e8 e4       	ldi	r30, 0x48	; 72
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	11 82       	std	Z+1, r1	; 0x01
    2b52:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) & ~(1<<OCIE1B);
    2b54:	a9 e5       	ldi	r26, 0x59	; 89
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e9 e5       	ldi	r30, 0x59	; 89
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	83 7e       	andi	r24, 0xE3	; 227
    2b60:	8c 93       	st	X, r24
    2b62:	10 c0       	rjmp	.+32     	; 0x2b84 <TIMER_DeInit+0xaa>
		break;

	case TIMER2_ID :

		/* Clear Timer values */
		TCNT2 = 0;
    2b64:	e4 e4       	ldi	r30, 0x44	; 68
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	10 82       	st	Z, r1
		TCCR2 = 0;
    2b6a:	e5 e4       	ldi	r30, 0x45	; 69
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	10 82       	st	Z, r1
		OCR2 = 0;
    2b70:	e3 e4       	ldi	r30, 0x43	; 67
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    2b76:	a9 e5       	ldi	r26, 0x59	; 89
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e9 e5       	ldi	r30, 0x59	; 89
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 73       	andi	r24, 0x3F	; 63
    2b82:	8c 93       	st	X, r24

	}
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <setCallBackFunctionTimer1>:

/*******************************************************************************
 *                    		  Function Declarations                            *
 *******************************************************************************/
void setCallBackFunctionTimer1 (void)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2b98:	80 91 36 01 	lds	r24, 0x0136
    2b9c:	8f 5f       	subi	r24, 0xFF	; 255
    2b9e:	80 93 36 01 	sts	0x0136, r24
}
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <APP_startTimer_1Sec>:

void APP_startTimer_1Sec(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	2c 97       	sbiw	r28, 0x0c	; 12
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 1*8Mhz/1024 = 7812.5
	 * Generates interrupt every 1 second
	 */

	g_tick=0;
    2bbc:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	95 e1       	ldi	r25, 0x15	; 21
    2bc4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER1_setCallback>
	//	g_flag = TIMER_LCD_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,7812,TIMER_CLOCK_CPU_1024};
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	99 87       	std	Y+9, r25	; 0x09
    2bce:	88 87       	std	Y+8, r24	; 0x08
    2bd0:	e8 e1       	ldi	r30, 0x18	; 24
    2bd2:	f1 e0       	ldi	r31, 0x01	; 1
    2bd4:	fb 87       	std	Y+11, r31	; 0x0b
    2bd6:	ea 87       	std	Y+10, r30	; 0x0a
    2bd8:	f7 e0       	ldi	r31, 0x07	; 7
    2bda:	fc 87       	std	Y+12, r31	; 0x0c
    2bdc:	ea 85       	ldd	r30, Y+10	; 0x0a
    2bde:	fb 85       	ldd	r31, Y+11	; 0x0b
    2be0:	00 80       	ld	r0, Z
    2be2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	9b 87       	std	Y+11, r25	; 0x0b
    2bea:	8a 87       	std	Y+10, r24	; 0x0a
    2bec:	e8 85       	ldd	r30, Y+8	; 0x08
    2bee:	f9 85       	ldd	r31, Y+9	; 0x09
    2bf0:	00 82       	st	Z, r0
    2bf2:	88 85       	ldd	r24, Y+8	; 0x08
    2bf4:	99 85       	ldd	r25, Y+9	; 0x09
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	99 87       	std	Y+9, r25	; 0x09
    2bfa:	88 87       	std	Y+8, r24	; 0x08
    2bfc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bfe:	91 50       	subi	r25, 0x01	; 1
    2c00:	9c 87       	std	Y+12, r25	; 0x0c
    2c02:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c04:	ee 23       	and	r30, r30
    2c06:	51 f7       	brne	.-44     	; 0x2bdc <APP_startTimer_1Sec+0x34>
	TIMER_init(&configuration1);
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	0e 94 92 13 	call	0x2724	; 0x2724 <TIMER_init>
}
    2c10:	2c 96       	adiw	r28, 0x0c	; 12
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <APP_startTimer_3Sec>:
void APP_startTimer_3Sec(void)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	2c 97       	sbiw	r28, 0x0c	; 12
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar , Comparing mode with top value of 1024 (1 sec).
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 3*8Mhz/1024 = 23437.5
	 * Generates interrupt every 5 second
	 */

	g_tick=0;
    2c36:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2c3a:	88 ec       	ldi	r24, 0xC8	; 200
    2c3c:	95 e1       	ldi	r25, 0x15	; 21
    2c3e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER1_setCallback>
	//		g_flag = TIMER_MOTOR_MOVE_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,23437,TIMER_CLOCK_CPU_1024};
    2c42:	ce 01       	movw	r24, r28
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	99 87       	std	Y+9, r25	; 0x09
    2c48:	88 87       	std	Y+8, r24	; 0x08
    2c4a:	ef e1       	ldi	r30, 0x1F	; 31
    2c4c:	f1 e0       	ldi	r31, 0x01	; 1
    2c4e:	fb 87       	std	Y+11, r31	; 0x0b
    2c50:	ea 87       	std	Y+10, r30	; 0x0a
    2c52:	f7 e0       	ldi	r31, 0x07	; 7
    2c54:	fc 87       	std	Y+12, r31	; 0x0c
    2c56:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c58:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c5a:	00 80       	ld	r0, Z
    2c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	9b 87       	std	Y+11, r25	; 0x0b
    2c64:	8a 87       	std	Y+10, r24	; 0x0a
    2c66:	e8 85       	ldd	r30, Y+8	; 0x08
    2c68:	f9 85       	ldd	r31, Y+9	; 0x09
    2c6a:	00 82       	st	Z, r0
    2c6c:	88 85       	ldd	r24, Y+8	; 0x08
    2c6e:	99 85       	ldd	r25, Y+9	; 0x09
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	99 87       	std	Y+9, r25	; 0x09
    2c74:	88 87       	std	Y+8, r24	; 0x08
    2c76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c78:	91 50       	subi	r25, 0x01	; 1
    2c7a:	9c 87       	std	Y+12, r25	; 0x0c
    2c7c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c7e:	ee 23       	and	r30, r30
    2c80:	51 f7       	brne	.-44     	; 0x2c56 <APP_startTimer_3Sec+0x34>
	TIMER_init(&configuration1);
    2c82:	ce 01       	movw	r24, r28
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	0e 94 92 13 	call	0x2724	; 0x2724 <TIMER_init>
}
    2c8a:	2c 96       	adiw	r28, 0x0c	; 12
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <APP_startTimer_6Sec>:

void APP_startTimer_6Sec(void)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	2c 97       	sbiw	r28, 0x0c	; 12
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
	/* Timer delay Configurations for 6 Second delay:
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 6*8Mhz/1024 = 46875
	 * Generates interrupt every 6 seconds
	 */
	g_tick=0;
    2cb0:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2cb4:	88 ec       	ldi	r24, 0xC8	; 200
    2cb6:	95 e1       	ldi	r25, 0x15	; 21
    2cb8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER1_setCallback>
	//	g_flag = TIMER_BUZZER_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,46875,TIMER_CLOCK_CPU_1024};
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	99 87       	std	Y+9, r25	; 0x09
    2cc2:	88 87       	std	Y+8, r24	; 0x08
    2cc4:	e6 e2       	ldi	r30, 0x26	; 38
    2cc6:	f1 e0       	ldi	r31, 0x01	; 1
    2cc8:	fb 87       	std	Y+11, r31	; 0x0b
    2cca:	ea 87       	std	Y+10, r30	; 0x0a
    2ccc:	f7 e0       	ldi	r31, 0x07	; 7
    2cce:	fc 87       	std	Y+12, r31	; 0x0c
    2cd0:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cd2:	fb 85       	ldd	r31, Y+11	; 0x0b
    2cd4:	00 80       	ld	r0, Z
    2cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	9b 87       	std	Y+11, r25	; 0x0b
    2cde:	8a 87       	std	Y+10, r24	; 0x0a
    2ce0:	e8 85       	ldd	r30, Y+8	; 0x08
    2ce2:	f9 85       	ldd	r31, Y+9	; 0x09
    2ce4:	00 82       	st	Z, r0
    2ce6:	88 85       	ldd	r24, Y+8	; 0x08
    2ce8:	99 85       	ldd	r25, Y+9	; 0x09
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	99 87       	std	Y+9, r25	; 0x09
    2cee:	88 87       	std	Y+8, r24	; 0x08
    2cf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cf2:	91 50       	subi	r25, 0x01	; 1
    2cf4:	9c 87       	std	Y+12, r25	; 0x0c
    2cf6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cf8:	ee 23       	and	r30, r30
    2cfa:	51 f7       	brne	.-44     	; 0x2cd0 <APP_startTimer_6Sec+0x34>
	TIMER_init(&configuration1);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	0e 94 92 13 	call	0x2724	; 0x2724 <TIMER_init>
}
    2d04:	2c 96       	adiw	r28, 0x0c	; 12
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <APP_Timer1DelayForScreenCheck>:

void APP_Timer1DelayForScreenCheck(void)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	while (g_tick !=1);
    2d1e:	80 91 36 01 	lds	r24, 0x0136
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	e1 f7       	brne	.-8      	; 0x2d1e <APP_Timer1DelayForScreenCheck+0x8>
	g_tick=0;
    2d26:	10 92 36 01 	sts	0x0136, r1
	TIMER_DeInit(TIMER1_ID);
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER_DeInit>

}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <APP_Timer1DelayForBuzzerCheck>:
void APP_Timer1DelayForBuzzerCheck(void)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
	/* Must call APP_startTimer_6Sec before to identify g_tick every 6 sec */
	/* Delay for 60 second */
	while (g_tick !=10);
    2d3e:	80 91 36 01 	lds	r24, 0x0136
    2d42:	8a 30       	cpi	r24, 0x0A	; 10
    2d44:	e1 f7       	brne	.-8      	; 0x2d3e <APP_Timer1DelayForBuzzerCheck+0x8>
	g_tick = 0;
    2d46:	10 92 36 01 	sts	0x0136, r1
	TIMER_DeInit(TIMER1_ID);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER_DeInit>

}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <UART_init+0x6>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <UART_init+0x8>
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	9c 83       	std	Y+4, r25	; 0x04
    2d64:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d66:	1a 82       	std	Y+2, r1	; 0x02
    2d68:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d6a:	eb e2       	ldi	r30, 0x2B	; 43
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Number of Bits using Dynamic Configuration
	 * RXB8 & TXB8 is used only for 9-bit data mode (when UCSZ2 = 1)
	 ***********************************************************************/ 

	UCSRB = (1<<RXEN) | (1<<TXEN); //| (1<<RXCIE);
    2d72:	ea e2       	ldi	r30, 0x2A	; 42
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	88 e1       	ldi	r24, 0x18	; 24
    2d78:	80 83       	st	Z, r24

	/*
	 * & with FB to clear UCSZ2 bit (bit2) and preserve the other bits.
	 * &(1<<2) to get the UCSZ2 bit without UCSZ1 & UCSZ0
	 */
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr ->data_bits) & (1<<2));
    2d7a:	aa e2       	ldi	r26, 0x2A	; 42
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	ea e2       	ldi	r30, 0x2A	; 42
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	98 2f       	mov	r25, r24
    2d86:	9b 7f       	andi	r25, 0xFB	; 251
    2d88:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8c:	84 81       	ldd	r24, Z+4	; 0x04
    2d8e:	84 70       	andi	r24, 0x04	; 4
    2d90:	89 2b       	or	r24, r25
    2d92:	8c 93       	st	X, r24

	/* Set RXB8 & TXB8 if we're operating 9-bits mode */
	if ( (Config_Ptr ->data_bits) & (1<<2))
    2d94:	eb 81       	ldd	r30, Y+3	; 0x03
    2d96:	fc 81       	ldd	r31, Y+4	; 0x04
    2d98:	84 81       	ldd	r24, Z+4	; 0x04
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	84 70       	andi	r24, 0x04	; 4
    2da0:	90 70       	andi	r25, 0x00	; 0
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	39 f0       	breq	.+14     	; 0x2db4 <UART_init+0x5e>
		{
			UCSRB |= (1<<RXB8) | (1<<TXB8);
    2da6:	aa e2       	ldi	r26, 0x2A	; 42
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	ea e2       	ldi	r30, 0x2A	; 42
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	83 60       	ori	r24, 0x03	; 3
    2db2:	8c 93       	st	X, r24
	 * UPM1:0  = Determine Number of parity bits using dynamic Configuration.
	 * USBS    = Determine Number of stop bits using dynamic configuration.
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2db4:	e0 e4       	ldi	r30, 0x40	; 64
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 e8       	ldi	r24, 0x80	; 128
    2dba:	80 83       	st	Z, r24

	/*
	 * &0xCF to clear UPM1 (bit 5) & UPM2 (bit4) and preserve the other bits.
	 * <<4 to insert the parity bits in UMP1 & UMP2.
	 */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr ->parity)<<4);
    2dbc:	a0 e4       	ldi	r26, 0x40	; 64
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e0 e4       	ldi	r30, 0x40	; 64
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	2f 7c       	andi	r18, 0xCF	; 207
    2dca:	eb 81       	ldd	r30, Y+3	; 0x03
    2dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dce:	85 81       	ldd	r24, Z+5	; 0x05
    2dd0:	88 2f       	mov	r24, r24
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	82 95       	swap	r24
    2dd6:	92 95       	swap	r25
    2dd8:	90 7f       	andi	r25, 0xF0	; 240
    2dda:	98 27       	eor	r25, r24
    2ddc:	80 7f       	andi	r24, 0xF0	; 240
    2dde:	98 27       	eor	r25, r24
    2de0:	82 2b       	or	r24, r18
    2de2:	8c 93       	st	X, r24
	/*
	 * &0xF7 to clear USBS (bit 3) and preserve the other bits.
	 * <<3 to insert the stop bit in USBS
	 *
	 */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr ->stop)<<3);
    2de4:	a0 e4       	ldi	r26, 0x40	; 64
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e0 e4       	ldi	r30, 0x40	; 64
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	28 2f       	mov	r18, r24
    2df0:	27 7f       	andi	r18, 0xF7	; 247
    2df2:	eb 81       	ldd	r30, Y+3	; 0x03
    2df4:	fc 81       	ldd	r31, Y+4	; 0x04
    2df6:	86 81       	ldd	r24, Z+6	; 0x06
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	82 2b       	or	r24, r18
    2e0a:	8c 93       	st	X, r24
	 * &0xF9 to clear UCSZ0 (bit 1) & UCSZ1 (bit 2) and preserve the other bits.
	 * &0x03 to get UCSZ0 & UCSZ1 without UCSZ2.
	 * <<1 to insert the character size bits in UCSZ1 & UCSZ0.
	 *
	 */
	UCSRC = (UCSRC & 0xF9) | ( ((Config_Ptr ->data_bits)&0x03) <<1);
    2e0c:	a0 e4       	ldi	r26, 0x40	; 64
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e0 e4       	ldi	r30, 0x40	; 64
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	28 2f       	mov	r18, r24
    2e18:	29 7f       	andi	r18, 0xF9	; 249
    2e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e1e:	84 81       	ldd	r24, Z+4	; 0x04
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	83 70       	andi	r24, 0x03	; 3
    2e26:	90 70       	andi	r25, 0x00	; 0
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	82 2b       	or	r24, r18
    2e2e:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->bitRate) * 8UL))) - 1);
    2e30:	eb 81       	ldd	r30, Y+3	; 0x03
    2e32:	fc 81       	ldd	r31, Y+4	; 0x04
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	a2 81       	ldd	r26, Z+2	; 0x02
    2e3a:	b3 81       	ldd	r27, Z+3	; 0x03
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	aa 1f       	adc	r26, r26
    2e42:	bb 1f       	adc	r27, r27
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	aa 1f       	adc	r26, r26
    2e4a:	bb 1f       	adc	r27, r27
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	aa 1f       	adc	r26, r26
    2e52:	bb 1f       	adc	r27, r27
    2e54:	9c 01       	movw	r18, r24
    2e56:	ad 01       	movw	r20, r26
    2e58:	80 e4       	ldi	r24, 0x40	; 64
    2e5a:	92 e4       	ldi	r25, 0x42	; 66
    2e5c:	af e0       	ldi	r26, 0x0F	; 15
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodsi4>
    2e68:	da 01       	movw	r26, r20
    2e6a:	c9 01       	movw	r24, r18
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	9a 83       	std	Y+2, r25	; 0x02
    2e70:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 * Example : 111100000000
	 * UBRRL is = 00000000
	 * UBRRH = 111100000000>>8 = xxxxxxxx1111
	 */
	UBRRH = ubrr_value>>8;
    2e72:	e0 e4       	ldi	r30, 0x40	; 64
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	89 2f       	mov	r24, r25
    2e7c:	99 27       	eor	r25, r25
    2e7e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e80:	e9 e2       	ldi	r30, 0x29	; 41
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	80 83       	st	Z, r24
}
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	0f 92       	push	r0
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ea2:	eb e2       	ldi	r30, 0x2B	; 43
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	80 72       	andi	r24, 0x20	; 32
    2eae:	90 70       	andi	r25, 0x00	; 0
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	b9 f3       	breq	.-18     	; 0x2ea2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2eb4:	ec e2       	ldi	r30, 0x2C	; 44
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ecc:	eb e2       	ldi	r30, 0x2B	; 43
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	88 23       	and	r24, r24
    2ed4:	dc f7       	brge	.-10     	; 0x2ecc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2ed6:	ec e2       	ldi	r30, 0x2C	; 44
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <UART_sendString+0x6>
    2ee8:	0f 92       	push	r0
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	9b 83       	std	Y+3, r25	; 0x03
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ef2:	19 82       	std	Y+1, r1	; 0x01
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	fc 01       	movw	r30, r24
    2f02:	e2 0f       	add	r30, r18
    2f04:	f3 1f       	adc	r31, r19
    2f06:	80 81       	ld	r24, Z
    2f08:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UART_sendByte>
		i++;
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	e2 0f       	add	r30, r18
    2f20:	f3 1f       	adc	r31, r19
    2f22:	80 81       	ld	r24, Z
    2f24:	88 23       	and	r24, r24
    2f26:	39 f7       	brne	.-50     	; 0x2ef6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <UART_receiveString+0xa>
    2f3e:	0f 92       	push	r0
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	9b 83       	std	Y+3, r25	; 0x03
    2f46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f48:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	8c 01       	movw	r16, r24
    2f56:	02 0f       	add	r16, r18
    2f58:	13 1f       	adc	r17, r19
    2f5a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <UART_recieveByte>
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <UART_receiveString+0x4e>
	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
	{
		i++;
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	8c 01       	movw	r16, r24
    2f76:	02 0f       	add	r16, r18
    2f78:	13 1f       	adc	r17, r19
    2f7a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <UART_recieveByte>
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 83       	st	Z, r24
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e2 0f       	add	r30, r18
    2f90:	f3 1f       	adc	r31, r19
    2f92:	80 81       	ld	r24, Z
    2f94:	83 32       	cpi	r24, 0x23	; 35
    2f96:	31 f7       	brne	.-52     	; 0x2f64 <UART_receiveString+0x30>
		Str[i] = UART_recieveByte();
	}
	/* Can be done by do while to receive the first byte safely */

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	10 82       	st	Z, r1
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <__udivmodsi4>:
    2fba:	a1 e2       	ldi	r26, 0x21	; 33
    2fbc:	1a 2e       	mov	r1, r26
    2fbe:	aa 1b       	sub	r26, r26
    2fc0:	bb 1b       	sub	r27, r27
    2fc2:	fd 01       	movw	r30, r26
    2fc4:	0d c0       	rjmp	.+26     	; 0x2fe0 <__udivmodsi4_ep>

00002fc6 <__udivmodsi4_loop>:
    2fc6:	aa 1f       	adc	r26, r26
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	ee 1f       	adc	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	a2 17       	cp	r26, r18
    2fd0:	b3 07       	cpc	r27, r19
    2fd2:	e4 07       	cpc	r30, r20
    2fd4:	f5 07       	cpc	r31, r21
    2fd6:	20 f0       	brcs	.+8      	; 0x2fe0 <__udivmodsi4_ep>
    2fd8:	a2 1b       	sub	r26, r18
    2fda:	b3 0b       	sbc	r27, r19
    2fdc:	e4 0b       	sbc	r30, r20
    2fde:	f5 0b       	sbc	r31, r21

00002fe0 <__udivmodsi4_ep>:
    2fe0:	66 1f       	adc	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	1a 94       	dec	r1
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <__udivmodsi4_loop>
    2fec:	60 95       	com	r22
    2fee:	70 95       	com	r23
    2ff0:	80 95       	com	r24
    2ff2:	90 95       	com	r25
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	bd 01       	movw	r22, r26
    2ffa:	cf 01       	movw	r24, r30
    2ffc:	08 95       	ret

00002ffe <__prologue_saves__>:
    2ffe:	2f 92       	push	r2
    3000:	3f 92       	push	r3
    3002:	4f 92       	push	r4
    3004:	5f 92       	push	r5
    3006:	6f 92       	push	r6
    3008:	7f 92       	push	r7
    300a:	8f 92       	push	r8
    300c:	9f 92       	push	r9
    300e:	af 92       	push	r10
    3010:	bf 92       	push	r11
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	ca 1b       	sub	r28, r26
    3028:	db 0b       	sbc	r29, r27
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	09 94       	ijmp

00003036 <__epilogue_restores__>:
    3036:	2a 88       	ldd	r2, Y+18	; 0x12
    3038:	39 88       	ldd	r3, Y+17	; 0x11
    303a:	48 88       	ldd	r4, Y+16	; 0x10
    303c:	5f 84       	ldd	r5, Y+15	; 0x0f
    303e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3040:	7d 84       	ldd	r7, Y+13	; 0x0d
    3042:	8c 84       	ldd	r8, Y+12	; 0x0c
    3044:	9b 84       	ldd	r9, Y+11	; 0x0b
    3046:	aa 84       	ldd	r10, Y+10	; 0x0a
    3048:	b9 84       	ldd	r11, Y+9	; 0x09
    304a:	c8 84       	ldd	r12, Y+8	; 0x08
    304c:	df 80       	ldd	r13, Y+7	; 0x07
    304e:	ee 80       	ldd	r14, Y+6	; 0x06
    3050:	fd 80       	ldd	r15, Y+5	; 0x05
    3052:	0c 81       	ldd	r16, Y+4	; 0x04
    3054:	1b 81       	ldd	r17, Y+3	; 0x03
    3056:	aa 81       	ldd	r26, Y+2	; 0x02
    3058:	b9 81       	ldd	r27, Y+1	; 0x01
    305a:	ce 0f       	add	r28, r30
    305c:	d1 1d       	adc	r29, r1
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	ed 01       	movw	r28, r26
    306a:	08 95       	ret

0000306c <itoa>:
    306c:	fb 01       	movw	r30, r22
    306e:	9f 01       	movw	r18, r30
    3070:	e8 94       	clt
    3072:	42 30       	cpi	r20, 0x02	; 2
    3074:	c4 f0       	brlt	.+48     	; 0x30a6 <itoa+0x3a>
    3076:	45 32       	cpi	r20, 0x25	; 37
    3078:	b4 f4       	brge	.+44     	; 0x30a6 <itoa+0x3a>
    307a:	4a 30       	cpi	r20, 0x0A	; 10
    307c:	29 f4       	brne	.+10     	; 0x3088 <itoa+0x1c>
    307e:	97 fb       	bst	r25, 7
    3080:	1e f4       	brtc	.+6      	; 0x3088 <itoa+0x1c>
    3082:	90 95       	com	r25
    3084:	81 95       	neg	r24
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	64 2f       	mov	r22, r20
    308a:	77 27       	eor	r23, r23
    308c:	0e 94 67 18 	call	0x30ce	; 0x30ce <__udivmodhi4>
    3090:	80 5d       	subi	r24, 0xD0	; 208
    3092:	8a 33       	cpi	r24, 0x3A	; 58
    3094:	0c f0       	brlt	.+2      	; 0x3098 <itoa+0x2c>
    3096:	89 5d       	subi	r24, 0xD9	; 217
    3098:	81 93       	st	Z+, r24
    309a:	cb 01       	movw	r24, r22
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	a1 f7       	brne	.-24     	; 0x3088 <itoa+0x1c>
    30a0:	16 f4       	brtc	.+4      	; 0x30a6 <itoa+0x3a>
    30a2:	5d e2       	ldi	r21, 0x2D	; 45
    30a4:	51 93       	st	Z+, r21
    30a6:	10 82       	st	Z, r1
    30a8:	c9 01       	movw	r24, r18
    30aa:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <strrev>

000030ae <strrev>:
    30ae:	dc 01       	movw	r26, r24
    30b0:	fc 01       	movw	r30, r24
    30b2:	67 2f       	mov	r22, r23
    30b4:	71 91       	ld	r23, Z+
    30b6:	77 23       	and	r23, r23
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <strrev+0x4>
    30ba:	32 97       	sbiw	r30, 0x02	; 2
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <strrev+0x18>
    30be:	7c 91       	ld	r23, X
    30c0:	6d 93       	st	X+, r22
    30c2:	70 83       	st	Z, r23
    30c4:	62 91       	ld	r22, -Z
    30c6:	ae 17       	cp	r26, r30
    30c8:	bf 07       	cpc	r27, r31
    30ca:	c8 f3       	brcs	.-14     	; 0x30be <strrev+0x10>
    30cc:	08 95       	ret

000030ce <__udivmodhi4>:
    30ce:	aa 1b       	sub	r26, r26
    30d0:	bb 1b       	sub	r27, r27
    30d2:	51 e1       	ldi	r21, 0x11	; 17
    30d4:	07 c0       	rjmp	.+14     	; 0x30e4 <__udivmodhi4_ep>

000030d6 <__udivmodhi4_loop>:
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	a6 17       	cp	r26, r22
    30dc:	b7 07       	cpc	r27, r23
    30de:	10 f0       	brcs	.+4      	; 0x30e4 <__udivmodhi4_ep>
    30e0:	a6 1b       	sub	r26, r22
    30e2:	b7 0b       	sbc	r27, r23

000030e4 <__udivmodhi4_ep>:
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	5a 95       	dec	r21
    30ea:	a9 f7       	brne	.-22     	; 0x30d6 <__udivmodhi4_loop>
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	08 95       	ret

000030f6 <_exit>:
    30f6:	f8 94       	cli

000030f8 <__stop_program>:
    30f8:	ff cf       	rjmp	.-2      	; 0x30f8 <__stop_program>
