
Micro1-HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00003126  000031ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080012e  0080012e  00003288  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019d6  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_3>
      10:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__vector_6>
      1c:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__vector_7>
      20:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__vector_8>
      24:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 11 	call	0x2310	; 0x2310 <main>
      8a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e0       	ldi	r26, 0x09	; 9
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e0       	ldi	r24, 0x09	; 9
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MICROCONTROLLER_init>:
/*******************************************************************************
 *                    		  Function Declarations                            *
 *******************************************************************************/

void MICROCONTROLLER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_init>

	UART_ConfigType UART_configPtr = {UART_BIT_RATE_9600_BITS_PER_SECONDS,UART_EIGHT_BIT_DATA_MODE,UART_PARITY_DISABLED,UART_ONE_STOP_BIT};
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	99 87       	std	Y+9, r25	; 0x09
     b64:	88 87       	std	Y+8, r24	; 0x08
     b66:	e1 e1       	ldi	r30, 0x11	; 17
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	fb 87       	std	Y+11, r31	; 0x0b
     b6c:	ea 87       	std	Y+10, r30	; 0x0a
     b6e:	f7 e0       	ldi	r31, 0x07	; 7
     b70:	fc 87       	std	Y+12, r31	; 0x0c
     b72:	ea 85       	ldd	r30, Y+10	; 0x0a
     b74:	fb 85       	ldd	r31, Y+11	; 0x0b
     b76:	00 80       	ld	r0, Z
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8a 87       	std	Y+10, r24	; 0x0a
     b82:	e8 85       	ldd	r30, Y+8	; 0x08
     b84:	f9 85       	ldd	r31, Y+9	; 0x09
     b86:	00 82       	st	Z, r0
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	99 87       	std	Y+9, r25	; 0x09
     b90:	88 87       	std	Y+8, r24	; 0x08
     b92:	9c 85       	ldd	r25, Y+12	; 0x0c
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	ec 85       	ldd	r30, Y+12	; 0x0c
     b9a:	ee 23       	and	r30, r30
     b9c:	51 f7       	brne	.-44     	; 0xb72 <MICROCONTROLLER_init+0x2c>
	UART_init(&UART_configPtr);
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <UART_init>
}
     ba6:	2c 96       	adiw	r28, 0x0c	; 12
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <APP_askForPasswordFirstTime>:


void APP_askForPasswordFirstTime(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	60 97       	sbiw	r28, 0x10	; 16
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     bcc:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     bce:	1f 86       	std	Y+15, r1	; 0x0f

	/* When called from New Password function */
	LCD_clearScreen();
     bd0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter New Pass:");
     bd4:	20 e6       	ldi	r18, 0x60	; 96
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayStringRowColumn>

	/* Move cursor to second line */
	LCD_moveCursor(1,0);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_moveCursor>

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(PASSWORD_UNCHECKED_FIRST_TIME);
     bea:	81 e2       	ldi	r24, 0x21	; 33
     bec:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     bf0:	8d c0       	rjmp	.+282    	; 0xd0c <APP_askForPasswordFirstTime+0x154>

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {

		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     bf2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <KEYPAD_getPressedKey>
     bf6:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ( ((g_keypad_button > 0) && (g_keypad_button <=9)) || (g_keypad_button == '0'))
     bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfa:	88 23       	and	r24, r24
     bfc:	19 f0       	breq	.+6      	; 0xc04 <APP_askForPasswordFirstTime+0x4c>
     bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     c00:	8a 30       	cpi	r24, 0x0A	; 10
     c02:	18 f0       	brcs	.+6      	; 0xc0a <APP_askForPasswordFirstTime+0x52>
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	80 33       	cpi	r24, 0x30	; 48
     c08:	39 f4       	brne	.+14     	; 0xc18 <APP_askForPasswordFirstTime+0x60>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0c:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>

			/* Display * for every character input */
			LCD_displayCharacter('*');
     c10:	8a e2       	ldi	r24, 0x2A	; 42
     c12:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_displayCharacter>
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <APP_askForPasswordFirstTime+0x70>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     c18:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1a:	8d 30       	cpi	r24, 0x0D	; 13
     c1c:	29 f4       	brne	.+10     	; 0xc28 <APP_askForPasswordFirstTime+0x70>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     c22:	8e e5       	ldi	r24, 0x5E	; 94
     c24:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e8       	ldi	r25, 0x80	; 128
     c2c:	ab e3       	ldi	r26, 0x3B	; 59
     c2e:	b5 e4       	ldi	r27, 0x45	; 69
     c30:	8b 87       	std	Y+11, r24	; 0x0b
     c32:	9c 87       	std	Y+12, r25	; 0x0c
     c34:	ad 87       	std	Y+13, r26	; 0x0d
     c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c38:	6b 85       	ldd	r22, Y+11	; 0x0b
     c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	4a e7       	ldi	r20, 0x7A	; 122
     c46:	53 e4       	ldi	r21, 0x43	; 67
     c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8f 83       	std	Y+7, r24	; 0x07
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	a9 87       	std	Y+9, r26	; 0x09
     c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c58:	6f 81       	ldd	r22, Y+7	; 0x07
     c5a:	78 85       	ldd	r23, Y+8	; 0x08
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <APP_askForPasswordFirstTime+0xc2>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9e 83       	std	Y+6, r25	; 0x06
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <APP_askForPasswordFirstTime+0x140>
	else if (__tmp > 65535)
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	3f ef       	ldi	r19, 0xFF	; 255
     c86:	4f e7       	ldi	r20, 0x7F	; 127
     c88:	57 e4       	ldi	r21, 0x47	; 71
     c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <APP_askForPasswordFirstTime+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	6b 85       	ldd	r22, Y+11	; 0x0b
     c94:	7c 85       	ldd	r23, Y+12	; 0x0c
     c96:	8d 85       	ldd	r24, Y+13	; 0x0d
     c98:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e2       	ldi	r20, 0x20	; 32
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8d 83       	std	Y+5, r24	; 0x05
     cba:	0f c0       	rjmp	.+30     	; 0xcda <APP_askForPasswordFirstTime+0x122>
     cbc:	89 e1       	ldi	r24, 0x19	; 25
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <APP_askForPasswordFirstTime+0x110>
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	9e 81       	ldd	r25, Y+6	; 0x06
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	69 f7       	brne	.-38     	; 0xcbc <APP_askForPasswordFirstTime+0x104>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <APP_askForPasswordFirstTime+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	6f 81       	ldd	r22, Y+7	; 0x07
     ce6:	78 85       	ldd	r23, Y+8	; 0x08
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9e 83       	std	Y+6, r25	; 0x06
     cf6:	8d 83       	std	Y+5, r24	; 0x05
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <APP_askForPasswordFirstTime+0x14c>
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(PASSWORD_UNCHECKED_FIRST_TIME);

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
     d0c:	88 89       	ldd	r24, Y+16	; 0x10
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <APP_askForPasswordFirstTime+0x15c>
     d12:	6f cf       	rjmp	.-290    	; 0xbf2 <APP_askForPasswordFirstTime+0x3a>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
     d14:	60 96       	adiw	r28, 0x10	; 16
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <APP_confirmPasswordFirstTime>:

void APP_confirmPasswordFirstTime(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	60 97       	sbiw	r28, 0x10	; 16
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     d3a:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     d3c:	1f 86       	std	Y+15, r1	; 0x0f

	/* Show once at first and move cursor to second line*/
	LCD_clearScreen();
     d3e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Pass:");
     d42:	20 e7       	ldi	r18, 0x70	; 112
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	a9 01       	movw	r20, r18
     d4c:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_moveCursor>

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(SECOND_PASSWORD_UNCHECKED_FIRST_TIME);
     d58:	89 e2       	ldi	r24, 0x29	; 41
     d5a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     d5e:	8d c0       	rjmp	.+282    	; 0xe7a <APP_confirmPasswordFirstTime+0x154>

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     d60:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <KEYPAD_getPressedKey>
     d64:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ( ((g_keypad_button > 0) && (g_keypad_button <=9)) || (g_keypad_button == '0'))
     d66:	8f 85       	ldd	r24, Y+15	; 0x0f
     d68:	88 23       	and	r24, r24
     d6a:	19 f0       	breq	.+6      	; 0xd72 <APP_confirmPasswordFirstTime+0x4c>
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	8a 30       	cpi	r24, 0x0A	; 10
     d70:	18 f0       	brcs	.+6      	; 0xd78 <APP_confirmPasswordFirstTime+0x52>
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	80 33       	cpi	r24, 0x30	; 48
     d76:	39 f4       	brne	.+14     	; 0xd86 <APP_confirmPasswordFirstTime+0x60>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     d78:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>

			/* Display * for every character input */
			LCD_displayCharacter('*');
     d7e:	8a e2       	ldi	r24, 0x2A	; 42
     d80:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_displayCharacter>
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <APP_confirmPasswordFirstTime+0x70>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     d86:	8f 85       	ldd	r24, Y+15	; 0x0f
     d88:	8d 30       	cpi	r24, 0x0D	; 13
     d8a:	29 f4       	brne	.+10     	; 0xd96 <APP_confirmPasswordFirstTime+0x70>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     d90:	8e e5       	ldi	r24, 0x5E	; 94
     d92:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e8       	ldi	r25, 0x80	; 128
     d9a:	ab e3       	ldi	r26, 0x3B	; 59
     d9c:	b5 e4       	ldi	r27, 0x45	; 69
     d9e:	8b 87       	std	Y+11, r24	; 0x0b
     da0:	9c 87       	std	Y+12, r25	; 0x0c
     da2:	ad 87       	std	Y+13, r26	; 0x0d
     da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a e7       	ldi	r20, 0x7A	; 122
     db4:	53 e4       	ldi	r21, 0x43	; 67
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8f 83       	std	Y+7, r24	; 0x07
     dc0:	98 87       	std	Y+8, r25	; 0x08
     dc2:	a9 87       	std	Y+9, r26	; 0x09
     dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc6:	6f 81       	ldd	r22, Y+7	; 0x07
     dc8:	78 85       	ldd	r23, Y+8	; 0x08
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	2c f4       	brge	.+10     	; 0xde8 <APP_confirmPasswordFirstTime+0xc2>
		__ticks = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	3f c0       	rjmp	.+126    	; 0xe66 <APP_confirmPasswordFirstTime+0x140>
	else if (__tmp > 65535)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	4c f5       	brge	.+82     	; 0xe52 <APP_confirmPasswordFirstTime+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e00:	6b 85       	ldd	r22, Y+11	; 0x0b
     e02:	7c 85       	ldd	r23, Y+12	; 0x0c
     e04:	8d 85       	ldd	r24, Y+13	; 0x0d
     e06:	9e 85       	ldd	r25, Y+14	; 0x0e
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <APP_confirmPasswordFirstTime+0x122>
     e2a:	89 e1       	ldi	r24, 0x19	; 25
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <APP_confirmPasswordFirstTime+0x110>
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	69 f7       	brne	.-38     	; 0xe2a <APP_confirmPasswordFirstTime+0x104>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <APP_confirmPasswordFirstTime+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <APP_confirmPasswordFirstTime+0x14c>
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01

	/* Sends to Micro2 to be prepared to receive first time password */
	UART_sendByte(SECOND_PASSWORD_UNCHECKED_FIRST_TIME);

	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
     e7a:	88 89       	ldd	r24, Y+16	; 0x10
     e7c:	88 23       	and	r24, r24
     e7e:	09 f4       	brne	.+2      	; 0xe82 <APP_confirmPasswordFirstTime+0x15c>
     e80:	6f cf       	rjmp	.-290    	; 0xd60 <APP_confirmPasswordFirstTime+0x3a>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
     e82:	60 96       	adiw	r28, 0x10	; 16
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <APP_askForPassword>:

void APP_askForPassword(void)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	60 97       	sbiw	r28, 0x10	; 16
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
	/* Flag that indicates that we have finish entering the password */
	uint8 password_entry_finished = 0;
     ea8:	18 8a       	std	Y+16, r1	; 0x10

	/* To get the pressed button */
	uint8 g_keypad_button = 0;
     eaa:	1f 86       	std	Y+15, r1	; 0x0f

	/* Show once at first */
	LCD_clearScreen();
     eac:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass:");
     eb0:	2f e7       	ldi	r18, 0x7F	; 127
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayStringRowColumn>

	/* Move cursor to second line */
	LCD_moveCursor(1,0);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_moveCursor>

	if (g_change ==0)
     ec6:	80 91 2f 01 	lds	r24, 0x012F
     eca:	88 23       	and	r24, r24
     ecc:	21 f4       	brne	.+8      	; 0xed6 <APP_askForPassword+0x42>
	{
		/* Sends to Micro2 to be prepared to receive first time password */
		UART_sendByte(PASSWORD_UNCHECKED_FOR_DOOR);
     ece:	8b e4       	ldi	r24, 0x4B	; 75
     ed0:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     ed4:	9e c0       	rjmp	.+316    	; 0x1012 <APP_askForPassword+0x17e>
	}
	else if (g_change ==1)
     ed6:	80 91 2f 01 	lds	r24, 0x012F
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	21 f4       	brne	.+8      	; 0xee6 <APP_askForPassword+0x52>
	{
		UART_sendByte(PASSWORD_UNCHECKED_FOR_CHANGE);
     ede:	8d e4       	ldi	r24, 0x4D	; 77
     ee0:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     ee4:	96 c0       	rjmp	.+300    	; 0x1012 <APP_askForPassword+0x17e>
	}
	else if (g_change ==2)
     ee6:	80 91 2f 01 	lds	r24, 0x012F
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	09 f0       	breq	.+2      	; 0xef0 <APP_askForPassword+0x5c>
     eee:	91 c0       	rjmp	.+290    	; 0x1012 <APP_askForPassword+0x17e>
	{
		UART_sendByte(PASSWORD_UNCHECKED_LOGIN);
     ef0:	8c e4       	ldi	r24, 0x4C	; 76
     ef2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     ef6:	8d c0       	rjmp	.+282    	; 0x1012 <APP_askForPassword+0x17e>
	}
	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {

		/* Get key from user */
		g_keypad_button = KEYPAD_getPressedKey();
     ef8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <KEYPAD_getPressedKey>
     efc:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check if it's a valid number (0-9) */
		if ( ((g_keypad_button > 0) && (g_keypad_button <=9)) || (g_keypad_button == '0'))
     efe:	8f 85       	ldd	r24, Y+15	; 0x0f
     f00:	88 23       	and	r24, r24
     f02:	19 f0       	breq	.+6      	; 0xf0a <APP_askForPassword+0x76>
     f04:	8f 85       	ldd	r24, Y+15	; 0x0f
     f06:	8a 30       	cpi	r24, 0x0A	; 10
     f08:	18 f0       	brcs	.+6      	; 0xf10 <APP_askForPassword+0x7c>
     f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	39 f4       	brne	.+14     	; 0xf1e <APP_askForPassword+0x8a>
		{
			/* Send it to Micro 2 */
			UART_sendByte(g_keypad_button);
     f10:	8f 85       	ldd	r24, Y+15	; 0x0f
     f12:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>

//			LCD_intgerToString(g_keypad_button);
			/* Display * for every character input */
			LCD_displayCharacter('*');
     f16:	8a e2       	ldi	r24, 0x2A	; 42
     f18:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_displayCharacter>
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <APP_askForPassword+0x9a>
		}

		/* Check if the user finished entering the password */
		else if (g_keypad_button == KEYPAD_ENTER_BUTTON)
     f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f20:	8d 30       	cpi	r24, 0x0D	; 13
     f22:	29 f4       	brne	.+10     	; 0xf2e <APP_askForPassword+0x9a>
		{
			/* Set the flag to 1 to break out of the loop*/
			password_entry_finished=1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	88 8b       	std	Y+16, r24	; 0x10

			/* Send to Micro2 that user have finished entering the pass */
			UART_sendByte(APP_END_OF_PASSWORD);
     f28:	8e e5       	ldi	r24, 0x5E	; 94
     f2a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e8       	ldi	r25, 0x80	; 128
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b5 e4       	ldi	r27, 0x45	; 69
     f36:	8b 87       	std	Y+11, r24	; 0x0b
     f38:	9c 87       	std	Y+12, r25	; 0x0c
     f3a:	ad 87       	std	Y+13, r26	; 0x0d
     f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f40:	7c 85       	ldd	r23, Y+12	; 0x0c
     f42:	8d 85       	ldd	r24, Y+13	; 0x0d
     f44:	9e 85       	ldd	r25, Y+14	; 0x0e
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a e7       	ldi	r20, 0x7A	; 122
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8f 83       	std	Y+7, r24	; 0x07
     f58:	98 87       	std	Y+8, r25	; 0x08
     f5a:	a9 87       	std	Y+9, r26	; 0x09
     f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f5e:	6f 81       	ldd	r22, Y+7	; 0x07
     f60:	78 85       	ldd	r23, Y+8	; 0x08
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <APP_askForPassword+0xec>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9e 83       	std	Y+6, r25	; 0x06
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <APP_askForPassword+0x16a>
	else if (__tmp > 65535)
     f80:	6f 81       	ldd	r22, Y+7	; 0x07
     f82:	78 85       	ldd	r23, Y+8	; 0x08
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f94:	18 16       	cp	r1, r24
     f96:	4c f5       	brge	.+82     	; 0xfea <APP_askForPassword+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f98:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <APP_askForPassword+0x14c>
     fc2:	89 e1       	ldi	r24, 0x19	; 25
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <APP_askForPassword+0x13a>
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <APP_askForPassword+0x12e>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <APP_askForPassword+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <APP_askForPassword+0x176>
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
	else if (g_change ==2)
	{
		UART_sendByte(PASSWORD_UNCHECKED_LOGIN);
	}
	/* Loop responsible for number of digits in password */
	while (password_entry_finished==0) {
    1012:	88 89       	ldd	r24, Y+16	; 0x10
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <APP_askForPassword+0x186>
    1018:	6f cf       	rjmp	.-290    	; 0xef8 <APP_askForPassword+0x64>
		}
		/* If any button is pressed more that 1000ms , Count it as a second input */
		_delay_ms(BUTTON_DELAY);
	}

}
    101a:	60 96       	adiw	r28, 0x10	; 16
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <APP_getNewPassword>:


/* Function that get the password and its confirmation */
void APP_getNewPassword (void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62

	/* Get a password for the first time */
	APP_askForPasswordFirstTime();
    1034:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <APP_askForPasswordFirstTime>

	/* Get a confirmation password */
	APP_confirmPasswordFirstTime();
    1038:	0e 94 93 06 	call	0xd26	; 0xd26 <APP_confirmPasswordFirstTime>

}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <APP_mainMenu>:

void APP_mainMenu(void)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	/* To get the pressed button */
	uint8 keypad_button = 0;
    104c:	19 82       	std	Y+1, r1	; 0x01

	/* Screen commands */
	LCD_clearScreen();
    104e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1052:	8b e8       	ldi	r24, 0x8B	; 139
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    105a:	29 e9       	ldi	r18, 0x99	; 153
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayStringRowColumn>

	UART_sendByte(APP_mainMenuCheck);
    1068:	8b e7       	ldi	r24, 0x7B	; 123
    106a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>

	/* Get key from user */
	keypad_button= KEYPAD_getPressedKey();
    106e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <KEYPAD_getPressedKey>
    1072:	89 83       	std	Y+1, r24	; 0x01
	//	LCD_displayCharacter(keypad_button);

	/* Send the choice of user */
	UART_sendByte(keypad_button);
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>

}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <APP_doorProcessing>:

void APP_doorProcessing(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    108a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	APP_startTimer_3Sec();
    108e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <APP_startTimer_3Sec>


	LCD_displayString("Door is Opening");
    1092:	89 ea       	ldi	r24, 0xA9	; 169
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
	/* Must call APP_startTimer_3Sec before to identify g_tick every 3 sec */
	/* Delay for 15 second */
	while (g_tick !=5);
    109a:	80 91 36 01 	lds	r24, 0x0136
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	e1 f7       	brne	.-8      	; 0x109a <APP_doorProcessing+0x18>
	g_tick = 0;
    10a2:	10 92 36 01 	sts	0x0136, r1

	/* Delay for 3 second */
	LCD_clearScreen();
    10a6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayString("Stop");
    10aa:	89 eb       	ldi	r24, 0xB9	; 185
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
	while (g_tick !=1);
    10b2:	80 91 36 01 	lds	r24, 0x0136
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <APP_doorProcessing+0x30>
	g_tick = 0;
    10ba:	10 92 36 01 	sts	0x0136, r1

	/* Delay for 15 second */
	LCD_clearScreen();
    10be:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayString("Door is Closing");
    10c2:	8e eb       	ldi	r24, 0xBE	; 190
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
	while (g_tick !=5);
    10ca:	80 91 36 01 	lds	r24, 0x0136
    10ce:	85 30       	cpi	r24, 0x05	; 5
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <APP_doorProcessing+0x48>
	g_tick=0;
    10d2:	10 92 36 01 	sts	0x0136, r1

	TIMER_DeInit(TIMER1_ID);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TIMER_DeInit>

}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <APP_invalidInput>:

void APP_invalidInput(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    10ea:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayString("INVALID INPUT");
    10ee:	8e ec       	ldi	r24, 0xCE	; 206
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>

	/* Delay for 1 sec */
	APP_startTimer_1Sec();
    10f6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <APP_startTimer_1Sec>
	APP_Timer1DelayForScreenCheck();
    10fa:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <APP_Timer1DelayForScreenCheck>

}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <APP_wrongPassword>:

void APP_wrongPassword(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    110c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
	LCD_displayString("WRONG PASSWORD");
    1110:	8c ed       	ldi	r24, 0xDC	; 220
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>

	/* Delay for 1 sec */
	APP_startTimer_6Sec();
    1118:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <APP_startTimer_6Sec>
	APP_Timer1DelayForBuzzerCheck();
    111c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <APP_Timer1DelayForBuzzerCheck>

	/* Show menu */
	APP_mainMenu();
    1120:	0e 94 21 08 	call	0x1042	; 0x1042 <APP_mainMenu>

}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <GPIO_setupPinDirection+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <GPIO_setupPinDirection+0x8>
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
    113c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	08 f0       	brcs	.+2      	; 0x1146 <GPIO_setupPinDirection+0x1c>
    1144:	d5 c0       	rjmp	.+426    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	08 f0       	brcs	.+2      	; 0x114e <GPIO_setupPinDirection+0x24>
    114c:	d1 c0       	rjmp	.+418    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3d 83       	std	Y+5, r19	; 0x05
    1156:	2c 83       	std	Y+4, r18	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <GPIO_setupPinDirection+0x3a>
    1162:	43 c0       	rjmp	.+134    	; 0x11ea <GPIO_setupPinDirection+0xc0>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <GPIO_setupPinDirection+0x4e>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	71 f0       	breq	.+28     	; 0x1192 <GPIO_setupPinDirection+0x68>
    1176:	bc c0       	rjmp	.+376    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <GPIO_setupPinDirection+0x5a>
    1182:	5f c0       	rjmp	.+190    	; 0x1242 <GPIO_setupPinDirection+0x118>
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <GPIO_setupPinDirection+0x66>
    118e:	85 c0       	rjmp	.+266    	; 0x129a <GPIO_setupPinDirection+0x170>
    1190:	af c0       	rjmp	.+350    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1198:	aa e3       	ldi	r26, 0x3A	; 58
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_setupPinDirection+0x8c>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_setupPinDirection+0x88>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	98 c0       	rjmp	.+304    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_setupPinDirection+0xb4>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_setupPinDirection+0xb0>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	83 c0       	rjmp	.+262    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11f0:	a7 e3       	ldi	r26, 0x37	; 55
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e7 e3       	ldi	r30, 0x37	; 55
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_setupPinDirection+0xe4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_setupPinDirection+0xe0>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	6c c0       	rjmp	.+216    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1218:	a7 e3       	ldi	r26, 0x37	; 55
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_setupPinDirection+0x10c>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <GPIO_setupPinDirection+0x108>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	57 c0       	rjmp	.+174    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1248:	a4 e3       	ldi	r26, 0x34	; 52
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e4 e3       	ldi	r30, 0x34	; 52
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0x13c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0x138>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_setupPinDirection+0x164>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_setupPinDirection+0x160>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	2b c0       	rjmp	.+86     	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12a0:	a1 e3       	ldi	r26, 0x31	; 49
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0x194>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0x190>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12c8:	a1 e3       	ldi	r26, 0x31	; 49
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_setupPinDirection+0x1bc>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_setupPinDirection+0x1b8>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <GPIO_writePin+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <GPIO_writePin+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
    1312:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	85 30       	cpi	r24, 0x05	; 5
    1318:	08 f0       	brcs	.+2      	; 0x131c <GPIO_writePin+0x1c>
    131a:	d5 c0       	rjmp	.+426    	; 0x14c6 <GPIO_writePin+0x1c6>
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	89 30       	cpi	r24, 0x09	; 9
    1320:	08 f0       	brcs	.+2      	; 0x1324 <GPIO_writePin+0x24>
    1322:	d1 c0       	rjmp	.+418    	; 0x14c6 <GPIO_writePin+0x1c6>
		/* Do nothing */
	}
	else
	{
		/* Write pin value as wanted */
		switch (port_num)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3d 83       	std	Y+5, r19	; 0x05
    132c:	2c 83       	std	Y+4, r18	; 0x04
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	09 f4       	brne	.+2      	; 0x133a <GPIO_writePin+0x3a>
    1338:	43 c0       	rjmp	.+134    	; 0x13c0 <GPIO_writePin+0xc0>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <GPIO_writePin+0x4e>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	71 f0       	breq	.+28     	; 0x1368 <GPIO_writePin+0x68>
    134c:	bc c0       	rjmp	.+376    	; 0x14c6 <GPIO_writePin+0x1c6>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <GPIO_writePin+0x5a>
    1358:	5f c0       	rjmp	.+190    	; 0x1418 <GPIO_writePin+0x118>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <GPIO_writePin+0x66>
    1364:	85 c0       	rjmp	.+266    	; 0x1470 <GPIO_writePin+0x170>
    1366:	af c0       	rjmp	.+350    	; 0x14c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	a1 f4       	brne	.+40     	; 0x1396 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    136e:	ab e3       	ldi	r26, 0x3B	; 59
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	eb e3       	ldi	r30, 0x3B	; 59
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_writePin+0x8c>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_writePin+0x88>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	98 c0       	rjmp	.+304    	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1396:	ab e3       	ldi	r26, 0x3B	; 59
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e3       	ldi	r30, 0x3B	; 59
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_writePin+0xb4>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_writePin+0xb0>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	83 c0       	rjmp	.+262    	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	a1 f4       	brne	.+40     	; 0x13ee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13c6:	a8 e3       	ldi	r26, 0x38	; 56
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_writePin+0xe4>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_writePin+0xe0>
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	6c c0       	rjmp	.+216    	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_writePin+0x10c>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_writePin+0x108>
    1410:	80 95       	com	r24
    1412:	84 23       	and	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	57 c0       	rjmp	.+174    	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	a1 f4       	brne	.+40     	; 0x1446 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0x13c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0x138>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	40 c0       	rjmp	.+128    	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1446:	a5 e3       	ldi	r26, 0x35	; 53
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_writePin+0x164>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_writePin+0x160>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	2b c0       	rjmp	.+86     	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	a1 f4       	brne	.+40     	; 0x149e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1476:	a2 e3       	ldi	r26, 0x32	; 50
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0x194>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0x190>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    149e:	a2 e3       	ldi	r26, 0x32	; 50
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_writePin+0x1bc>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_writePin+0x1b8>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_readPin+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_readPin+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW; /* To hold the pin_value in order not to do switch cases with mulitple returns within it */
    14e8:	19 82       	std	Y+1, r1	; 0x01
	if (pin_num >= NUM_OF_PINS_PER_PORT || port_num >= NUM_OF_PORTS )
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <GPIO_readPin+0x1c>
    14f0:	84 c0       	rjmp	.+264    	; 0x15fa <GPIO_readPin+0x124>
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <GPIO_readPin+0x24>
    14f8:	80 c0       	rjmp	.+256    	; 0x15fa <GPIO_readPin+0x124>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3d 83       	std	Y+5, r19	; 0x05
    1502:	2c 83       	std	Y+4, r18	; 0x04
    1504:	4c 81       	ldd	r20, Y+4	; 0x04
    1506:	5d 81       	ldd	r21, Y+5	; 0x05
    1508:	41 30       	cpi	r20, 0x01	; 1
    150a:	51 05       	cpc	r21, r1
    150c:	79 f1       	breq	.+94     	; 0x156c <GPIO_readPin+0x96>
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	91 05       	cpc	r25, r1
    1516:	34 f4       	brge	.+12     	; 0x1524 <GPIO_readPin+0x4e>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	21 15       	cp	r18, r1
    151e:	31 05       	cpc	r19, r1
    1520:	69 f0       	breq	.+26     	; 0x153c <GPIO_readPin+0x66>
    1522:	6b c0       	rjmp	.+214    	; 0x15fa <GPIO_readPin+0x124>
    1524:	4c 81       	ldd	r20, Y+4	; 0x04
    1526:	5d 81       	ldd	r21, Y+5	; 0x05
    1528:	42 30       	cpi	r20, 0x02	; 2
    152a:	51 05       	cpc	r21, r1
    152c:	b9 f1       	breq	.+110    	; 0x159c <GPIO_readPin+0xc6>
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_readPin+0x64>
    1538:	49 c0       	rjmp	.+146    	; 0x15cc <GPIO_readPin+0xf6>
    153a:	5f c0       	rjmp	.+190    	; 0x15fa <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num)) /* Note that we read from the PIN not the PORT */
    153c:	e9 e3       	ldi	r30, 0x39	; 57
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <GPIO_readPin+0x7e>
    1550:	55 95       	asr	r21
    1552:	47 95       	ror	r20
    1554:	8a 95       	dec	r24
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <GPIO_readPin+0x7a>
    1558:	ca 01       	movw	r24, r20
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	90 70       	andi	r25, 0x00	; 0
    155e:	88 23       	and	r24, r24
    1560:	19 f0       	breq	.+6      	; 0x1568 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	49 c0       	rjmp	.+146    	; 0x15fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	47 c0       	rjmp	.+142    	; 0x15fa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    156c:	e6 e3       	ldi	r30, 0x36	; 54
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_readPin+0xae>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_readPin+0xaa>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	31 c0       	rjmp	.+98     	; 0x15fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	2f c0       	rjmp	.+94     	; 0x15fa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    159c:	e3 e3       	ldi	r30, 0x33	; 51
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_readPin+0xde>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_readPin+0xda>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	88 23       	and	r24, r24
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	19 c0       	rjmp	.+50     	; 0x15fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	17 c0       	rjmp	.+46     	; 0x15fa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    15cc:	e0 e3       	ldi	r30, 0x30	; 48
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_readPin+0x10e>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_readPin+0x10a>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <GPIO_setupPortDirection+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <GPIO_setupPortDirection+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	90 f5       	brcc	.+100    	; 0x1686 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3c 83       	std	Y+4, r19	; 0x04
    162a:	2b 83       	std	Y+3, r18	; 0x03
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	d1 f0       	breq	.+52     	; 0x166a <GPIO_setupPortDirection+0x5e>
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	2c f4       	brge	.+10     	; 0x164a <GPIO_setupPortDirection+0x3e>
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	61 f0       	breq	.+24     	; 0x1660 <GPIO_setupPortDirection+0x54>
    1648:	1e c0       	rjmp	.+60     	; 0x1686 <GPIO_setupPortDirection+0x7a>
    164a:	2b 81       	ldd	r18, Y+3	; 0x03
    164c:	3c 81       	ldd	r19, Y+4	; 0x04
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	81 f0       	breq	.+32     	; 0x1674 <GPIO_setupPortDirection+0x68>
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	91 05       	cpc	r25, r1
    165c:	81 f0       	breq	.+32     	; 0x167e <GPIO_setupPortDirection+0x72>
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1660:	ea e3       	ldi	r30, 0x3A	; 58
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    166a:	e7 e3       	ldi	r30, 0x37	; 55
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	80 83       	st	Z, r24
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1674:	e4 e3       	ldi	r30, 0x34	; 52
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 83       	st	Z, r24
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    167e:	e1 e3       	ldi	r30, 0x31	; 49
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	80 83       	st	Z, r24
			break;
		}
	}
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_writePort+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_writePort+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	90 f5       	brcc	.+100    	; 0x170e <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	d1 f0       	breq	.+52     	; 0x16f2 <GPIO_writePort+0x5e>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <GPIO_writePort+0x3e>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <GPIO_writePort+0x54>
    16d0:	1e c0       	rjmp	.+60     	; 0x170e <GPIO_writePort+0x7a>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <GPIO_writePort+0x68>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	81 f0       	breq	.+32     	; 0x1706 <GPIO_writePort+0x72>
    16e6:	13 c0       	rjmp	.+38     	; 0x170e <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	80 83       	st	Z, r24
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    16f2:	e8 e3       	ldi	r30, 0x38	; 56
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	80 83       	st	Z, r24
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
    1704:	04 c0       	rjmp	.+8      	; 0x170e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 83       	st	Z, r24
			break;
		}
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <GPIO_readPort+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <GPIO_readPort+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    172a:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	90 f5       	brcc	.+100    	; 0x1796 <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3c 83       	std	Y+4, r19	; 0x04
    173a:	2b 83       	std	Y+3, r18	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	d1 f0       	breq	.+52     	; 0x177a <GPIO_readPort+0x5e>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <GPIO_readPort+0x3e>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	61 f0       	breq	.+24     	; 0x1770 <GPIO_readPort+0x54>
    1758:	1e c0       	rjmp	.+60     	; 0x1796 <GPIO_readPort+0x7a>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <GPIO_readPort+0x68>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <GPIO_readPort+0x72>
    176e:	13 c0       	rjmp	.+38     	; 0x1796 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			port_value = PINA;
    1770:	e9 e3       	ldi	r30, 0x39	; 57
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			port_value = PINB;
    177a:	e6 e3       	ldi	r30, 0x36	; 54
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			port_value = PINC;
    1784:	e3 e3       	ldi	r30, 0x33	; 51
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			port_value = PIND;
    178e:	e0 e3       	ldi	r30, 0x30	; 48
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <KEYPAD_getPressedKey+0x6>
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    17b2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    17b4:	1b 82       	std	Y+3, r1	; 0x03
    17b6:	43 c0       	rjmp	.+134    	; 0x183e <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	0e 94 06 0b 	call	0x160c	; 0x160c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	98 2f       	mov	r25, r24
    17c4:	9c 5f       	subi	r25, 0xFC	; 252
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	69 2f       	mov	r22, r25
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 95 08 	call	0x112a	; 0x112a <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9c 01       	movw	r18, r24
    17d8:	2c 5f       	subi	r18, 0xFC	; 252
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <KEYPAD_getPressedKey+0x40>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	2a 95       	dec	r18
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <KEYPAD_getPressedKey+0x3c>
    17ea:	80 95       	com	r24
    17ec:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	69 81       	ldd	r22, Y+1	; 0x01
    17f2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17f6:	1a 82       	std	Y+2, r1	; 0x02
    17f8:	1c c0       	rjmp	.+56     	; 0x1832 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	6a 81       	ldd	r22, Y+2	; 0x02
    17fe:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_readPin>
    1802:	88 23       	and	r24, r24
    1804:	99 f4       	brne	.+38     	; 0x182c <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	98 2f       	mov	r25, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	89 0f       	add	r24, r25
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	0e 94 24 0c 	call	0x1848	; 0x1848 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	8a 83       	std	Y+2, r24	; 0x02
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	84 30       	cpi	r24, 0x04	; 4
    1836:	08 f3       	brcs	.-62     	; 0x17fa <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	08 f4       	brcc	.+2      	; 0x1846 <KEYPAD_getPressedKey+0xa0>
    1844:	b9 cf       	rjmp	.-142    	; 0x17b8 <KEYPAD_getPressedKey+0x12>
    1846:	b6 cf       	rjmp	.-148    	; 0x17b4 <KEYPAD_getPressedKey+0xe>

00001848 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1856:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3c 83       	std	Y+4, r19	; 0x04
    1860:	2b 83       	std	Y+3, r18	; 0x03
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	91 05       	cpc	r25, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <KEYPAD_4x4_adjustKeyNumber+0x26>
    186c:	70 c0       	rjmp	.+224    	; 0x194e <KEYPAD_4x4_adjustKeyNumber+0x106>
    186e:	2b 81       	ldd	r18, Y+3	; 0x03
    1870:	3c 81       	ldd	r19, Y+4	; 0x04
    1872:	29 30       	cpi	r18, 0x09	; 9
    1874:	31 05       	cpc	r19, r1
    1876:	5c f5       	brge	.+86     	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0x86>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	91 05       	cpc	r25, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1882:	59 c0       	rjmp	.+178    	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	25 30       	cpi	r18, 0x05	; 5
    188a:	31 05       	cpc	r19, r1
    188c:	9c f4       	brge	.+38     	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1898:	48 c0       	rjmp	.+144    	; 0x192a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	23 30       	cpi	r18, 0x03	; 3
    18a0:	31 05       	cpc	r19, r1
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18a4:	45 c0       	rjmp	.+138    	; 0x1930 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    18b0:	39 c0       	rjmp	.+114    	; 0x1924 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    18b2:	68 c0       	rjmp	.+208    	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	26 30       	cpi	r18, 0x06	; 6
    18ba:	31 05       	cpc	r19, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    18be:	41 c0       	rjmp	.+130    	; 0x1942 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	87 30       	cpi	r24, 0x07	; 7
    18c6:	91 05       	cpc	r25, r1
    18c8:	0c f0       	brlt	.+2      	; 0x18cc <KEYPAD_4x4_adjustKeyNumber+0x84>
    18ca:	3e c0       	rjmp	.+124    	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x100>
    18cc:	37 c0       	rjmp	.+110    	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	2c 30       	cpi	r18, 0x0C	; 12
    18d4:	31 05       	cpc	r19, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <KEYPAD_4x4_adjustKeyNumber+0x92>
    18d8:	46 c0       	rjmp	.+140    	; 0x1966 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	8d 30       	cpi	r24, 0x0D	; 13
    18e0:	91 05       	cpc	r25, r1
    18e2:	5c f4       	brge	.+22     	; 0x18fa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	2a 30       	cpi	r18, 0x0A	; 10
    18ea:	31 05       	cpc	r19, r1
    18ec:	b1 f1       	breq	.+108    	; 0x195a <KEYPAD_4x4_adjustKeyNumber+0x112>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	8b 30       	cpi	r24, 0x0B	; 11
    18f4:	91 05       	cpc	r25, r1
    18f6:	a4 f5       	brge	.+104    	; 0x1960 <KEYPAD_4x4_adjustKeyNumber+0x118>
    18f8:	2d c0       	rjmp	.+90     	; 0x1954 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	2e 30       	cpi	r18, 0x0E	; 14
    1900:	31 05       	cpc	r19, r1
    1902:	b9 f1       	breq	.+110    	; 0x1972 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	8e 30       	cpi	r24, 0x0E	; 14
    190a:	91 05       	cpc	r25, r1
    190c:	7c f1       	brlt	.+94     	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0x124>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	2f 30       	cpi	r18, 0x0F	; 15
    1914:	31 05       	cpc	r19, r1
    1916:	81 f1       	breq	.+96     	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	80 31       	cpi	r24, 0x10	; 16
    191e:	91 05       	cpc	r25, r1
    1920:	71 f1       	breq	.+92     	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x136>
    1922:	30 c0       	rjmp	.+96     	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = 7;
    1924:	87 e0       	ldi	r24, 0x07	; 7
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	2f c0       	rjmp	.+94     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = 8;
    192a:	88 e0       	ldi	r24, 0x08	; 8
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	2c c0       	rjmp	.+88     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = 9;
    1930:	89 e0       	ldi	r24, 0x09	; 9
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	29 c0       	rjmp	.+82     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1936:	85 e2       	ldi	r24, 0x25	; 37
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	26 c0       	rjmp	.+76     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = 4;
    193c:	84 e0       	ldi	r24, 0x04	; 4
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	23 c0       	rjmp	.+70     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = 5;
    1942:	85 e0       	ldi	r24, 0x05	; 5
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	20 c0       	rjmp	.+64     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = 6;
    1948:	86 e0       	ldi	r24, 0x06	; 6
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	1d c0       	rjmp	.+58     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    194e:	8a e2       	ldi	r24, 0x2A	; 42
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	1a c0       	rjmp	.+52     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = 2;
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = 3;
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	11 c0       	rjmp	.+34     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1966:	8d e2       	ldi	r24, 0x2D	; 45
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	0e c0       	rjmp	.+28     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    196c:	8d e0       	ldi	r24, 0x0D	; 13
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0'; /* Use it as a character (ASCII value = 48) in order to avoid
    1972:	80 e3       	ldi	r24, 0x30	; 48
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	08 c0       	rjmp	.+16     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
		entering 0 and sending problems */
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1978:	8d e3       	ldi	r24, 0x3D	; 61
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    197e:	8b e2       	ldi	r24, 0x2B	; 43
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
} 
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 95 08 	call	0x112a	; 0x112a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 95 08 	call	0x112a	; 0x112a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 95 08 	call	0x112a	; 0x112a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	6f ef       	ldi	r22, 0xFF	; 255
    19c2:	0e 94 06 0b 	call	0x160c	; 0x160c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    19c6:	88 e3       	ldi	r24, 0x38	; 56
    19c8:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19cc:	8c e0       	ldi	r24, 0x0C	; 12
    19ce:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_sendCommand>
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	e9 97       	sbiw	r28, 0x39	; 57
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	8d ab       	std	Y+53, r24	; 0x35
    1a12:	9e ab       	std	Y+54, r25	; 0x36
    1a14:	af ab       	std	Y+55, r26	; 0x37
    1a16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	53 e4       	ldi	r21, 0x43	; 67
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	89 ab       	std	Y+49, r24	; 0x31
    1a32:	9a ab       	std	Y+50, r25	; 0x32
    1a34:	ab ab       	std	Y+51, r26	; 0x33
    1a36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_sendCommand+0x7c>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	98 ab       	std	Y+48, r25	; 0x30
    1a56:	8f a7       	std	Y+47, r24	; 0x2f
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6d a9       	ldd	r22, Y+53	; 0x35
    1a74:	7e a9       	ldd	r23, Y+54	; 0x36
    1a76:	8f a9       	ldd	r24, Y+55	; 0x37
    1a78:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	98 ab       	std	Y+48, r25	; 0x30
    1a98:	8f a7       	std	Y+47, r24	; 0x2f
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_sendCommand+0xdc>
    1a9c:	89 e1       	ldi	r24, 0x19	; 25
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9e a7       	std	Y+46, r25	; 0x2e
    1aa2:	8d a7       	std	Y+45, r24	; 0x2d
    1aa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_sendCommand+0xca>
    1aac:	9e a7       	std	Y+46, r25	; 0x2e
    1aae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abc:	98 a9       	ldd	r25, Y+48	; 0x30
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_sendCommand+0xbe>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aca:	9c a9       	ldd	r25, Y+52	; 0x34
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	98 ab       	std	Y+48, r25	; 0x30
    1ad6:	8f a7       	std	Y+47, r24	; 0x2f
    1ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ada:	98 a9       	ldd	r25, Y+48	; 0x30
    1adc:	9c a7       	std	Y+44, r25	; 0x2c
    1ade:	8b a7       	std	Y+43, r24	; 0x2b
    1ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_sendCommand+0x106>
    1ae8:	9c a7       	std	Y+44, r25	; 0x2c
    1aea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e8       	ldi	r26, 0x80	; 128
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	8f a3       	std	Y+39, r24	; 0x27
    1b00:	98 a7       	std	Y+40, r25	; 0x28
    1b02:	a9 a7       	std	Y+41, r26	; 0x29
    1b04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6f a1       	ldd	r22, Y+39	; 0x27
    1b08:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8b a3       	std	Y+35, r24	; 0x23
    1b20:	9c a3       	std	Y+36, r25	; 0x24
    1b22:	ad a3       	std	Y+37, r26	; 0x25
    1b24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b26:	6b a1       	ldd	r22, Y+35	; 0x23
    1b28:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a a3       	std	Y+34, r25	; 0x22
    1b44:	89 a3       	std	Y+33, r24	; 0x21
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1b48:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6f a1       	ldd	r22, Y+39	; 0x27
    1b62:	78 a5       	ldd	r23, Y+40	; 0x28
    1b64:	89 a5       	ldd	r24, Y+41	; 0x29
    1b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_sendCommand+0x1ca>
    1b8a:	89 e1       	ldi	r24, 0x19	; 25
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	98 a3       	std	Y+32, r25	; 0x20
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
    1b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b94:	98 a1       	ldd	r25, Y+32	; 0x20
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_sendCommand+0x1b8>
    1b9a:	98 a3       	std	Y+32, r25	; 0x20
    1b9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_sendCommand+0x1ac>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9a a3       	std	Y+34, r25	; 0x22
    1bc4:	89 a3       	std	Y+33, r24	; 0x21
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	9e 8f       	std	Y+30, r25	; 0x1e
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_sendCommand+0x1f4>
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	69 ad       	ldd	r22, Y+57	; 0x39
    1bde:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_writePort>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e8       	ldi	r26, 0x80	; 128
    1be8:	bf e3       	ldi	r27, 0x3F	; 63
    1bea:	89 8f       	std	Y+25, r24	; 0x19
    1bec:	9a 8f       	std	Y+26, r25	; 0x1a
    1bee:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a e7       	ldi	r20, 0x7A	; 122
    1c00:	53 e4       	ldi	r21, 0x43	; 67
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8d 8b       	std	Y+21, r24	; 0x15
    1c0c:	9e 8b       	std	Y+22, r25	; 0x16
    1c0e:	af 8b       	std	Y+23, r26	; 0x17
    1c10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_sendCommand+0x256>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_sendCommand+0x2b6>
    1c76:	89 e1       	ldi	r24, 0x19	; 25
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
    1c7e:	89 89       	ldd	r24, Y+17	; 0x11
    1c80:	9a 89       	ldd	r25, Y+18	; 0x12
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_sendCommand+0x2a4>
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_sendCommand+0x298>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	98 89       	ldd	r25, Y+16	; 0x10
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_sendCommand+0x2e0>
    1cc2:	98 8b       	std	Y+16, r25	; 0x10
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e8       	ldi	r26, 0x80	; 128
    1cd6:	bf e3       	ldi	r27, 0x3F	; 63
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	ad 87       	std	Y+13, r26	; 0x0d
    1cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	a9 87       	std	Y+9, r26	; 0x09
    1cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_sendCommand+0x344>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_sendCommand+0x3a4>
    1d64:	89 e1       	ldi	r24, 0x19	; 25
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_sendCommand+0x392>
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_sendCommand+0x386>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_sendCommand+0x3ce>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1db4:	e9 96       	adiw	r28, 0x39	; 57
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	e9 97       	sbiw	r28, 0x39	; 57
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	8d ab       	std	Y+53, r24	; 0x35
    1dfa:	9e ab       	std	Y+54, r25	; 0x36
    1dfc:	af ab       	std	Y+55, r26	; 0x37
    1dfe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	6d a9       	ldd	r22, Y+53	; 0x35
    1e02:	7e a9       	ldd	r23, Y+54	; 0x36
    1e04:	8f a9       	ldd	r24, Y+55	; 0x37
    1e06:	98 ad       	ldd	r25, Y+56	; 0x38
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	53 e4       	ldi	r21, 0x43	; 67
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	89 ab       	std	Y+49, r24	; 0x31
    1e1a:	9a ab       	std	Y+50, r25	; 0x32
    1e1c:	ab ab       	std	Y+51, r26	; 0x33
    1e1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e20:	69 a9       	ldd	r22, Y+49	; 0x31
    1e22:	7a a9       	ldd	r23, Y+50	; 0x32
    1e24:	8b a9       	ldd	r24, Y+51	; 0x33
    1e26:	9c a9       	ldd	r25, Y+52	; 0x34
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1e42:	69 a9       	ldd	r22, Y+49	; 0x31
    1e44:	7a a9       	ldd	r23, Y+50	; 0x32
    1e46:	8b a9       	ldd	r24, Y+51	; 0x33
    1e48:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e60:	98 ad       	ldd	r25, Y+56	; 0x38
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	98 ab       	std	Y+48, r25	; 0x30
    1e80:	8f a7       	std	Y+47, r24	; 0x2f
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <LCD_displayCharacter+0xdc>
    1e84:	89 e1       	ldi	r24, 0x19	; 25
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e a7       	std	Y+46, r25	; 0x2e
    1e8a:	8d a7       	std	Y+45, r24	; 0x2d
    1e8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_displayCharacter+0xca>
    1e94:	9e a7       	std	Y+46, r25	; 0x2e
    1e96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	98 ab       	std	Y+48, r25	; 0x30
    1ea0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <LCD_displayCharacter+0xbe>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	69 a9       	ldd	r22, Y+49	; 0x31
    1eae:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
    1ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec4:	9c a7       	std	Y+44, r25	; 0x2c
    1ec6:	8b a7       	std	Y+43, r24	; 0x2b
    1ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_displayCharacter+0x106>
    1ed0:	9c a7       	std	Y+44, r25	; 0x2c
    1ed2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e8       	ldi	r26, 0x80	; 128
    1ee4:	bf e3       	ldi	r27, 0x3F	; 63
    1ee6:	8f a3       	std	Y+39, r24	; 0x27
    1ee8:	98 a7       	std	Y+40, r25	; 0x28
    1eea:	a9 a7       	std	Y+41, r26	; 0x29
    1eec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a e7       	ldi	r20, 0x7A	; 122
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8b a3       	std	Y+35, r24	; 0x23
    1f08:	9c a3       	std	Y+36, r25	; 0x24
    1f0a:	ad a3       	std	Y+37, r26	; 0x25
    1f0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f10:	7c a1       	ldd	r23, Y+36	; 0x24
    1f12:	8d a1       	ldd	r24, Y+37	; 0x25
    1f14:	9e a1       	ldd	r25, Y+38	; 0x26
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9a a3       	std	Y+34, r25	; 0x22
    1f2c:	89 a3       	std	Y+33, r24	; 0x21
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1f30:	6b a1       	ldd	r22, Y+35	; 0x23
    1f32:	7c a1       	ldd	r23, Y+36	; 0x24
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	9e a1       	ldd	r25, Y+38	; 0x26
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6f a1       	ldd	r22, Y+39	; 0x27
    1f4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9a a3       	std	Y+34, r25	; 0x22
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_displayCharacter+0x1ca>
    1f72:	89 e1       	ldi	r24, 0x19	; 25
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	98 a3       	std	Y+32, r25	; 0x20
    1f78:	8f 8f       	std	Y+31, r24	; 0x1f
    1f7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_displayCharacter+0x1b8>
    1f82:	98 a3       	std	Y+32, r25	; 0x20
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	89 a1       	ldd	r24, Y+33	; 0x21
    1f88:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	89 a1       	ldd	r24, Y+33	; 0x21
    1f92:	9a a1       	ldd	r25, Y+34	; 0x22
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <LCD_displayCharacter+0x1ac>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9a a3       	std	Y+34, r25	; 0x22
    1fac:	89 a3       	std	Y+33, r24	; 0x21
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb4:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_displayCharacter+0x1f4>
    1fbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	69 ad       	ldd	r22, Y+57	; 0x39
    1fc6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <GPIO_writePort>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	89 8f       	std	Y+25, r24	; 0x19
    1fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a e7       	ldi	r20, 0x7A	; 122
    1fe8:	53 e4       	ldi	r21, 0x43	; 67
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8d 8b       	std	Y+21, r24	; 0x15
    1ff4:	9e 8b       	std	Y+22, r25	; 0x16
    1ff6:	af 8b       	std	Y+23, r26	; 0x17
    1ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <LCD_displayCharacter+0x256>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	3f c0       	rjmp	.+126    	; 0x209a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_displayCharacter+0x2b6>
    205e:	89 e1       	ldi	r24, 0x19	; 25
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
    2066:	89 89       	ldd	r24, Y+17	; 0x11
    2068:	9a 89       	ldd	r25, Y+18	; 0x12
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_displayCharacter+0x2a4>
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_displayCharacter+0x298>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	98 8b       	std	Y+16, r25	; 0x10
    20a0:	8f 87       	std	Y+15, r24	; 0x0f
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 89       	ldd	r25, Y+16	; 0x10
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayCharacter+0x2e0>
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	62 e0       	ldi	r22, 0x02	; 2
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 80 09 	call	0x1300	; 0x1300 <GPIO_writePin>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	8b 87       	std	Y+11, r24	; 0x0b
    20c2:	9c 87       	std	Y+12, r25	; 0x0c
    20c4:	ad 87       	std	Y+13, r26	; 0x0d
    20c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a e7       	ldi	r20, 0x7A	; 122
    20d6:	53 e4       	ldi	r21, 0x43	; 67
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8f 83       	std	Y+7, r24	; 0x07
    20e2:	98 87       	std	Y+8, r25	; 0x08
    20e4:	a9 87       	std	Y+9, r26	; 0x09
    20e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <LCD_displayCharacter+0x344>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_displayCharacter+0x3a4>
    214c:	89 e1       	ldi	r24, 0x19	; 25
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_displayCharacter+0x392>
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_displayCharacter+0x386>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_displayCharacter+0x3ce>
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    219c:	e9 96       	adiw	r28, 0x39	; 57
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <LCD_displayString+0x6>
    21b4:	0f 92       	push	r0
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9b 83       	std	Y+3, r25	; 0x03
    21bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21be:	19 82       	std	Y+1, r1	; 0x01
    21c0:	0e c0       	rjmp	.+28     	; 0x21de <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	fc 01       	movw	r30, r24
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	80 81       	ld	r24, Z
    21d4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_displayCharacter>
		i++;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	8f 5f       	subi	r24, 0xFF	; 255
    21dc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	fc 01       	movw	r30, r24
    21ea:	e2 0f       	add	r30, r18
    21ec:	f3 1f       	adc	r31, r19
    21ee:	80 81       	ld	r24, Z
    21f0:	88 23       	and	r24, r24
    21f2:	39 f7       	brne	.-50     	; 0x21c2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <LCD_moveCursor+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <LCD_moveCursor+0x8>
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	8a 83       	std	Y+2, r24	; 0x02
    2210:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	3d 83       	std	Y+5, r19	; 0x05
    221a:	2c 83       	std	Y+4, r18	; 0x04
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	91 05       	cpc	r25, r1
    2224:	c1 f0       	breq	.+48     	; 0x2256 <LCD_moveCursor+0x56>
    2226:	2c 81       	ldd	r18, Y+4	; 0x04
    2228:	3d 81       	ldd	r19, Y+5	; 0x05
    222a:	22 30       	cpi	r18, 0x02	; 2
    222c:	31 05       	cpc	r19, r1
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_moveCursor+0x3a>
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	61 f0       	breq	.+24     	; 0x2250 <LCD_moveCursor+0x50>
    2238:	19 c0       	rjmp	.+50     	; 0x226c <LCD_moveCursor+0x6c>
    223a:	2c 81       	ldd	r18, Y+4	; 0x04
    223c:	3d 81       	ldd	r19, Y+5	; 0x05
    223e:	22 30       	cpi	r18, 0x02	; 2
    2240:	31 05       	cpc	r19, r1
    2242:	69 f0       	breq	.+26     	; 0x225e <LCD_moveCursor+0x5e>
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	83 30       	cpi	r24, 0x03	; 3
    224a:	91 05       	cpc	r25, r1
    224c:	61 f0       	breq	.+24     	; 0x2266 <LCD_moveCursor+0x66>
    224e:	0e c0       	rjmp	.+28     	; 0x226c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	0b c0       	rjmp	.+22     	; 0x226c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	80 5c       	subi	r24, 0xC0	; 192
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	07 c0       	rjmp	.+14     	; 0x226c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	80 5f       	subi	r24, 0xF0	; 240
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	03 c0       	rjmp	.+6      	; 0x226c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	80 5b       	subi	r24, 0xB0	; 176
    226a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	80 68       	ori	r24, 0x80	; 128
    2270:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_sendCommand>
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_displayStringRowColumn+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <LCD_displayStringRowColumn+0x8>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	6a 83       	std	Y+2, r22	; 0x02
    2294:	5c 83       	std	Y+4, r21	; 0x04
    2296:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	6a 81       	ldd	r22, Y+2	; 0x02
    229c:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	62 97       	sbiw	r28, 0x12	; 18
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	9a 8b       	std	Y+18, r25	; 0x12
    22cc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22ce:	89 89       	ldd	r24, Y+17	; 0x11
    22d0:	9a 89       	ldd	r25, Y+18	; 0x12
    22d2:	9e 01       	movw	r18, r28
    22d4:	2f 5f       	subi	r18, 0xFF	; 255
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	b9 01       	movw	r22, r18
    22da:	4a e0       	ldi	r20, 0x0A	; 10
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	0e 94 4c 18 	call	0x3098	; 0x3098 <itoa>
   LCD_displayString(buff); /* Display the string */
    22e2:	ce 01       	movw	r24, r28
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>
}
    22ea:	62 96       	adiw	r28, 0x12	; 18
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_sendCommand>
}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <main>:

uint8 g_change=0;


int main(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <main+0x6>
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	/* To hold the value sent by micro1 */
	uint8 received_byte = 0;
    231c:	19 82       	std	Y+1, r1	; 0x01

	/* Modules initialization */
	MICROCONTROLLER_init();
    231e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MICROCONTROLLER_init>

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    2322:	af e5       	ldi	r26, 0x5F	; 95
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ef e5       	ldi	r30, 0x5F	; 95
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	8c 93       	st	X, r24

	/* Wait until MC2 is ready to initialize communication */
	while(UART_recieveByte() != MICRO2_READY);
    2330:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <UART_recieveByte>
    2334:	81 31       	cpi	r24, 0x11	; 17
    2336:	e1 f7       	brne	.-8      	; 0x2330 <main+0x20>

	/* Send to Micro 2 that you're ready  to initialize communication */
	UART_sendByte(MICRO1_READY);
    2338:	80 e1       	ldi	r24, 0x10	; 16
    233a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>



	for (;;)
	{
		received_byte = UART_recieveByte();
    233e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <UART_recieveByte>
    2342:	89 83       	std	Y+1, r24	; 0x01
		/* Reset received value in every switch case in order not to execute again */

		switch(received_byte)
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	3b 83       	std	Y+3, r19	; 0x03
    234c:	2a 83       	std	Y+2, r18	; 0x02
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	83 34       	cpi	r24, 0x43	; 67
    2354:	91 05       	cpc	r25, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <main+0x4a>
    2358:	84 c0       	rjmp	.+264    	; 0x2462 <main+0x152>
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	3b 81       	ldd	r19, Y+3	; 0x03
    235e:	24 34       	cpi	r18, 0x44	; 68
    2360:	31 05       	cpc	r19, r1
    2362:	7c f5       	brge	.+94     	; 0x23c2 <main+0xb2>
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	8a 32       	cpi	r24, 0x2A	; 42
    236a:	91 05       	cpc	r25, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <main+0x60>
    236e:	82 c0       	rjmp	.+260    	; 0x2474 <main+0x164>
    2370:	2a 81       	ldd	r18, Y+2	; 0x02
    2372:	3b 81       	ldd	r19, Y+3	; 0x03
    2374:	2b 32       	cpi	r18, 0x2B	; 43
    2376:	31 05       	cpc	r19, r1
    2378:	9c f4       	brge	.+38     	; 0x23a0 <main+0x90>
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	85 32       	cpi	r24, 0x25	; 37
    2380:	91 05       	cpc	r25, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <main+0x76>
    2384:	7a c0       	rjmp	.+244    	; 0x247a <main+0x16a>
    2386:	2a 81       	ldd	r18, Y+2	; 0x02
    2388:	3b 81       	ldd	r19, Y+3	; 0x03
    238a:	26 32       	cpi	r18, 0x26	; 38
    238c:	31 05       	cpc	r19, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <main+0x82>
    2390:	6e c0       	rjmp	.+220    	; 0x246e <main+0x15e>
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	84 32       	cpi	r24, 0x24	; 36
    2398:	91 05       	cpc	r25, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <main+0x8e>
    239c:	4c c0       	rjmp	.+152    	; 0x2436 <main+0x126>
    239e:	cf cf       	rjmp	.-98     	; 0x233e <main+0x2e>
    23a0:	2a 81       	ldd	r18, Y+2	; 0x02
    23a2:	3b 81       	ldd	r19, Y+3	; 0x03
    23a4:	2f 33       	cpi	r18, 0x3F	; 63
    23a6:	31 05       	cpc	r19, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <main+0x9c>
    23aa:	50 c0       	rjmp	.+160    	; 0x244c <main+0x13c>
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	80 34       	cpi	r24, 0x40	; 64
    23b2:	91 05       	cpc	r25, r1
    23b4:	11 f1       	breq	.+68     	; 0x23fa <main+0xea>
    23b6:	2a 81       	ldd	r18, Y+2	; 0x02
    23b8:	3b 81       	ldd	r19, Y+3	; 0x03
    23ba:	2b 33       	cpi	r18, 0x3B	; 59
    23bc:	31 05       	cpc	r19, r1
    23be:	41 f1       	breq	.+80     	; 0x2410 <main+0x100>
    23c0:	be cf       	rjmp	.-132    	; 0x233e <main+0x2e>
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	83 35       	cpi	r24, 0x53	; 83
    23c8:	91 05       	cpc	r25, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <main+0xbe>
    23cc:	59 c0       	rjmp	.+178    	; 0x2480 <main+0x170>
    23ce:	2a 81       	ldd	r18, Y+2	; 0x02
    23d0:	3b 81       	ldd	r19, Y+3	; 0x03
    23d2:	24 35       	cpi	r18, 0x54	; 84
    23d4:	31 05       	cpc	r19, r1
    23d6:	34 f4       	brge	.+12     	; 0x23e4 <main+0xd4>
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	84 34       	cpi	r24, 0x44	; 68
    23de:	91 05       	cpc	r25, r1
    23e0:	d9 f1       	breq	.+118    	; 0x2458 <main+0x148>
    23e2:	ad cf       	rjmp	.-166    	; 0x233e <main+0x2e>
    23e4:	2a 81       	ldd	r18, Y+2	; 0x02
    23e6:	3b 81       	ldd	r19, Y+3	; 0x03
    23e8:	2a 35       	cpi	r18, 0x5A	; 90
    23ea:	31 05       	cpc	r19, r1
    23ec:	f1 f0       	breq	.+60     	; 0x242a <main+0x11a>
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	8d 37       	cpi	r24, 0x7D	; 125
    23f4:	91 05       	cpc	r25, r1
    23f6:	e1 f0       	breq	.+56     	; 0x2430 <main+0x120>
    23f8:	a2 cf       	rjmp	.-188    	; 0x233e <main+0x2e>
		{

		case PASSWORDS_MATCHED :

			LCD_clearScreen();
    23fa:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
			LCD_displayString("MATCH");
    23fe:	8b ee       	ldi	r24, 0xEB	; 235
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    2406:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    240a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <APP_Timer1DelayForScreenCheck>
    240e:	97 cf       	rjmp	.-210    	; 0x233e <main+0x2e>

			break;

		case PASSWORDS_UNMATCHED_FIRST_TIME :

			LCD_clearScreen();
    2410:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
			LCD_displayString("Doesn't Match");
    2414:	81 ef       	ldi	r24, 0xF1	; 241
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    241c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    2420:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <APP_Timer1DelayForScreenCheck>

			APP_getNewPassword();
    2424:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getNewPassword>
    2428:	8a cf       	rjmp	.-236    	; 0x233e <main+0x2e>
			break;

		case CHANGE_PASSWORD: /* - */

			APP_getNewPassword();
    242a:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getNewPassword>
    242e:	87 cf       	rjmp	.-242    	; 0x233e <main+0x2e>

			break;

		case ASK_FOR_NEW_PASSWORD :

			APP_getNewPassword();
    2430:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getNewPassword>
    2434:	84 cf       	rjmp	.-248    	; 0x233e <main+0x2e>
			break;

		case PASSWORDS_UNMATCHED :

			/* LCD Commands */
			LCD_clearScreen();
    2436:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_clearScreen>
			LCD_displayString("Unmatched");
    243a:	8f ef       	ldi	r24, 0xFF	; 255
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_displayString>

			/* Delay for 1 sec using timer */
			APP_startTimer_1Sec();
    2442:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <APP_startTimer_1Sec>
			APP_Timer1DelayForScreenCheck();
    2446:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <APP_Timer1DelayForScreenCheck>
    244a:	79 cf       	rjmp	.-270    	; 0x233e <main+0x2e>
			//			_delay_ms(1000);
			break;

		case ASK_FOR_PASSWORD : /* + */

			g_change=2;
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	80 93 2f 01 	sts	0x012F, r24
			APP_askForPassword();
    2452:	0e 94 4a 07 	call	0xe94	; 0xe94 <APP_askForPassword>
    2456:	73 cf       	rjmp	.-282    	; 0x233e <main+0x2e>

			break;

		case ASK_FOR_DOOR_PASSWORD :
			g_change = 0;
    2458:	10 92 2f 01 	sts	0x012F, r1
			APP_askForPassword();
    245c:	0e 94 4a 07 	call	0xe94	; 0xe94 <APP_askForPassword>
    2460:	6e cf       	rjmp	.-292    	; 0x233e <main+0x2e>
			break;

		case ASK_FOR_CHANGING_PASSWORD :
			g_change=1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 2f 01 	sts	0x012F, r24
			APP_askForPassword();
    2468:	0e 94 4a 07 	call	0xe94	; 0xe94 <APP_askForPassword>
    246c:	68 cf       	rjmp	.-304    	; 0x233e <main+0x2e>
			break;

		case PASSWORD_WRONG :

			APP_wrongPassword();
    246e:	0e 94 82 08 	call	0x1104	; 0x1104 <APP_wrongPassword>
    2472:	65 cf       	rjmp	.-310    	; 0x233e <main+0x2e>

			break;

		case DOOR_OPENING :

			APP_doorProcessing();
    2474:	0e 94 41 08 	call	0x1082	; 0x1082 <APP_doorProcessing>
    2478:	62 cf       	rjmp	.-316    	; 0x233e <main+0x2e>
			//
			//			break;

		case INVALID_INPUT :

			APP_invalidInput();
    247a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <APP_invalidInput>
    247e:	5f cf       	rjmp	.-322    	; 0x233e <main+0x2e>

			break;

		case SHOW_MENU :
			APP_mainMenu();
    2480:	0e 94 21 08 	call	0x1042	; 0x1042 <APP_mainMenu>
    2484:	5c cf       	rjmp	.-328    	; 0x233e <main+0x2e>

00002486 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2486:	1f 92       	push	r1
    2488:	0f 92       	push	r0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	2f 93       	push	r18
    2492:	3f 93       	push	r19
    2494:	4f 93       	push	r20
    2496:	5f 93       	push	r21
    2498:	6f 93       	push	r22
    249a:	7f 93       	push	r23
    249c:	8f 93       	push	r24
    249e:	9f 93       	push	r25
    24a0:	af 93       	push	r26
    24a2:	bf 93       	push	r27
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    24b0:	80 91 30 01 	lds	r24, 0x0130
    24b4:	90 91 31 01 	lds	r25, 0x0131
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    24bc:	e0 91 30 01 	lds	r30, 0x0130
    24c0:	f0 91 31 01 	lds	r31, 0x0131
    24c4:	09 95       	icall
	}
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    24ec:	1f 92       	push	r1
    24ee:	0f 92       	push	r0
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	0f 92       	push	r0
    24f4:	11 24       	eor	r1, r1
    24f6:	2f 93       	push	r18
    24f8:	3f 93       	push	r19
    24fa:	4f 93       	push	r20
    24fc:	5f 93       	push	r21
    24fe:	6f 93       	push	r22
    2500:	7f 93       	push	r23
    2502:	8f 93       	push	r24
    2504:	9f 93       	push	r25
    2506:	af 93       	push	r26
    2508:	bf 93       	push	r27
    250a:	ef 93       	push	r30
    250c:	ff 93       	push	r31
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer0Ptr != NULL_PTR)
    2516:	80 91 30 01 	lds	r24, 0x0130
    251a:	90 91 31 01 	lds	r25, 0x0131
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	29 f0       	breq	.+10     	; 0x252c <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer0Ptr)();
    2522:	e0 91 30 01 	lds	r30, 0x0130
    2526:	f0 91 31 01 	lds	r31, 0x0131
    252a:	09 95       	icall
	}
}
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
    2534:	bf 91       	pop	r27
    2536:	af 91       	pop	r26
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	7f 91       	pop	r23
    253e:	6f 91       	pop	r22
    2540:	5f 91       	pop	r21
    2542:	4f 91       	pop	r20
    2544:	3f 91       	pop	r19
    2546:	2f 91       	pop	r18
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	0f 90       	pop	r0
    254e:	1f 90       	pop	r1
    2550:	18 95       	reti

00002552 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    2552:	1f 92       	push	r1
    2554:	0f 92       	push	r0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	0f 92       	push	r0
    255a:	11 24       	eor	r1, r1
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    257c:	80 91 32 01 	lds	r24, 0x0132
    2580:	90 91 33 01 	lds	r25, 0x0133
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	29 f0       	breq	.+10     	; 0x2592 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2588:	e0 91 32 01 	lds	r30, 0x0132
    258c:	f0 91 33 01 	lds	r31, 0x0133
    2590:	09 95       	icall
	}
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	ff 91       	pop	r31
    2598:	ef 91       	pop	r30
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	0f 90       	pop	r0
    25b4:	1f 90       	pop	r1
    25b6:	18 95       	reti

000025b8 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    25b8:	1f 92       	push	r1
    25ba:	0f 92       	push	r0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	0f 92       	push	r0
    25c0:	11 24       	eor	r1, r1
    25c2:	2f 93       	push	r18
    25c4:	3f 93       	push	r19
    25c6:	4f 93       	push	r20
    25c8:	5f 93       	push	r21
    25ca:	6f 93       	push	r22
    25cc:	7f 93       	push	r23
    25ce:	8f 93       	push	r24
    25d0:	9f 93       	push	r25
    25d2:	af 93       	push	r26
    25d4:	bf 93       	push	r27
    25d6:	ef 93       	push	r30
    25d8:	ff 93       	push	r31
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    25e2:	80 91 32 01 	lds	r24, 0x0132
    25e6:	90 91 33 01 	lds	r25, 0x0133
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	29 f0       	breq	.+10     	; 0x25f8 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    25ee:	e0 91 32 01 	lds	r30, 0x0132
    25f2:	f0 91 33 01 	lds	r31, 0x0133
    25f6:	09 95       	icall
	}
}
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	ff 91       	pop	r31
    25fe:	ef 91       	pop	r30
    2600:	bf 91       	pop	r27
    2602:	af 91       	pop	r26
    2604:	9f 91       	pop	r25
    2606:	8f 91       	pop	r24
    2608:	7f 91       	pop	r23
    260a:	6f 91       	pop	r22
    260c:	5f 91       	pop	r21
    260e:	4f 91       	pop	r20
    2610:	3f 91       	pop	r19
    2612:	2f 91       	pop	r18
    2614:	0f 90       	pop	r0
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	0f 90       	pop	r0
    261a:	1f 90       	pop	r1
    261c:	18 95       	reti

0000261e <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    261e:	1f 92       	push	r1
    2620:	0f 92       	push	r0
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	0f 92       	push	r0
    2626:	11 24       	eor	r1, r1
    2628:	2f 93       	push	r18
    262a:	3f 93       	push	r19
    262c:	4f 93       	push	r20
    262e:	5f 93       	push	r21
    2630:	6f 93       	push	r22
    2632:	7f 93       	push	r23
    2634:	8f 93       	push	r24
    2636:	9f 93       	push	r25
    2638:	af 93       	push	r26
    263a:	bf 93       	push	r27
    263c:	ef 93       	push	r30
    263e:	ff 93       	push	r31
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer1Ptr != NULL_PTR)
    2648:	80 91 32 01 	lds	r24, 0x0132
    264c:	90 91 33 01 	lds	r25, 0x0133
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	29 f0       	breq	.+10     	; 0x265e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer1Ptr)();
    2654:	e0 91 32 01 	lds	r30, 0x0132
    2658:	f0 91 33 01 	lds	r31, 0x0133
    265c:	09 95       	icall
	}
}
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	0f 90       	pop	r0
    2680:	1f 90       	pop	r1
    2682:	18 95       	reti

00002684 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2684:	1f 92       	push	r1
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	0f 92       	push	r0
    268c:	11 24       	eor	r1, r1
    268e:	2f 93       	push	r18
    2690:	3f 93       	push	r19
    2692:	4f 93       	push	r20
    2694:	5f 93       	push	r21
    2696:	6f 93       	push	r22
    2698:	7f 93       	push	r23
    269a:	8f 93       	push	r24
    269c:	9f 93       	push	r25
    269e:	af 93       	push	r26
    26a0:	bf 93       	push	r27
    26a2:	ef 93       	push	r30
    26a4:	ff 93       	push	r31
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    26ae:	80 91 34 01 	lds	r24, 0x0134
    26b2:	90 91 35 01 	lds	r25, 0x0135
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	29 f0       	breq	.+10     	; 0x26c4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    26ba:	e0 91 34 01 	lds	r30, 0x0134
    26be:	f0 91 35 01 	lds	r31, 0x0135
    26c2:	09 95       	icall
	}
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	ff 91       	pop	r31
    26ca:	ef 91       	pop	r30
    26cc:	bf 91       	pop	r27
    26ce:	af 91       	pop	r26
    26d0:	9f 91       	pop	r25
    26d2:	8f 91       	pop	r24
    26d4:	7f 91       	pop	r23
    26d6:	6f 91       	pop	r22
    26d8:	5f 91       	pop	r21
    26da:	4f 91       	pop	r20
    26dc:	3f 91       	pop	r19
    26de:	2f 91       	pop	r18
    26e0:	0f 90       	pop	r0
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	0f 90       	pop	r0
    26e6:	1f 90       	pop	r1
    26e8:	18 95       	reti

000026ea <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	0f 92       	push	r0
    26f2:	11 24       	eor	r1, r1
    26f4:	2f 93       	push	r18
    26f6:	3f 93       	push	r19
    26f8:	4f 93       	push	r20
    26fa:	5f 93       	push	r21
    26fc:	6f 93       	push	r22
    26fe:	7f 93       	push	r23
    2700:	8f 93       	push	r24
    2702:	9f 93       	push	r25
    2704:	af 93       	push	r26
    2706:	bf 93       	push	r27
    2708:	ef 93       	push	r30
    270a:	ff 93       	push	r31
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	if(g_callbackTimer2Ptr != NULL_PTR)
    2714:	80 91 34 01 	lds	r24, 0x0134
    2718:	90 91 35 01 	lds	r25, 0x0135
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	29 f0       	breq	.+10     	; 0x272a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callbackTimer2Ptr)();
    2720:	e0 91 34 01 	lds	r30, 0x0134
    2724:	f0 91 35 01 	lds	r31, 0x0135
    2728:	09 95       	icall
	}
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	ff 91       	pop	r31
    2730:	ef 91       	pop	r30
    2732:	bf 91       	pop	r27
    2734:	af 91       	pop	r26
    2736:	9f 91       	pop	r25
    2738:	8f 91       	pop	r24
    273a:	7f 91       	pop	r23
    273c:	6f 91       	pop	r22
    273e:	5f 91       	pop	r21
    2740:	4f 91       	pop	r20
    2742:	3f 91       	pop	r19
    2744:	2f 91       	pop	r18
    2746:	0f 90       	pop	r0
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	0f 90       	pop	r0
    274c:	1f 90       	pop	r1
    274e:	18 95       	reti

00002750 <TIMER_init>:


void TIMER_init(const TIMER_ConfigType *Config_ptr)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	2a 97       	sbiw	r28, 0x0a	; 10
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_ptr->identification)
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3a 87       	std	Y+10, r19	; 0x0a
    2774:	29 87       	std	Y+9, r18	; 0x09
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	09 f4       	brne	.+2      	; 0x2782 <TIMER_init+0x32>
    2780:	8a c0       	rjmp	.+276    	; 0x2896 <TIMER_init+0x146>
    2782:	29 85       	ldd	r18, Y+9	; 0x09
    2784:	3a 85       	ldd	r19, Y+10	; 0x0a
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	31 05       	cpc	r19, r1
    278a:	09 f4       	brne	.+2      	; 0x278e <TIMER_init+0x3e>
    278c:	ff c0       	rjmp	.+510    	; 0x298c <TIMER_init+0x23c>
    278e:	89 85       	ldd	r24, Y+9	; 0x09
    2790:	9a 85       	ldd	r25, Y+10	; 0x0a
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	09 f0       	breq	.+2      	; 0x2798 <TIMER_init+0x48>
    2796:	78 c1       	rjmp	.+752    	; 0x2a88 <TIMER_init+0x338>
	{
	case TIMER0_ID :

		/* Load TCNT0 with initial value */
		TCNT0 = Config_ptr->initial_value;
    2798:	a2 e5       	ldi	r26, 0x52	; 82
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e9 81       	ldd	r30, Y+1	; 0x01
    279e:	fa 81       	ldd	r31, Y+2	; 0x02
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	8c 93       	st	X, r24
		/* Insert the pre-scaler bits :
		 * &0xB7 to clear WGM00 (bit 6) & WGM01 (bit3)
		 * &0x01 to get WGM00 & <<6 to insert it
		 * &0x02 to get WGM01 & <<3 to insert it
		 */
		TCCR0 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    27a6:	a3 e5       	ldi	r26, 0x53	; 83
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e3 e5       	ldi	r30, 0x53	; 83
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	28 2f       	mov	r18, r24
    27b2:	27 7b       	andi	r18, 0xB7	; 183
    27b4:	e9 81       	ldd	r30, Y+1	; 0x01
    27b6:	fa 81       	ldd	r31, Y+2	; 0x02
    27b8:	81 81       	ldd	r24, Z+1	; 0x01
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	81 70       	andi	r24, 0x01	; 1
    27c0:	90 70       	andi	r25, 0x00	; 0
    27c2:	00 24       	eor	r0, r0
    27c4:	96 95       	lsr	r25
    27c6:	87 95       	ror	r24
    27c8:	07 94       	ror	r0
    27ca:	96 95       	lsr	r25
    27cc:	87 95       	ror	r24
    27ce:	07 94       	ror	r0
    27d0:	98 2f       	mov	r25, r24
    27d2:	80 2d       	mov	r24, r0
    27d4:	28 2b       	or	r18, r24
    27d6:	e9 81       	ldd	r30, Y+1	; 0x01
    27d8:	fa 81       	ldd	r31, Y+2	; 0x02
    27da:	81 81       	ldd	r24, Z+1	; 0x01
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	82 70       	andi	r24, 0x02	; 2
    27e2:	90 70       	andi	r25, 0x00	; 0
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	82 2b       	or	r24, r18
    27f2:	8c 93       	st	X, r24

		/* Insert the clock bits :
		 * &0xF8 to clear CS00 (bit 0) & CS01 (bit 1) & CS02 (bit 2)
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    27f4:	a3 e5       	ldi	r26, 0x53	; 83
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e3 e5       	ldi	r30, 0x53	; 83
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	98 2f       	mov	r25, r24
    2800:	98 7f       	andi	r25, 0xF8	; 248
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	86 81       	ldd	r24, Z+6	; 0x06
    2808:	89 2b       	or	r24, r25
    280a:	8c 93       	st	X, r24

		switch ((Config_ptr->mode))
    280c:	e9 81       	ldd	r30, Y+1	; 0x01
    280e:	fa 81       	ldd	r31, Y+2	; 0x02
    2810:	81 81       	ldd	r24, Z+1	; 0x01
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	38 87       	std	Y+8, r19	; 0x08
    2818:	2f 83       	std	Y+7, r18	; 0x07
    281a:	8f 81       	ldd	r24, Y+7	; 0x07
    281c:	98 85       	ldd	r25, Y+8	; 0x08
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	91 05       	cpc	r25, r1
    2822:	51 f0       	breq	.+20     	; 0x2838 <TIMER_init+0xe8>
    2824:	2f 81       	ldd	r18, Y+7	; 0x07
    2826:	38 85       	ldd	r19, Y+8	; 0x08
    2828:	23 30       	cpi	r18, 0x03	; 3
    282a:	31 05       	cpc	r19, r1
    282c:	61 f1       	breq	.+88     	; 0x2886 <TIMER_init+0x136>
    282e:	8f 81       	ldd	r24, Y+7	; 0x07
    2830:	98 85       	ldd	r25, Y+8	; 0x08
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	c1 f0       	breq	.+48     	; 0x2866 <TIMER_init+0x116>
    2836:	28 c1       	rjmp	.+592    	; 0x2a88 <TIMER_init+0x338>
		{

		case TIMER02_MODE_COMPARE :
			/* Load OCR0 with compare value if compare mode is on */
			OCR0 = Config_ptr->compare_value;
    2838:	ac e5       	ldi	r26, 0x5C	; 92
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e9 81       	ldd	r30, Y+1	; 0x01
    283e:	fa 81       	ldd	r31, Y+2	; 0x02
    2840:	84 81       	ldd	r24, Z+4	; 0x04
    2842:	95 81       	ldd	r25, Z+5	; 0x05
    2844:	8c 93       	st	X, r24

			/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    2846:	a9 e5       	ldi	r26, 0x59	; 89
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 e5       	ldi	r30, 0x59	; 89
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8c 7f       	andi	r24, 0xFC	; 252
    2852:	82 60       	ori	r24, 0x02	; 2
    2854:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    2856:	a3 e5       	ldi	r26, 0x53	; 83
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e3 e5       	ldi	r30, 0x53	; 83
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	8c 93       	st	X, r24
    2864:	11 c1       	rjmp	.+546    	; 0x2a88 <TIMER_init+0x338>

			break;

		case TIMER02_MODE_NORMAL :
			/* Clear OCIE0 & TOIE0 & Enable Timer0 NORMAL Interrupt (TOIE0) */
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    2866:	a9 e5       	ldi	r26, 0x59	; 89
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e9 e5       	ldi	r30, 0x59	; 89
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8c 7f       	andi	r24, 0xFC	; 252
    2872:	81 60       	ori	r24, 0x01	; 1
    2874:	8c 93       	st	X, r24

			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 = (TCCR0 & 0x7F) | (1<<FOC0);
    2876:	a3 e5       	ldi	r26, 0x53	; 83
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e3 e5       	ldi	r30, 0x53	; 83
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 68       	ori	r24, 0x80	; 128
    2882:	8c 93       	st	X, r24
    2884:	01 c1       	rjmp	.+514    	; 0x2a88 <TIMER_init+0x338>

			break;
		case TIMER02_MODE_FAST_PWM :
			/* FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode */
			TCCR0 &= ~(1<<FOC0);
    2886:	a3 e5       	ldi	r26, 0x53	; 83
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e3 e5       	ldi	r30, 0x53	; 83
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8f 77       	andi	r24, 0x7F	; 127
    2892:	8c 93       	st	X, r24
    2894:	f9 c0       	rjmp	.+498    	; 0x2a88 <TIMER_init+0x338>
		}
		break;

		case TIMER1_ID :
			/* Load TCNT1 with initial value */
			TCNT1 = Config_ptr->initial_value;
    2896:	ac e4       	ldi	r26, 0x4C	; 76
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	9c 93       	st	X, r25
    28a6:	8e 93       	st	-X, r24

			/* Insert the pre-scaler bits in TCCR1A :
			 * &0xFC to clear WGM10 (bit 0) & WGM11 (bit1)
			 * &0x03 to get WGM10 & WGM11
			 */
			TCCR1A = (TCCR1A & 0xFC) | ( (Config_ptr->mode) & 0x03);
    28a8:	af e4       	ldi	r26, 0x4F	; 79
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ef e4       	ldi	r30, 0x4F	; 79
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	98 2f       	mov	r25, r24
    28b4:	9c 7f       	andi	r25, 0xFC	; 252
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	81 81       	ldd	r24, Z+1	; 0x01
    28bc:	83 70       	andi	r24, 0x03	; 3
    28be:	89 2b       	or	r24, r25
    28c0:	8c 93       	st	X, r24

			/* Insert the pre-scaler bits in TCCR1B :
			 * &0xE7 to clear WGM12 (bit 3) & WGM13 (bit4)
			 * &0x0C to get WGM12 (bit 3) & WGM13 (bit 4) & << 1 to insert it.
			 */
			TCCR1B = (TCCR1B & 0xE7 ) | ((((Config_ptr->mode)&0x0C)<<1)) ;
    28c2:	ae e4       	ldi	r26, 0x4E	; 78
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ee e4       	ldi	r30, 0x4E	; 78
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	28 2f       	mov	r18, r24
    28ce:	27 7e       	andi	r18, 0xE7	; 231
    28d0:	e9 81       	ldd	r30, Y+1	; 0x01
    28d2:	fa 81       	ldd	r31, Y+2	; 0x02
    28d4:	81 81       	ldd	r24, Z+1	; 0x01
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	8c 70       	andi	r24, 0x0C	; 12
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	82 2b       	or	r24, r18
    28e4:	8c 93       	st	X, r24

			/* Insert the clock bits :
			 * &0xF8 to clear CS10 (bit 0) & CS11 (bit 1) & CS12 (bit 2)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    28e6:	ae e4       	ldi	r26, 0x4E	; 78
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ee e4       	ldi	r30, 0x4E	; 78
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	98 2f       	mov	r25, r24
    28f2:	98 7f       	andi	r25, 0xF8	; 248
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	86 81       	ldd	r24, Z+6	; 0x06
    28fa:	89 2b       	or	r24, r25
    28fc:	8c 93       	st	X, r24



			switch ((Config_ptr->mode))
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	81 81       	ldd	r24, Z+1	; 0x01
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	3e 83       	std	Y+6, r19	; 0x06
    290a:	2d 83       	std	Y+5, r18	; 0x05
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
    290e:	9e 81       	ldd	r25, Y+6	; 0x06
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	91 05       	cpc	r25, r1
    2914:	51 f0       	breq	.+20     	; 0x292a <TIMER_init+0x1da>
    2916:	2d 81       	ldd	r18, Y+5	; 0x05
    2918:	3e 81       	ldd	r19, Y+6	; 0x06
    291a:	2f 30       	cpi	r18, 0x0F	; 15
    291c:	31 05       	cpc	r19, r1
    291e:	71 f1       	breq	.+92     	; 0x297c <TIMER_init+0x22c>
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	d1 f0       	breq	.+52     	; 0x295c <TIMER_init+0x20c>
    2928:	af c0       	rjmp	.+350    	; 0x2a88 <TIMER_init+0x338>
			{

			case TIMER1_MODE_COMPARE_OCR1A :

				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 COMPARE A match Interrupt (OCIE1A) */
				TIMSK = (TIMSK & 0xC3) | (1<<OCIE1A);
    292a:	a9 e5       	ldi	r26, 0x59	; 89
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e9 e5       	ldi	r30, 0x59	; 89
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	83 7c       	andi	r24, 0xC3	; 195
    2936:	80 61       	ori	r24, 0x10	; 16
    2938:	8c 93       	st	X, r24

				/* FOC1A bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR1A & 0xF7) | (1<<FOC1A);
    293a:	af e4       	ldi	r26, 0x4F	; 79
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ef e4       	ldi	r30, 0x4F	; 79
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	8c 93       	st	X, r24

				/* Load OCR1A with compare value if compare mode is on */
				OCR1A = Config_ptr->compare_value;
    2948:	aa e4       	ldi	r26, 0x4A	; 74
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	84 81       	ldd	r24, Z+4	; 0x04
    2952:	95 81       	ldd	r25, Z+5	; 0x05
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	9c 93       	st	X, r25
    2958:	8e 93       	st	-X, r24
    295a:	96 c0       	rjmp	.+300    	; 0x2a88 <TIMER_init+0x338>

				break;

			case TIMER1_MODE_NORMAL :
				/* Clear TICIE1 & TOIE1 & OCIE1B & OCIE1A (bit 2 & 3 & 5 & 6 ) & Enable Timer1 Normal(overflow) Interrupt (TOIE1) */
				TIMSK = (TIMSK & 0x03) | (1<<TOIE1);
    295c:	a9 e5       	ldi	r26, 0x59	; 89
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e9 e5       	ldi	r30, 0x59	; 89
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	83 70       	andi	r24, 0x03	; 3
    2968:	84 60       	ori	r24, 0x04	; 4
    296a:	8c 93       	st	X, r24

				/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
				TCCR1A = (TCCR0 & 0xF7) | (1<<FOC1A);
    296c:	af e4       	ldi	r26, 0x4F	; 79
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e3 e5       	ldi	r30, 0x53	; 83
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	88 60       	ori	r24, 0x08	; 8
    2978:	8c 93       	st	X, r24
    297a:	86 c0       	rjmp	.+268    	; 0x2a88 <TIMER_init+0x338>

				break;
			case TIMER1_MODE_FAST_PWM_OCR1A :
				/* FOC1A & FOC1B bit is only active when the WGM01:00 bits specifies a non-PWM mode */
				TCCR1A &= ~(1<<FOC1A) & ~(1<<FOC1B);
    297c:	af e4       	ldi	r26, 0x4F	; 79
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	ef e4       	ldi	r30, 0x4F	; 79
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	83 7f       	andi	r24, 0xF3	; 243
    2988:	8c 93       	st	X, r24
    298a:	7e c0       	rjmp	.+252    	; 0x2a88 <TIMER_init+0x338>
			break;

			case TIMER2_ID :

				/* Load TCNT0 with initial value */
				TCNT2 = Config_ptr->initial_value;
    298c:	a4 e4       	ldi	r26, 0x44	; 68
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	8c 93       	st	X, r24
				/* Insert the pre-scaler bits :
				 * &0xB7 to clear WGM20 (bit 6) & WGM21 (bit3)
				 * &0x01 to get WGM20 & <<6 to insert it
				 * &0x02 to get WGM21 & <<3 to insert it
				 */
				TCCR2 = (TCCR0 & 0xB7) | ((Config_ptr->mode & 0x01)<<6) | ((Config_ptr->mode & 0x02)<<3);
    299a:	a5 e4       	ldi	r26, 0x45	; 69
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e3 e5       	ldi	r30, 0x53	; 83
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	28 2f       	mov	r18, r24
    29a6:	27 7b       	andi	r18, 0xB7	; 183
    29a8:	e9 81       	ldd	r30, Y+1	; 0x01
    29aa:	fa 81       	ldd	r31, Y+2	; 0x02
    29ac:	81 81       	ldd	r24, Z+1	; 0x01
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	81 70       	andi	r24, 0x01	; 1
    29b4:	90 70       	andi	r25, 0x00	; 0
    29b6:	00 24       	eor	r0, r0
    29b8:	96 95       	lsr	r25
    29ba:	87 95       	ror	r24
    29bc:	07 94       	ror	r0
    29be:	96 95       	lsr	r25
    29c0:	87 95       	ror	r24
    29c2:	07 94       	ror	r0
    29c4:	98 2f       	mov	r25, r24
    29c6:	80 2d       	mov	r24, r0
    29c8:	28 2b       	or	r18, r24
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	81 81       	ldd	r24, Z+1	; 0x01
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	82 70       	andi	r24, 0x02	; 2
    29d6:	90 70       	andi	r25, 0x00	; 0
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	88 0f       	add	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	82 2b       	or	r24, r18
    29e6:	8c 93       	st	X, r24

				/* Insert the clock bits :
				 * &0xF8 to clear CS20 (bit 0) & CS21 (bit 1) & CS22 (bit 2)
				 */
				TCCR2 = (TCCR0 & 0xF8) | (Config_ptr->prescaler);
    29e8:	a5 e4       	ldi	r26, 0x45	; 69
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e3 e5       	ldi	r30, 0x53	; 83
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	98 2f       	mov	r25, r24
    29f4:	98 7f       	andi	r25, 0xF8	; 248
    29f6:	e9 81       	ldd	r30, Y+1	; 0x01
    29f8:	fa 81       	ldd	r31, Y+2	; 0x02
    29fa:	86 81       	ldd	r24, Z+6	; 0x06
    29fc:	89 2b       	or	r24, r25
    29fe:	8c 93       	st	X, r24

				switch ((Config_ptr->mode))
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	81 81       	ldd	r24, Z+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	3c 83       	std	Y+4, r19	; 0x04
    2a0c:	2b 83       	std	Y+3, r18	; 0x03
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	9c 81       	ldd	r25, Y+4	; 0x04
    2a12:	82 30       	cpi	r24, 0x02	; 2
    2a14:	91 05       	cpc	r25, r1
    2a16:	51 f0       	breq	.+20     	; 0x2a2c <TIMER_init+0x2dc>
    2a18:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1c:	23 30       	cpi	r18, 0x03	; 3
    2a1e:	31 05       	cpc	r19, r1
    2a20:	61 f1       	breq	.+88     	; 0x2a7a <TIMER_init+0x32a>
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	c1 f0       	breq	.+48     	; 0x2a5a <TIMER_init+0x30a>
    2a2a:	2e c0       	rjmp	.+92     	; 0x2a88 <TIMER_init+0x338>
				{

				case TIMER02_MODE_COMPARE :

					/* Load OCR0 with compare value if compare mode is on */
					OCR2 = Config_ptr->compare_value;
    2a2c:	a3 e4       	ldi	r26, 0x43	; 67
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	84 81       	ldd	r24, Z+4	; 0x04
    2a36:	95 81       	ldd	r25, Z+5	; 0x05
    2a38:	8c 93       	st	X, r24

					/* Clear OCIE0 & TOIE0 (bit 0 & 1) & Enable Timer0 COMPARE Interrupt (OCIE0) */
					TIMSK = (TIMSK & 0x3F) | (1<<OCIE2);
    2a3a:	a9 e5       	ldi	r26, 0x59	; 89
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e9 e5       	ldi	r30, 0x59	; 89
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 73       	andi	r24, 0x3F	; 63
    2a46:	80 68       	ori	r24, 0x80	; 128
    2a48:	8c 93       	st	X, r24

					/* FOC0 bit is only active when the WGM13:10 bits specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2a4a:	a5 e4       	ldi	r26, 0x45	; 69
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e5 e4       	ldi	r30, 0x45	; 69
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	80 68       	ori	r24, 0x80	; 128
    2a56:	8c 93       	st	X, r24
    2a58:	17 c0       	rjmp	.+46     	; 0x2a88 <TIMER_init+0x338>


				case TIMER02_MODE_NORMAL :

					/* Clear OCIE2 & TOIE2 & Enable Timer2 NORMAL Interrupt (TOIE2) */
					TIMSK = (TIMSK & 0x3F) | (1<<TOIE2);
    2a5a:	a9 e5       	ldi	r26, 0x59	; 89
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e9 e5       	ldi	r30, 0x59	; 89
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	8f 73       	andi	r24, 0x3F	; 63
    2a66:	80 64       	ori	r24, 0x40	; 64
    2a68:	8c 93       	st	X, r24

					/* FOC2 bit is only active when the WGM00 bit specifies a non-PWM mode */
					TCCR2 = (TCCR2 & 0x7F) | (1<<FOC2);
    2a6a:	a5 e4       	ldi	r26, 0x45	; 69
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e5 e4       	ldi	r30, 0x45	; 69
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 68       	ori	r24, 0x80	; 128
    2a76:	8c 93       	st	X, r24
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <TIMER_init+0x338>
					break;

				case TIMER02_MODE_FAST_PWM :

					/* FOC2 bit is only active when the WGM21:20 bits specifies a non-PWM mode */
					TCCR2 &= ~(1<<FOC2);
    2a7a:	a5 e4       	ldi	r26, 0x45	; 69
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e5 e4       	ldi	r30, 0x45	; 69
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	8f 77       	andi	r24, 0x7F	; 127
    2a86:	8c 93       	st	X, r24
					/* PWM Configuration at main application */
					break;
				}
				break;
	}
}
    2a88:	2a 96       	adiw	r28, 0x0a	; 10
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <TIMER0_setCallback>:

void TIMER0_setCallback (void(*a_ptr)(void))
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <TIMER0_setCallback+0x6>
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer0Ptr = a_ptr;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	90 93 31 01 	sts	0x0131, r25
    2ab0:	80 93 30 01 	sts	0x0130, r24
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <TIMER1_setCallback>:

void TIMER1_setCallback (void(*a_ptr)(void))
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <TIMER1_setCallback+0x6>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer1Ptr = a_ptr;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	90 93 33 01 	sts	0x0133, r25
    2ad4:	80 93 32 01 	sts	0x0132, r24
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <TIMER2_setCallback>:

void TIMER2_setCallback (void(*a_ptr)(void))
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <TIMER2_setCallback+0x6>
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
	g_callbackTimer2Ptr = a_ptr;
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	90 93 35 01 	sts	0x0135, r25
    2af8:	80 93 34 01 	sts	0x0134, r24
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <TIMER_DeInit>:

void TIMER_DeInit (uint8 TIMER_DeInit_ID)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <TIMER_DeInit+0x6>
    2b0c:	0f 92       	push	r0
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	89 83       	std	Y+1, r24	; 0x01
	switch (TIMER_DeInit_ID)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3b 83       	std	Y+3, r19	; 0x03
    2b1c:	2a 83       	std	Y+2, r18	; 0x02
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	91 05       	cpc	r25, r1
    2b26:	d1 f0       	breq	.+52     	; 0x2b5c <TIMER_DeInit+0x56>
    2b28:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b2c:	22 30       	cpi	r18, 0x02	; 2
    2b2e:	31 05       	cpc	r19, r1
    2b30:	79 f1       	breq	.+94     	; 0x2b90 <TIMER_DeInit+0x8a>
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	9b 81       	ldd	r25, Y+3	; 0x03
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	d9 f5       	brne	.+118    	; 0x2bb0 <TIMER_DeInit+0xaa>
	{

	case TIMER0_ID :

		/* Clear Timer values */
		TCNT0 = 0;
    2b3a:	e2 e5       	ldi	r30, 0x52	; 82
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	10 82       	st	Z, r1
		TCCR0 = 0;
    2b40:	e3 e5       	ldi	r30, 0x53	; 83
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	10 82       	st	Z, r1
		OCR0 = 0;
    2b46:	ec e5       	ldi	r30, 0x5C	; 92
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    2b4c:	a9 e5       	ldi	r26, 0x59	; 89
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e9 e5       	ldi	r30, 0x59	; 89
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	8c 7f       	andi	r24, 0xFC	; 252
    2b58:	8c 93       	st	X, r24
    2b5a:	2a c0       	rjmp	.+84     	; 0x2bb0 <TIMER_DeInit+0xaa>
		break;

	case TIMER1_ID :

		/* Clear Timer values */
		TCNT1 = 0;
    2b5c:	ec e4       	ldi	r30, 0x4C	; 76
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	11 82       	std	Z+1, r1	; 0x01
    2b62:	10 82       	st	Z, r1
		TCCR1A = 0;
    2b64:	ef e4       	ldi	r30, 0x4F	; 79
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	10 82       	st	Z, r1
		TCCR1B = 0;
    2b6a:	ee e4       	ldi	r30, 0x4E	; 78
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	10 82       	st	Z, r1
		OCR1A = 0;
    2b70:	ea e4       	ldi	r30, 0x4A	; 74
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	11 82       	std	Z+1, r1	; 0x01
    2b76:	10 82       	st	Z, r1
		OCR1B = 0;
    2b78:	e8 e4       	ldi	r30, 0x48	; 72
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	11 82       	std	Z+1, r1	; 0x01
    2b7e:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A) & ~(1<<OCIE1B);
    2b80:	a9 e5       	ldi	r26, 0x59	; 89
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e9 e5       	ldi	r30, 0x59	; 89
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	83 7e       	andi	r24, 0xE3	; 227
    2b8c:	8c 93       	st	X, r24
    2b8e:	10 c0       	rjmp	.+32     	; 0x2bb0 <TIMER_DeInit+0xaa>
		break;

	case TIMER2_ID :

		/* Clear Timer values */
		TCNT2 = 0;
    2b90:	e4 e4       	ldi	r30, 0x44	; 68
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	10 82       	st	Z, r1
		TCCR2 = 0;
    2b96:	e5 e4       	ldi	r30, 0x45	; 69
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	10 82       	st	Z, r1
		OCR2 = 0;
    2b9c:	e3 e4       	ldi	r30, 0x43	; 67
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	10 82       	st	Z, r1

		/* Disable Interrupts */
		TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    2ba2:	a9 e5       	ldi	r26, 0x59	; 89
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e9 e5       	ldi	r30, 0x59	; 89
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8f 73       	andi	r24, 0x3F	; 63
    2bae:	8c 93       	st	X, r24

	}
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <setCallBackFunctionTimer1>:

/*******************************************************************************
 *                    		  Function Declarations                            *
 *******************************************************************************/
void setCallBackFunctionTimer1 (void)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2bc4:	80 91 36 01 	lds	r24, 0x0136
    2bc8:	8f 5f       	subi	r24, 0xFF	; 255
    2bca:	80 93 36 01 	sts	0x0136, r24
}
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <APP_startTimer_1Sec>:

void APP_startTimer_1Sec(void)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	2c 97       	sbiw	r28, 0x0c	; 12
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 1*8Mhz/1024 = 7812.5
	 * Generates interrupt every 1 second
	 */

	g_tick=0;
    2be8:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2bec:	8e ed       	ldi	r24, 0xDE	; 222
    2bee:	95 e1       	ldi	r25, 0x15	; 21
    2bf0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TIMER1_setCallback>
	//	g_flag = TIMER_LCD_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,7812,TIMER_CLOCK_CPU_1024};
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	99 87       	std	Y+9, r25	; 0x09
    2bfa:	88 87       	std	Y+8, r24	; 0x08
    2bfc:	e8 e1       	ldi	r30, 0x18	; 24
    2bfe:	f1 e0       	ldi	r31, 0x01	; 1
    2c00:	fb 87       	std	Y+11, r31	; 0x0b
    2c02:	ea 87       	std	Y+10, r30	; 0x0a
    2c04:	f7 e0       	ldi	r31, 0x07	; 7
    2c06:	fc 87       	std	Y+12, r31	; 0x0c
    2c08:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c0a:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c0c:	00 80       	ld	r0, Z
    2c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	9b 87       	std	Y+11, r25	; 0x0b
    2c16:	8a 87       	std	Y+10, r24	; 0x0a
    2c18:	e8 85       	ldd	r30, Y+8	; 0x08
    2c1a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c1c:	00 82       	st	Z, r0
    2c1e:	88 85       	ldd	r24, Y+8	; 0x08
    2c20:	99 85       	ldd	r25, Y+9	; 0x09
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	99 87       	std	Y+9, r25	; 0x09
    2c26:	88 87       	std	Y+8, r24	; 0x08
    2c28:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c2a:	91 50       	subi	r25, 0x01	; 1
    2c2c:	9c 87       	std	Y+12, r25	; 0x0c
    2c2e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c30:	ee 23       	and	r30, r30
    2c32:	51 f7       	brne	.-44     	; 0x2c08 <APP_startTimer_1Sec+0x34>
	TIMER_init(&configuration1);
    2c34:	ce 01       	movw	r24, r28
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	0e 94 a8 13 	call	0x2750	; 0x2750 <TIMER_init>
}
    2c3c:	2c 96       	adiw	r28, 0x0c	; 12
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <APP_startTimer_3Sec>:
void APP_startTimer_3Sec(void)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	2c 97       	sbiw	r28, 0x0c	; 12
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
	 * Timer 1, 1024 Pre-scalar , Comparing mode with top value of 1024 (1 sec).
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 3*8Mhz/1024 = 23437.5
	 * Generates interrupt every 5 second
	 */

	g_tick=0;
    2c62:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2c66:	8e ed       	ldi	r24, 0xDE	; 222
    2c68:	95 e1       	ldi	r25, 0x15	; 21
    2c6a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TIMER1_setCallback>
	//		g_flag = TIMER_MOTOR_MOVE_SCREEN_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,23437,TIMER_CLOCK_CPU_1024};
    2c6e:	ce 01       	movw	r24, r28
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	99 87       	std	Y+9, r25	; 0x09
    2c74:	88 87       	std	Y+8, r24	; 0x08
    2c76:	ef e1       	ldi	r30, 0x1F	; 31
    2c78:	f1 e0       	ldi	r31, 0x01	; 1
    2c7a:	fb 87       	std	Y+11, r31	; 0x0b
    2c7c:	ea 87       	std	Y+10, r30	; 0x0a
    2c7e:	f7 e0       	ldi	r31, 0x07	; 7
    2c80:	fc 87       	std	Y+12, r31	; 0x0c
    2c82:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c84:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c86:	00 80       	ld	r0, Z
    2c88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	9b 87       	std	Y+11, r25	; 0x0b
    2c90:	8a 87       	std	Y+10, r24	; 0x0a
    2c92:	e8 85       	ldd	r30, Y+8	; 0x08
    2c94:	f9 85       	ldd	r31, Y+9	; 0x09
    2c96:	00 82       	st	Z, r0
    2c98:	88 85       	ldd	r24, Y+8	; 0x08
    2c9a:	99 85       	ldd	r25, Y+9	; 0x09
    2c9c:	01 96       	adiw	r24, 0x01	; 1
    2c9e:	99 87       	std	Y+9, r25	; 0x09
    2ca0:	88 87       	std	Y+8, r24	; 0x08
    2ca2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ca4:	91 50       	subi	r25, 0x01	; 1
    2ca6:	9c 87       	std	Y+12, r25	; 0x0c
    2ca8:	ec 85       	ldd	r30, Y+12	; 0x0c
    2caa:	ee 23       	and	r30, r30
    2cac:	51 f7       	brne	.-44     	; 0x2c82 <APP_startTimer_3Sec+0x34>
	TIMER_init(&configuration1);
    2cae:	ce 01       	movw	r24, r28
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	0e 94 a8 13 	call	0x2750	; 0x2750 <TIMER_init>
}
    2cb6:	2c 96       	adiw	r28, 0x0c	; 12
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <APP_startTimer_6Sec>:

void APP_startTimer_6Sec(void)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	2c 97       	sbiw	r28, 0x0c	; 12
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
	/* Timer delay Configurations for 6 Second delay:
	 * Timer 1, 1024 Pre-scalar
	 * OCR1A = Number of seconds wanted per interrupt*F_CPU/Prescalar = 6*8Mhz/1024 = 46875
	 * Generates interrupt every 6 seconds
	 */
	g_tick=0;
    2cdc:	10 92 36 01 	sts	0x0136, r1

	TIMER1_setCallback(setCallBackFunctionTimer1);
    2ce0:	8e ed       	ldi	r24, 0xDE	; 222
    2ce2:	95 e1       	ldi	r25, 0x15	; 21
    2ce4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TIMER1_setCallback>
	//	g_flag = TIMER_BUZZER_DELAY_ID;

	TIMER_ConfigType configuration1 = {TIMER1_ID,TIMER1_MODE_COMPARE_OCR1A,0,46875,TIMER_CLOCK_CPU_1024};
    2ce8:	ce 01       	movw	r24, r28
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	99 87       	std	Y+9, r25	; 0x09
    2cee:	88 87       	std	Y+8, r24	; 0x08
    2cf0:	e6 e2       	ldi	r30, 0x26	; 38
    2cf2:	f1 e0       	ldi	r31, 0x01	; 1
    2cf4:	fb 87       	std	Y+11, r31	; 0x0b
    2cf6:	ea 87       	std	Y+10, r30	; 0x0a
    2cf8:	f7 e0       	ldi	r31, 0x07	; 7
    2cfa:	fc 87       	std	Y+12, r31	; 0x0c
    2cfc:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cfe:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d00:	00 80       	ld	r0, Z
    2d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	9b 87       	std	Y+11, r25	; 0x0b
    2d0a:	8a 87       	std	Y+10, r24	; 0x0a
    2d0c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d0e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d10:	00 82       	st	Z, r0
    2d12:	88 85       	ldd	r24, Y+8	; 0x08
    2d14:	99 85       	ldd	r25, Y+9	; 0x09
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	99 87       	std	Y+9, r25	; 0x09
    2d1a:	88 87       	std	Y+8, r24	; 0x08
    2d1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d1e:	91 50       	subi	r25, 0x01	; 1
    2d20:	9c 87       	std	Y+12, r25	; 0x0c
    2d22:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d24:	ee 23       	and	r30, r30
    2d26:	51 f7       	brne	.-44     	; 0x2cfc <APP_startTimer_6Sec+0x34>
	TIMER_init(&configuration1);
    2d28:	ce 01       	movw	r24, r28
    2d2a:	01 96       	adiw	r24, 0x01	; 1
    2d2c:	0e 94 a8 13 	call	0x2750	; 0x2750 <TIMER_init>
}
    2d30:	2c 96       	adiw	r28, 0x0c	; 12
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <APP_Timer1DelayForScreenCheck>:

void APP_Timer1DelayForScreenCheck(void)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
	while (g_tick !=1);
    2d4a:	80 91 36 01 	lds	r24, 0x0136
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	e1 f7       	brne	.-8      	; 0x2d4a <APP_Timer1DelayForScreenCheck+0x8>
	g_tick=0;
    2d52:	10 92 36 01 	sts	0x0136, r1
	TIMER_DeInit(TIMER1_ID);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TIMER_DeInit>

}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <APP_Timer1DelayForBuzzerCheck>:
void APP_Timer1DelayForBuzzerCheck(void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
	/* Must call APP_startTimer_6Sec before to identify g_tick every 6 sec */
	/* Delay for 60 second */
	while (g_tick !=10);
    2d6a:	80 91 36 01 	lds	r24, 0x0136
    2d6e:	8a 30       	cpi	r24, 0x0A	; 10
    2d70:	e1 f7       	brne	.-8      	; 0x2d6a <APP_Timer1DelayForBuzzerCheck+0x8>
	g_tick = 0;
    2d72:	10 92 36 01 	sts	0x0136, r1
	TIMER_DeInit(TIMER1_ID);
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TIMER_DeInit>

}
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <UART_init+0x6>
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <UART_init+0x8>
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d92:	1a 82       	std	Y+2, r1	; 0x02
    2d94:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d96:	eb e2       	ldi	r30, 0x2B	; 43
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Number of Bits using Dynamic Configuration
	 * RXB8 & TXB8 is used only for 9-bit data mode (when UCSZ2 = 1)
	 ***********************************************************************/ 

	UCSRB = (1<<RXEN) | (1<<TXEN); //| (1<<RXCIE);
    2d9e:	ea e2       	ldi	r30, 0x2A	; 42
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	88 e1       	ldi	r24, 0x18	; 24
    2da4:	80 83       	st	Z, r24

	/*
	 * & with FB to clear UCSZ2 bit (bit2) and preserve the other bits.
	 * &(1<<2) to get the UCSZ2 bit without UCSZ1 & UCSZ0
	 */
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr ->data_bits) & (1<<2));
    2da6:	aa e2       	ldi	r26, 0x2A	; 42
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	ea e2       	ldi	r30, 0x2A	; 42
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	98 2f       	mov	r25, r24
    2db2:	9b 7f       	andi	r25, 0xFB	; 251
    2db4:	eb 81       	ldd	r30, Y+3	; 0x03
    2db6:	fc 81       	ldd	r31, Y+4	; 0x04
    2db8:	84 81       	ldd	r24, Z+4	; 0x04
    2dba:	84 70       	andi	r24, 0x04	; 4
    2dbc:	89 2b       	or	r24, r25
    2dbe:	8c 93       	st	X, r24

	/* Set RXB8 & TXB8 if we're operating 9-bits mode */
	if ( (Config_Ptr ->data_bits) & (1<<2))
    2dc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc4:	84 81       	ldd	r24, Z+4	; 0x04
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	84 70       	andi	r24, 0x04	; 4
    2dcc:	90 70       	andi	r25, 0x00	; 0
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	39 f0       	breq	.+14     	; 0x2de0 <UART_init+0x5e>
		{
			UCSRB |= (1<<RXB8) | (1<<TXB8);
    2dd2:	aa e2       	ldi	r26, 0x2A	; 42
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ea e2       	ldi	r30, 0x2A	; 42
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	83 60       	ori	r24, 0x03	; 3
    2dde:	8c 93       	st	X, r24
	 * UPM1:0  = Determine Number of parity bits using dynamic Configuration.
	 * USBS    = Determine Number of stop bits using dynamic configuration.
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2de0:	e0 e4       	ldi	r30, 0x40	; 64
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 e8       	ldi	r24, 0x80	; 128
    2de6:	80 83       	st	Z, r24

	/*
	 * &0xCF to clear UPM1 (bit 5) & UPM2 (bit4) and preserve the other bits.
	 * <<4 to insert the parity bits in UMP1 & UMP2.
	 */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr ->parity)<<4);
    2de8:	a0 e4       	ldi	r26, 0x40	; 64
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e0 e4       	ldi	r30, 0x40	; 64
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	28 2f       	mov	r18, r24
    2df4:	2f 7c       	andi	r18, 0xCF	; 207
    2df6:	eb 81       	ldd	r30, Y+3	; 0x03
    2df8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfa:	85 81       	ldd	r24, Z+5	; 0x05
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	82 95       	swap	r24
    2e02:	92 95       	swap	r25
    2e04:	90 7f       	andi	r25, 0xF0	; 240
    2e06:	98 27       	eor	r25, r24
    2e08:	80 7f       	andi	r24, 0xF0	; 240
    2e0a:	98 27       	eor	r25, r24
    2e0c:	82 2b       	or	r24, r18
    2e0e:	8c 93       	st	X, r24
	/*
	 * &0xF7 to clear USBS (bit 3) and preserve the other bits.
	 * <<3 to insert the stop bit in USBS
	 *
	 */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr ->stop)<<3);
    2e10:	a0 e4       	ldi	r26, 0x40	; 64
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e0 e4       	ldi	r30, 0x40	; 64
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	27 7f       	andi	r18, 0xF7	; 247
    2e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e20:	fc 81       	ldd	r31, Y+4	; 0x04
    2e22:	86 81       	ldd	r24, Z+6	; 0x06
    2e24:	88 2f       	mov	r24, r24
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	82 2b       	or	r24, r18
    2e36:	8c 93       	st	X, r24
	 * &0xF9 to clear UCSZ0 (bit 1) & UCSZ1 (bit 2) and preserve the other bits.
	 * &0x03 to get UCSZ0 & UCSZ1 without UCSZ2.
	 * <<1 to insert the character size bits in UCSZ1 & UCSZ0.
	 *
	 */
	UCSRC = (UCSRC & 0xF9) | ( ((Config_Ptr ->data_bits)&0x03) <<1);
    2e38:	a0 e4       	ldi	r26, 0x40	; 64
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	e0 e4       	ldi	r30, 0x40	; 64
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	28 2f       	mov	r18, r24
    2e44:	29 7f       	andi	r18, 0xF9	; 249
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	84 81       	ldd	r24, Z+4	; 0x04
    2e4c:	88 2f       	mov	r24, r24
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	83 70       	andi	r24, 0x03	; 3
    2e52:	90 70       	andi	r25, 0x00	; 0
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	82 2b       	or	r24, r18
    2e5a:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->bitRate) * 8UL))) - 1);
    2e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	a2 81       	ldd	r26, Z+2	; 0x02
    2e66:	b3 81       	ldd	r27, Z+3	; 0x03
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	aa 1f       	adc	r26, r26
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	aa 1f       	adc	r26, r26
    2e76:	bb 1f       	adc	r27, r27
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	aa 1f       	adc	r26, r26
    2e7e:	bb 1f       	adc	r27, r27
    2e80:	9c 01       	movw	r18, r24
    2e82:	ad 01       	movw	r20, r26
    2e84:	80 e4       	ldi	r24, 0x40	; 64
    2e86:	92 e4       	ldi	r25, 0x42	; 66
    2e88:	af e0       	ldi	r26, 0x0F	; 15
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodsi4>
    2e94:	da 01       	movw	r26, r20
    2e96:	c9 01       	movw	r24, r18
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 * Example : 111100000000
	 * UBRRL is = 00000000
	 * UBRRH = 111100000000>>8 = xxxxxxxx1111
	 */
	UBRRH = ubrr_value>>8;
    2e9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	89 2f       	mov	r24, r25
    2ea8:	99 27       	eor	r25, r25
    2eaa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2eac:	e9 e2       	ldi	r30, 0x29	; 41
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	80 83       	st	Z, r24
}
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	0f 92       	push	r0
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ece:	eb e2       	ldi	r30, 0x2B	; 43
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	80 72       	andi	r24, 0x20	; 32
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	b9 f3       	breq	.-18     	; 0x2ece <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2ee0:	ec e2       	ldi	r30, 0x2C	; 44
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ef8:	eb e2       	ldi	r30, 0x2B	; 43
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 23       	and	r24, r24
    2f00:	dc f7       	brge	.-10     	; 0x2ef8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2f02:	ec e2       	ldi	r30, 0x2C	; 44
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	00 d0       	rcall	.+0      	; 0x2f14 <UART_sendString+0x6>
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	9b 83       	std	Y+3, r25	; 0x03
    2f1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f1e:	19 82       	std	Y+1, r1	; 0x01
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	e2 0f       	add	r30, r18
    2f30:	f3 1f       	adc	r31, r19
    2f32:	80 81       	ld	r24, Z
    2f34:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_sendByte>
		i++;
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	fc 01       	movw	r30, r24
    2f4a:	e2 0f       	add	r30, r18
    2f4c:	f3 1f       	adc	r31, r19
    2f4e:	80 81       	ld	r24, Z
    2f50:	88 23       	and	r24, r24
    2f52:	39 f7       	brne	.-50     	; 0x2f22 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <UART_receiveString+0xa>
    2f6a:	0f 92       	push	r0
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	9b 83       	std	Y+3, r25	; 0x03
    2f72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f74:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f80:	8c 01       	movw	r16, r24
    2f82:	02 0f       	add	r16, r18
    2f84:	13 1f       	adc	r17, r19
    2f86:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <UART_recieveByte>
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	80 83       	st	Z, r24
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <UART_receiveString+0x4e>
	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
	{
		i++;
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	8f 5f       	subi	r24, 0xFF	; 255
    2f94:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa0:	8c 01       	movw	r16, r24
    2fa2:	02 0f       	add	r16, r18
    2fa4:	13 1f       	adc	r17, r19
    2fa6:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <UART_recieveByte>
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 83       	st	Z, r24
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#'
	 * '#' is an agreement between you and the user to facilitate the communication
	 */
	while(Str[i] != '#')
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb8:	fc 01       	movw	r30, r24
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	80 81       	ld	r24, Z
    2fc0:	83 32       	cpi	r24, 0x23	; 35
    2fc2:	31 f7       	brne	.-52     	; 0x2f90 <UART_receiveString+0x30>
		Str[i] = UART_recieveByte();
	}
	/* Can be done by do while to receive the first byte safely */

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	fc 01       	movw	r30, r24
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f3 1f       	adc	r31, r19
    2fd4:	10 82       	st	Z, r1
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	08 95       	ret

00002fe6 <__udivmodsi4>:
    2fe6:	a1 e2       	ldi	r26, 0x21	; 33
    2fe8:	1a 2e       	mov	r1, r26
    2fea:	aa 1b       	sub	r26, r26
    2fec:	bb 1b       	sub	r27, r27
    2fee:	fd 01       	movw	r30, r26
    2ff0:	0d c0       	rjmp	.+26     	; 0x300c <__udivmodsi4_ep>

00002ff2 <__udivmodsi4_loop>:
    2ff2:	aa 1f       	adc	r26, r26
    2ff4:	bb 1f       	adc	r27, r27
    2ff6:	ee 1f       	adc	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	a2 17       	cp	r26, r18
    2ffc:	b3 07       	cpc	r27, r19
    2ffe:	e4 07       	cpc	r30, r20
    3000:	f5 07       	cpc	r31, r21
    3002:	20 f0       	brcs	.+8      	; 0x300c <__udivmodsi4_ep>
    3004:	a2 1b       	sub	r26, r18
    3006:	b3 0b       	sbc	r27, r19
    3008:	e4 0b       	sbc	r30, r20
    300a:	f5 0b       	sbc	r31, r21

0000300c <__udivmodsi4_ep>:
    300c:	66 1f       	adc	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	88 1f       	adc	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	1a 94       	dec	r1
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <__udivmodsi4_loop>
    3018:	60 95       	com	r22
    301a:	70 95       	com	r23
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	9b 01       	movw	r18, r22
    3022:	ac 01       	movw	r20, r24
    3024:	bd 01       	movw	r22, r26
    3026:	cf 01       	movw	r24, r30
    3028:	08 95       	ret

0000302a <__prologue_saves__>:
    302a:	2f 92       	push	r2
    302c:	3f 92       	push	r3
    302e:	4f 92       	push	r4
    3030:	5f 92       	push	r5
    3032:	6f 92       	push	r6
    3034:	7f 92       	push	r7
    3036:	8f 92       	push	r8
    3038:	9f 92       	push	r9
    303a:	af 92       	push	r10
    303c:	bf 92       	push	r11
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	ca 1b       	sub	r28, r26
    3054:	db 0b       	sbc	r29, r27
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	09 94       	ijmp

00003062 <__epilogue_restores__>:
    3062:	2a 88       	ldd	r2, Y+18	; 0x12
    3064:	39 88       	ldd	r3, Y+17	; 0x11
    3066:	48 88       	ldd	r4, Y+16	; 0x10
    3068:	5f 84       	ldd	r5, Y+15	; 0x0f
    306a:	6e 84       	ldd	r6, Y+14	; 0x0e
    306c:	7d 84       	ldd	r7, Y+13	; 0x0d
    306e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3070:	9b 84       	ldd	r9, Y+11	; 0x0b
    3072:	aa 84       	ldd	r10, Y+10	; 0x0a
    3074:	b9 84       	ldd	r11, Y+9	; 0x09
    3076:	c8 84       	ldd	r12, Y+8	; 0x08
    3078:	df 80       	ldd	r13, Y+7	; 0x07
    307a:	ee 80       	ldd	r14, Y+6	; 0x06
    307c:	fd 80       	ldd	r15, Y+5	; 0x05
    307e:	0c 81       	ldd	r16, Y+4	; 0x04
    3080:	1b 81       	ldd	r17, Y+3	; 0x03
    3082:	aa 81       	ldd	r26, Y+2	; 0x02
    3084:	b9 81       	ldd	r27, Y+1	; 0x01
    3086:	ce 0f       	add	r28, r30
    3088:	d1 1d       	adc	r29, r1
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	ed 01       	movw	r28, r26
    3096:	08 95       	ret

00003098 <itoa>:
    3098:	fb 01       	movw	r30, r22
    309a:	9f 01       	movw	r18, r30
    309c:	e8 94       	clt
    309e:	42 30       	cpi	r20, 0x02	; 2
    30a0:	c4 f0       	brlt	.+48     	; 0x30d2 <itoa+0x3a>
    30a2:	45 32       	cpi	r20, 0x25	; 37
    30a4:	b4 f4       	brge	.+44     	; 0x30d2 <itoa+0x3a>
    30a6:	4a 30       	cpi	r20, 0x0A	; 10
    30a8:	29 f4       	brne	.+10     	; 0x30b4 <itoa+0x1c>
    30aa:	97 fb       	bst	r25, 7
    30ac:	1e f4       	brtc	.+6      	; 0x30b4 <itoa+0x1c>
    30ae:	90 95       	com	r25
    30b0:	81 95       	neg	r24
    30b2:	9f 4f       	sbci	r25, 0xFF	; 255
    30b4:	64 2f       	mov	r22, r20
    30b6:	77 27       	eor	r23, r23
    30b8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__udivmodhi4>
    30bc:	80 5d       	subi	r24, 0xD0	; 208
    30be:	8a 33       	cpi	r24, 0x3A	; 58
    30c0:	0c f0       	brlt	.+2      	; 0x30c4 <itoa+0x2c>
    30c2:	89 5d       	subi	r24, 0xD9	; 217
    30c4:	81 93       	st	Z+, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	a1 f7       	brne	.-24     	; 0x30b4 <itoa+0x1c>
    30cc:	16 f4       	brtc	.+4      	; 0x30d2 <itoa+0x3a>
    30ce:	5d e2       	ldi	r21, 0x2D	; 45
    30d0:	51 93       	st	Z+, r21
    30d2:	10 82       	st	Z, r1
    30d4:	c9 01       	movw	r24, r18
    30d6:	0c 94 6d 18 	jmp	0x30da	; 0x30da <strrev>

000030da <strrev>:
    30da:	dc 01       	movw	r26, r24
    30dc:	fc 01       	movw	r30, r24
    30de:	67 2f       	mov	r22, r23
    30e0:	71 91       	ld	r23, Z+
    30e2:	77 23       	and	r23, r23
    30e4:	e1 f7       	brne	.-8      	; 0x30de <strrev+0x4>
    30e6:	32 97       	sbiw	r30, 0x02	; 2
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <strrev+0x18>
    30ea:	7c 91       	ld	r23, X
    30ec:	6d 93       	st	X+, r22
    30ee:	70 83       	st	Z, r23
    30f0:	62 91       	ld	r22, -Z
    30f2:	ae 17       	cp	r26, r30
    30f4:	bf 07       	cpc	r27, r31
    30f6:	c8 f3       	brcs	.-14     	; 0x30ea <strrev+0x10>
    30f8:	08 95       	ret

000030fa <__udivmodhi4>:
    30fa:	aa 1b       	sub	r26, r26
    30fc:	bb 1b       	sub	r27, r27
    30fe:	51 e1       	ldi	r21, 0x11	; 17
    3100:	07 c0       	rjmp	.+14     	; 0x3110 <__udivmodhi4_ep>

00003102 <__udivmodhi4_loop>:
    3102:	aa 1f       	adc	r26, r26
    3104:	bb 1f       	adc	r27, r27
    3106:	a6 17       	cp	r26, r22
    3108:	b7 07       	cpc	r27, r23
    310a:	10 f0       	brcs	.+4      	; 0x3110 <__udivmodhi4_ep>
    310c:	a6 1b       	sub	r26, r22
    310e:	b7 0b       	sbc	r27, r23

00003110 <__udivmodhi4_ep>:
    3110:	88 1f       	adc	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	5a 95       	dec	r21
    3116:	a9 f7       	brne	.-22     	; 0x3102 <__udivmodhi4_loop>
    3118:	80 95       	com	r24
    311a:	90 95       	com	r25
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	08 95       	ret

00003122 <_exit>:
    3122:	f8 94       	cli

00003124 <__stop_program>:
    3124:	ff cf       	rjmp	.-2      	; 0x3124 <__stop_program>
